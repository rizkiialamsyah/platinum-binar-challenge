{"ast":null,"code":"import { Chart } from \"./Chart\";\nimport { Container } from \"../../core/render/Container\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\n/**\r\n * A base class for all series-based charts.\r\n */\nexport class SerialChart extends Chart {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * A [[Container]] where chart will store all series.\r\n     *\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"seriesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(this._root, {\n        width: p100,\n        height: p100,\n        isMeasured: false\n      })\n    });\n    /**\r\n     * A list of chart's series.\r\n     */\n    Object.defineProperty(this, \"series\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListAutoDispose()\n    });\n  }\n  _afterNew() {\n    super._afterNew();\n    this._disposers.push(this.series);\n    const children = this.seriesContainer.children;\n    this._disposers.push(this.series.events.onAll(change => {\n      if (change.type === \"clear\") {\n        $array.each(change.oldValues, series => {\n          this._removeSeries(series);\n        });\n        const colors = this.get(\"colors\");\n        if (colors) {\n          colors.reset();\n        }\n      } else if (change.type === \"push\") {\n        children.moveValue(change.newValue);\n        this._processSeries(change.newValue);\n      } else if (change.type === \"setIndex\") {\n        children.setIndex(change.index, change.newValue);\n        this._processSeries(change.newValue);\n      } else if (change.type === \"insertIndex\") {\n        children.insertIndex(change.index, change.newValue);\n        this._processSeries(change.newValue);\n      } else if (change.type === \"removeIndex\") {\n        this._removeSeries(change.oldValue);\n      } else if (change.type === \"moveIndex\") {\n        children.moveValue(change.value, change.newIndex);\n        this._processSeries(change.value);\n      } else {\n        throw new Error(\"Unknown IListEvent type\");\n      }\n    }));\n  }\n  _processSeries(series) {\n    series.chart = this;\n    series._placeBulletsContainer(this);\n  }\n  _removeSeries(series) {\n    if (!series.isDisposed()) {\n      this.seriesContainer.children.removeValue(series);\n      series._removeBulletsContainer();\n    }\n  }\n}\nObject.defineProperty(SerialChart, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"SerialChart\"\n});\nObject.defineProperty(SerialChart, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Chart.classNames.concat([SerialChart.className])\n});","map":{"version":3,"names":["Chart","Container","ListAutoDispose","p100","$array","SerialChart","constructor","Object","defineProperty","new","_root","width","height","isMeasured","_afterNew","_disposers","push","series","children","seriesContainer","events","onAll","change","type","each","oldValues","_removeSeries","colors","get","reset","moveValue","newValue","_processSeries","setIndex","index","insertIndex","oldValue","value","newIndex","Error","chart","_placeBulletsContainer","isDisposed","removeValue","_removeBulletsContainer","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\SerialChart.ts"],"sourcesContent":["import type { Series } from \"./Series\";\n\nimport { Chart, IChartSettings, IChartPrivate, IChartEvents } from \"./Chart\";\nimport { Container } from \"../../core/render/Container\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\n\nexport interface ISerialChartSettings extends IChartSettings {\n\t/**\n\t * A [[ColorSet]] to use when asigning colors for series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Series_colors} for more info\n\t */\n\tcolors?: ColorSet;\n}\n\nexport interface ISerialChartPrivate extends IChartPrivate {\n}\n\nexport interface ISerialChartEvents extends IChartEvents {\n}\n\n/**\n * A base class for all series-based charts.\n */\nexport abstract class SerialChart extends Chart {\n\tpublic static className: string = \"SerialChart\";\n\tpublic static classNames: Array<string> = Chart.classNames.concat([SerialChart.className]);\n\n\tdeclare public _settings: ISerialChartSettings;\n\tdeclare public _privateSettings: ISerialChartPrivate;\n\tdeclare public _seriesType: Series;\n\tdeclare public _events: ISerialChartEvents;\n\n\t/**\n\t * A [[Container]] where chart will store all series.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly seriesContainer: Container = Container.new(this._root, { width: p100, height: p100, isMeasured: false });\n\n\t/**\n\t * A list of chart's series.\n\t */\n\tpublic readonly series: ListAutoDispose<this[\"_seriesType\"]> = new ListAutoDispose();\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis._disposers.push(this.series);\n\n\t\tconst children = this.seriesContainer.children;\n\n\t\tthis._disposers.push(this.series.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\t$array.each(change.oldValues, (series) => {\n\t\t\t\t\tthis._removeSeries(series);\n\t\t\t\t})\n\t\t\t\tconst colors = this.get(\"colors\");\n\t\t\t\tif (colors) {\n\t\t\t\t\tcolors.reset();\n\t\t\t\t}\n\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tchildren.moveValue(change.newValue);\n\t\t\t\tthis._processSeries(change.newValue);\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tchildren.setIndex(change.index, change.newValue);\n\t\t\t\tthis._processSeries(change.newValue);\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tchildren.insertIndex(change.index, change.newValue);\n\t\t\t\tthis._processSeries(change.newValue);\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis._removeSeries(change.oldValue);\n\t\t\t} else if (change.type === \"moveIndex\") {\n\t\t\t\tchildren.moveValue(change.value, change.newIndex);\n\t\t\t\tthis._processSeries(change.value);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tseries.chart = this;\n\t\tseries._placeBulletsContainer(this);\n\t}\n\n\tprotected _removeSeries(series: this[\"_seriesType\"]) {\n\t\tif (!series.isDisposed()) {\n\t\t\tthis.seriesContainer.children.removeValue(series);\n\t\t\tseries._removeBulletsContainer();\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}