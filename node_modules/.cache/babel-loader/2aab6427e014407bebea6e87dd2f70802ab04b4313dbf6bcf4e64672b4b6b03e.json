{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Component } from \"../../core/render/Component\";\nimport { List } from \"../../core/util/List\";\nimport { Color } from \"../../core/util/Color\";\nimport { percentInterpolate } from \"../../core/util/Animation\";\nimport { Percent } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $time from \"../../core/util/Time\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { Container } from \"../../core/render/Container\";\nimport { Label } from \"../../core/render/Label\";\n/**\r\n * A base class for all series.\r\n */\nexport class Series extends Component {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_aggregatesCalculated\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_selectionAggregatesCalculated\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_dataProcessed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_psi\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_pei\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * A chart series belongs to.\r\n     */\n    Object.defineProperty(this, \"chart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * List of bullets to use for the series.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info\r\n     */\n    Object.defineProperty(this, \"bullets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new List()\n    });\n    /**\r\n     * A [[Container]] series' bullets are stored in.\r\n     *\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"bulletsContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(this._root, {\n        width: p100,\n        height: p100,\n        position: \"absolute\"\n      })\n    });\n  }\n  _afterNew() {\n    this.valueFields.push(\"value\");\n    super._afterNew();\n    this.setPrivate(\"customData\", {});\n    this._disposers.push(this.bullets.events.onAll(change => {\n      if (change.type === \"clear\") {\n        this._handleBullets(this.dataItems);\n      } else if (change.type === \"push\") {\n        this._handleBullets(this.dataItems);\n      } else if (change.type === \"setIndex\") {\n        this._handleBullets(this.dataItems);\n      } else if (change.type === \"insertIndex\") {\n        this._handleBullets(this.dataItems);\n      } else if (change.type === \"removeIndex\") {\n        this._handleBullets(this.dataItems);\n      } else if (change.type === \"moveIndex\") {\n        this._handleBullets(this.dataItems);\n      } else {\n        throw new Error(\"Unknown IListEvent type\");\n      }\n    }));\n  }\n  _dispose() {\n    this.bulletsContainer.dispose(); // can be in a different parent\n    super._dispose();\n  }\n  startIndex() {\n    let len = this.dataItems.length;\n    return Math.min(this.getPrivate(\"startIndex\", 0), len);\n  }\n  endIndex() {\n    let len = this.dataItems.length;\n    return Math.min(this.getPrivate(\"endIndex\", len), len);\n  }\n  _handleBullets(dataItems) {\n    $array.each(dataItems, dataItem => {\n      const bullets = dataItem.bullets;\n      if (bullets) {\n        $array.each(bullets, bullet => {\n          bullet.dispose();\n        });\n        dataItem.bullets = undefined;\n      }\n    });\n    this.markDirtyValues();\n  }\n  /**\r\n   * Looks up and returns a data item by its ID.\r\n   *\r\n   * @param   id  ID\r\n   * @return      Data item\r\n   */\n  getDataItemById(id) {\n    return $array.find(this.dataItems, dataItem => {\n      return dataItem.get(\"id\") == id;\n    });\n  }\n  _makeBullets(dataItem) {\n    if (this._shouldMakeBullet(dataItem)) {\n      dataItem.bullets = [];\n      this.bullets.each(bulletFunction => {\n        this._makeBullet(dataItem, bulletFunction);\n      });\n    }\n  }\n  _shouldMakeBullet(_dataItem) {\n    return true;\n  }\n  _makeBullet(dataItem, bulletFunction, index) {\n    const bullet = bulletFunction(this._root, this, dataItem);\n    if (bullet) {\n      let sprite = bullet.get(\"sprite\");\n      if (sprite) {\n        sprite._setDataItem(dataItem);\n        sprite.setRaw(\"position\", \"absolute\");\n        this.bulletsContainer.children.push(sprite);\n      }\n      bullet._index = index;\n      bullet.series = this;\n      dataItem.bullets.push(bullet);\n    }\n    return bullet;\n  }\n  _clearDirty() {\n    super._clearDirty();\n    this._aggregatesCalculated = false;\n    this._selectionAggregatesCalculated = false;\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    let startIndex = this.startIndex();\n    let endIndex = this.endIndex();\n    if (this.isDirty(\"heatRules\")) {\n      this._valuesDirty = true;\n    }\n    if (this.isPrivateDirty(\"baseValueSeries\")) {\n      const baseValueSeries = this.getPrivate(\"baseValueSeries\");\n      if (baseValueSeries) {\n        this._disposers.push(baseValueSeries.onPrivate(\"startIndex\", () => {\n          this.markDirtyValues();\n        }));\n      }\n    }\n    const calculateAggregates = this.get(\"calculateAggregates\");\n    if (calculateAggregates) {\n      if (this._valuesDirty && !this._dataProcessed) {\n        if (!this._aggregatesCalculated) {\n          this._calculateAggregates(0, this.dataItems.length);\n          this._aggregatesCalculated = true;\n        }\n      }\n      if ((this._psi != startIndex || this._pei != endIndex) && !this._selectionAggregatesCalculated) {\n        if (startIndex === 0 && endIndex === this.dataItems.length && this._aggregatesCalculated) {\n          // void\n        } else {\n          this._calculateAggregates(startIndex, endIndex);\n        }\n        this._selectionAggregatesCalculated = true;\n      }\n    }\n    if (this.isDirty(\"tooltip\")) {\n      let tooltip = this.get(\"tooltip\");\n      if (tooltip) {\n        tooltip.hide(0);\n        tooltip.set(\"tooltipTarget\", this);\n      }\n    }\n    if (this.isDirty(\"fill\") || this.isDirty(\"stroke\")) {\n      let markerRectangle;\n      const legendDataItem = this.get(\"legendDataItem\");\n      if (legendDataItem) {\n        markerRectangle = legendDataItem.get(\"markerRectangle\");\n        if (markerRectangle) {\n          if (this.isVisible()) {\n            if (this.isDirty(\"stroke\")) {\n              let stroke = this.get(\"stroke\");\n              markerRectangle.set(\"stroke\", stroke);\n            }\n            if (this.isDirty(\"fill\")) {\n              let fill = this.get(\"fill\");\n              markerRectangle.set(\"fill\", fill);\n            }\n          }\n        }\n      }\n      this.updateLegendMarker(undefined);\n    }\n    if (this.bullets.length > 0) {\n      let startIndex = this.startIndex();\n      let endIndex = this.endIndex();\n      if (endIndex < this.dataItems.length) {\n        endIndex++;\n      }\n      for (let i = startIndex; i < endIndex; i++) {\n        let dataItem = this.dataItems[i];\n        if (!dataItem.bullets) {\n          this._makeBullets(dataItem);\n        }\n      }\n    }\n  }\n  _calculateAggregates(startIndex, endIndex) {\n    let fields = this._valueFields;\n    if (!fields) {\n      throw new Error(\"No value fields are set for the series.\");\n    }\n    const sum = {};\n    const absSum = {};\n    const count = {};\n    const low = {};\n    const high = {};\n    const open = {};\n    const close = {};\n    const average = {};\n    const previous = {};\n    $array.each(fields, key => {\n      sum[key] = 0;\n      absSum[key] = 0;\n      count[key] = 0;\n    });\n    $array.each(fields, key => {\n      let change = key + \"Change\";\n      let changePercent = key + \"ChangePercent\";\n      let changePrevious = key + \"ChangePrevious\";\n      let changePreviousPercent = key + \"ChangePreviousPercent\";\n      let changeSelection = key + \"ChangeSelection\";\n      let changeSelectionPercent = key + \"ChangeSelectionPercent\";\n      let openKey = \"valueY\";\n      if (key == \"valueX\" || key == \"openValueX\" || key == \"lowValueX\" || key == \"highValueX\") {\n        openKey = \"valueX\";\n      }\n      const baseValueSeries = this.getPrivate(\"baseValueSeries\");\n      for (let i = startIndex; i < endIndex; i++) {\n        const dataItem = this.dataItems[i];\n        let value = dataItem.get(key);\n        if (value != null) {\n          count[key]++;\n          sum[key] += value;\n          absSum[key] += Math.abs(value);\n          average[key] = sum[key] / count[key];\n          if (low[key] > value || low[key] == null) {\n            low[key] = value;\n          }\n          if (high[key] < value || high[key] == null) {\n            high[key] = value;\n          }\n          close[key] = value;\n          if (open[key] == null) {\n            open[key] = value;\n            previous[key] = value;\n            if (baseValueSeries) {\n              open[openKey] = baseValueSeries._getBase(openKey);\n            }\n          }\n          if (startIndex === 0) {\n            dataItem.setRaw(change, value - open[openKey]);\n            dataItem.setRaw(changePercent, (value - open[openKey]) / open[openKey] * 100);\n          }\n          dataItem.setRaw(changePrevious, value - previous[openKey]);\n          dataItem.setRaw(changePreviousPercent, (value - previous[openKey]) / previous[openKey] * 100);\n          dataItem.setRaw(changeSelection, value - open[openKey]);\n          dataItem.setRaw(changeSelectionPercent, (value - open[openKey]) / open[openKey] * 100);\n          previous[key] = value;\n        }\n      }\n    });\n    $array.each(fields, key => {\n      this.setPrivate(key + \"AverageSelection\", average[key]);\n      this.setPrivate(key + \"CountSelection\", count[key]);\n      this.setPrivate(key + \"SumSelection\", sum[key]);\n      this.setPrivate(key + \"AbsoluteSumSelection\", absSum[key]);\n      this.setPrivate(key + \"LowSelection\", low[key]);\n      this.setPrivate(key + \"HighSelection\", high[key]);\n      this.setPrivate(key + \"OpenSelection\", open[key]);\n      this.setPrivate(key + \"CloseSelection\", close[key]);\n    });\n    if (startIndex === 0 && endIndex === this.dataItems.length) {\n      $array.each(fields, key => {\n        this.setPrivate(key + \"Average\", average[key]);\n        this.setPrivate(key + \"Count\", count[key]);\n        this.setPrivate(key + \"Sum\", sum[key]);\n        this.setPrivate(key + \"AbsoluteSum\", absSum[key]);\n        this.setPrivate(key + \"Low\", low[key]);\n        this.setPrivate(key + \"High\", high[key]);\n        this.setPrivate(key + \"Open\", open[key]);\n        this.setPrivate(key + \"Close\", close[key]);\n      });\n    }\n  }\n  _updateChildren() {\n    super._updateChildren();\n    this._psi = this.startIndex();\n    this._pei = this.endIndex();\n    if (this.isDirty(\"visible\")) {\n      this.bulletsContainer.set(\"visible\", this.get(\"visible\"));\n    }\n    // Apply heat rules\n    const rules = this.get(\"heatRules\");\n    if (this._valuesDirty && rules && rules.length > 0) {\n      $array.each(rules, rule => {\n        const minValue = rule.minValue || this.getPrivate(rule.dataField + \"Low\") || 0;\n        const maxValue = rule.maxValue || this.getPrivate(rule.dataField + \"High\") || 0;\n        $array.each(rule.target._entities, target => {\n          const value = target.dataItem.get(rule.dataField);\n          if (!$type.isNumber(value)) {\n            if (rule.neutral) {\n              target.set(rule.key, rule.neutral);\n            }\n            return;\n          }\n          if (rule.customFunction) {\n            rule.customFunction.call(this, target, minValue, maxValue, value);\n          } else {\n            let percent;\n            if (rule.logarithmic) {\n              percent = (Math.log(value) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / (Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E);\n            } else {\n              percent = (value - minValue) / (maxValue - minValue);\n            }\n            if ($type.isNumber(value) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\n              percent = 0.5;\n            }\n            // fixes problems if all values are the same\n            let propertyValue;\n            if ($type.isNumber(rule.min)) {\n              propertyValue = rule.min + (rule.max - rule.min) * percent;\n            } else if (rule.min instanceof Color) {\n              propertyValue = Color.interpolate(percent, rule.min, rule.max);\n            } else if (rule.min instanceof Percent) {\n              propertyValue = percentInterpolate(percent, rule.min, rule.max);\n            }\n            target.set(rule.key, propertyValue);\n          }\n        });\n      });\n    }\n    if (this.get(\"visible\")) {\n      if (this.bullets.length > 0) {\n        let count = this.dataItems.length;\n        let startIndex = this.startIndex();\n        let endIndex = this.endIndex();\n        if (endIndex < count) {\n          endIndex++;\n        }\n        if (startIndex > 0) {\n          startIndex--;\n        }\n        for (let i = 0; i < startIndex; i++) {\n          this._hideBullets(this.dataItems[i]);\n        }\n        for (let i = startIndex; i < endIndex; i++) {\n          this._positionBullets(this.dataItems[i]);\n        }\n        for (let i = endIndex; i < count; i++) {\n          this._hideBullets(this.dataItems[i]);\n        }\n      }\n    }\n  }\n  _positionBullets(dataItem) {\n    if (dataItem.bullets) {\n      $array.each(dataItem.bullets, bullet => {\n        this._positionBullet(bullet);\n        const sprite = bullet.get(\"sprite\");\n        if (bullet.get(\"dynamic\")) {\n          if (sprite) {\n            sprite._markDirtyKey(\"fill\");\n            sprite.markDirtySize();\n          }\n          if (sprite instanceof Container) {\n            sprite.walkChildren(child => {\n              child._markDirtyKey(\"fill\");\n              child.markDirtySize();\n              if (child instanceof Label) {\n                child.text.markDirtyText();\n              }\n            });\n          }\n        }\n        if (sprite instanceof Label && sprite.get(\"populateText\")) {\n          sprite.text.markDirtyText();\n        }\n      });\n    }\n  }\n  _hideBullets(dataItem) {\n    if (dataItem.bullets) {\n      $array.each(dataItem.bullets, bullet => {\n        let sprite = bullet.get(\"sprite\");\n        if (sprite) {\n          sprite.setPrivate(\"visible\", false);\n        }\n      });\n    }\n  }\n  _positionBullet(_bullet) {}\n  _placeBulletsContainer(chart) {\n    chart.bulletsContainer.children.moveValue(this.bulletsContainer);\n  }\n  _removeBulletsContainer() {\n    const bulletsContainer = this.bulletsContainer;\n    if (bulletsContainer.parent) {\n      bulletsContainer.parent.children.removeValue(bulletsContainer);\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  disposeDataItem(dataItem) {\n    //super.disposeDataItem(dataItem); // does nothing\n    const bullets = dataItem.bullets;\n    if (bullets) {\n      $array.each(bullets, bullet => {\n        bullet.dispose();\n      });\n    }\n  }\n  _getItemReaderLabel() {\n    return \"\";\n  }\n  /**\r\n   * Shows series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n  showDataItem(dataItem, duration) {\n    const _super = Object.create(null, {\n      showDataItem: {\n        get: () => super.showDataItem\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const promises = [_super.showDataItem.call(this, dataItem, duration)];\n      const bullets = dataItem.bullets;\n      if (bullets) {\n        $array.each(bullets, bullet => {\n          promises.push(bullet.get(\"sprite\").show(duration));\n        });\n      }\n      yield Promise.all(promises);\n    });\n  }\n  /**\r\n   * Hides series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n  hideDataItem(dataItem, duration) {\n    const _super = Object.create(null, {\n      hideDataItem: {\n        get: () => super.hideDataItem\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const promises = [_super.hideDataItem.call(this, dataItem, duration)];\n      const bullets = dataItem.bullets;\n      if (bullets) {\n        $array.each(bullets, bullet => {\n          promises.push(bullet.get(\"sprite\").hide(duration));\n        });\n      }\n      yield Promise.all(promises);\n    });\n  }\n  _sequencedShowHide(show, duration) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.get(\"sequencedInterpolation\")) {\n        if (!$type.isNumber(duration)) {\n          duration = this.get(\"interpolationDuration\", 0);\n        }\n        if (duration > 0) {\n          const startIndex = this.startIndex();\n          const endIndex = this.endIndex();\n          yield Promise.all($array.map(this.dataItems, (dataItem, i) => __awaiter(this, void 0, void 0, function* () {\n            let realDuration = duration || 0;\n            if (i < startIndex - 10 || i > endIndex + 10) {\n              realDuration = 0;\n            }\n            //let delay = this.get(\"sequencedDelay\", 0) * i + realDuration * (i - startIndex) / (endIndex - startIndex);\n            let delay = this.get(\"sequencedDelay\", 0) + realDuration / (endIndex - startIndex);\n            yield $time.sleep(delay * (i - startIndex));\n            if (show) {\n              yield this.showDataItem(dataItem, realDuration);\n            } else {\n              yield this.hideDataItem(dataItem, realDuration);\n            }\n          })));\n        } else {\n          yield Promise.all($array.map(this.dataItems, dataItem => {\n            if (show) {\n              return this.showDataItem(dataItem, 0);\n            } else {\n              return this.hideDataItem(dataItem, 0);\n            }\n          }));\n        }\n      }\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateLegendValue(dataItem) {\n    if (dataItem) {\n      const legendDataItem = dataItem.get(\"legendDataItem\");\n      if (legendDataItem) {\n        const valueLabel = legendDataItem.get(\"valueLabel\");\n        if (valueLabel) {\n          const text = valueLabel.text;\n          let txt = \"\";\n          valueLabel._setDataItem(dataItem);\n          txt = this.get(\"legendValueText\", text.get(\"text\", \"\"));\n          valueLabel.set(\"text\", txt);\n          text.markDirtyText();\n        }\n        const label = legendDataItem.get(\"label\");\n        if (label) {\n          const text = label.text;\n          let txt = \"\";\n          label._setDataItem(dataItem);\n          txt = this.get(\"legendLabelText\", text.get(\"text\", \"\"));\n          label.set(\"text\", txt);\n          text.markDirtyText();\n        }\n      }\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateLegendMarker(_dataItem) {}\n  _onHide() {\n    super._onHide();\n    const tooltip = this.getTooltip();\n    if (tooltip) {\n      tooltip.hide();\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  hoverDataItem(_dataItem) {}\n  /**\r\n   * @ignore\r\n   */\n  unhoverDataItem(_dataItem) {}\n  /**\r\n   * @ignore\r\n   */\n  _getBase(key) {\n    const dataItem = this.dataItems[this.startIndex()];\n    if (dataItem) {\n      return dataItem.get(key);\n    }\n    return 0;\n  }\n}\nObject.defineProperty(Series, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Series\"\n});\nObject.defineProperty(Series, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Component.classNames.concat([Series.className])\n});","map":{"version":3,"names":["Component","List","Color","percentInterpolate","Percent","$array","$type","$time","p100","Container","Label","Series","constructor","Object","defineProperty","new","_root","width","height","position","_afterNew","valueFields","push","setPrivate","_disposers","bullets","events","onAll","change","type","_handleBullets","dataItems","Error","_dispose","bulletsContainer","dispose","startIndex","len","length","Math","min","getPrivate","endIndex","each","dataItem","bullet","undefined","markDirtyValues","getDataItemById","id","find","get","_makeBullets","_shouldMakeBullet","bulletFunction","_makeBullet","_dataItem","index","sprite","_setDataItem","setRaw","children","_index","series","_clearDirty","_aggregatesCalculated","_selectionAggregatesCalculated","_prepareChildren","isDirty","_valuesDirty","isPrivateDirty","baseValueSeries","onPrivate","calculateAggregates","_dataProcessed","_calculateAggregates","_psi","_pei","tooltip","hide","set","markerRectangle","legendDataItem","isVisible","stroke","fill","updateLegendMarker","i","fields","_valueFields","sum","absSum","count","low","high","open","close","average","previous","key","changePercent","changePrevious","changePreviousPercent","changeSelection","changeSelectionPercent","openKey","value","abs","_getBase","_updateChildren","rules","rule","minValue","dataField","maxValue","target","_entities","isNumber","neutral","customFunction","call","percent","logarithmic","log","LOG10E","Infinity","propertyValue","max","interpolate","_hideBullets","_positionBullets","_positionBullet","_markDirtyKey","markDirtySize","walkChildren","child","text","markDirtyText","_bullet","_placeBulletsContainer","chart","moveValue","_removeBulletsContainer","parent","removeValue","disposeDataItem","_getItemReaderLabel","showDataItem","duration","promises","_super","show","Promise","all","hideDataItem","_sequencedShowHide","map","__awaiter","realDuration","delay","sleep","updateLegendValue","valueLabel","txt","label","_onHide","getTooltip","hoverDataItem","unhoverDataItem","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\Series.ts"],"sourcesContent":["import { Component, IComponentSettings, IComponentPrivate, DataItem, IComponentEvents, IComponentDataItem } from \"../../core/render/Component\";\nimport { List } from \"../../core/util/List\";\nimport { Color } from \"../../core/util/Color\";\nimport { percentInterpolate } from \"../../core/util/Animation\";\nimport { Percent } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $time from \"../../core/util/Time\";\nimport type { Root } from \"../../core/Root\";\nimport { p100 } from \"../../core/util/Percent\";\nimport type { Chart } from \"./Chart\";\nimport type { Bullet } from \"./Bullet\";\nimport { Container } from \"../../core/render/Container\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { ILegendDataItem } from \"./Legend\";\nimport type { Template } from \"../../core/util/Template\";\nimport type { Sprite } from \"../../core/render/Sprite\";\nimport { Label } from \"../../core/render/Label\";\n//import { Animations } from \"../../core/util/Animation\";\n\n/**\n * Defines interface for a heat rule.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/heat-rules/} for more info\n */\nexport interface IHeatRule {\n\n\t/**\n\t * Target template.\n\t */\n\ttarget: Template<any>;\n\n\t/**\n\t * The setting value to use for items if the lowest value.\n\t */\n\tmin?: any;\n\n\t/**\n\t * The setting value to use for items if the highest value.\n\t */\n\tmax?: any;\n\n\t/**\n\t * The setting value to use for items which do not have value at all.\n\t */\n\tneutral?: any;\n\n\t/**\n\t * Which data field to use when determining item's value.\n\t */\n\tdataField: string;\n\n\t/**\n\t * A setting key to set.\n\t */\n\tkey?: string;\n\n\t/**\n\t * Custom lowest value.\n\t */\n\tminValue?: number;\n\n\t/**\n\t * Custom highest value.\n\t */\n\tmaxValue?: number;\n\n\t/**\n\t * Use logarithmic scale when calculating intermediate setting values.\n\t *\n\t * @default false\n\t */\n\tlogarithmic?: boolean;\n\n\t/**\n\t * A custom function that will set target element's settings.\n\t *\n\t * Can be used to do custom manipulation on complex objects requiring more\n\t * than modifying a setting.\n\t */\n\tcustomFunction?: (target: Sprite, minValue: number, maxValue: number, value?: any) => void;\n\n}\n\n\nexport interface ISeriesDataItem extends IComponentDataItem {\n\tid?: string;\n\tvalue?: number;\n\tvalueWorking?:number;\n\tvalueChange?: number;\n\tvalueChangePercent?: number;\n\tvalueChangeSelection?: number;\n\tvalueChangeSelectionPercent?: number;\n\tvalueChangePrevious?: number;\n\tvalueChangePreviousPercent?: number;\n\tvalueWorkingOpen?: number;\n\tvalueWorkingClose?: number;\n}\n\nexport interface ISeriesSettings extends IComponentSettings {\n\n\t/**\n\t * Name of the series.\n\t */\n\tname?: string;\n\n\t/**\n\t * A key to look up in data for an id of the data item.\n\t */\n\tidField?: string;\n\n\t/**\n\t * A key to look up in data for a numeric value of the data item.\n\t *\n\t * Some series use it to display its elements. It can also be used in heat\n\t * rules.\n\t */\n\tvalueField?: string;\n\n\t/**\n\t * A text template to be used for label in legend.\n\t */\n\tlegendLabelText?: string;\n\n\t/**\n\t * A text template to be used for value label in legend.\n\t */\n\tlegendValueText?: string;\n\n\t/**\n\t * If set to `true` the series initial animation will be played item by item\n\t * rather than all at once.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animation_of_series} for more info\n\t */\n\tsequencedInterpolation?:boolean;\n\n\t/**\n\t * A delay in milliseconds to wait before starting animation of next data\n\t * item.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animation_of_series} for more info\n\t */\n\tsequencedDelay?:number;\n\n\t/**\n\t * A list of heat rules to apply on series elements.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/heat-rules/} for more info\n\t */\n\theatRules?:IHeatRule[];\n\n\t/**\n\t * If set to `true`, series will calculate aggregate values, e.g. change\n\t * percent, high, low, etc.\n\t *\n\t * Do not enable unless you are using such aggregate values in tooltips,\n\t * display data fields, heat rules, or similar.\n\t */\n\tcalculateAggregates?: boolean;\n\n\t/**\n\t * Series stroke color.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Series_colors} for more info\n\t */\n\tstroke?: Color;\n\n\t/**\n\t * Series fill color.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Series_colors} for more info\n\t */\n\tfill?: Color;\n\n\t/**\n\t * A data item representing series in a [[Legend]].\n\t *\n\t * @readonly\n\t */\n\tlegendDataItem?: DataItem<ILegendDataItem>;\n\n}\n\nexport interface ISeriesPrivate extends IComponentPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tchart?: Chart;\n\tstartIndex?: number;\n\tendIndex?: number;\n\n\tvalueAverage?: number;\n\tvalueCount?: number;\n\tvalueSum?: number;\n\tvalueAbsoluteSum?: number;\n\tvalueLow?: number;\n\tvalueHigh?: number;\n\tvalueOpen?: number;\n\tvalueClose?: number;\n\n\tbaseValueSeries?: Series;\n}\n\nexport interface ISeriesEvents extends IComponentEvents {\n\n}\n\n/**\n * A base class for all series.\n */\nexport abstract class Series extends Component {\n\tpublic static className: string = \"Series\";\n\tpublic static classNames: Array<string> = Component.classNames.concat([Series.className]);\n\n\tdeclare public _settings: ISeriesSettings;\n\tdeclare public _privateSettings: ISeriesPrivate;\n\tdeclare public _dataItemSettings: ISeriesDataItem;\n\tdeclare public _events: ISeriesEvents;\n\n\tprotected _aggregatesCalculated: boolean = false;\n\tprotected _selectionAggregatesCalculated: boolean = false;\n\tprotected _dataProcessed: boolean = false;\n\n\tprotected _psi: number | undefined;\n\tprotected _pei: number | undefined;\n\n\t/**\n\t * A chart series belongs to.\n\t */\n\tpublic chart:Chart | undefined;\n\n\t/**\n\t * List of bullets to use for the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info\n\t */\n\tpublic bullets: List<<D extends DataItem<this[\"_dataItemSettings\"]>>(root: Root, series:Series, dataItem: D) => Bullet | undefined> = new List();\n\n\t/**\n\t * A [[Container]] series' bullets are stored in.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly bulletsContainer: Container = Container.new(this._root, {width:p100, height:p100, position:\"absolute\"});\n\n\tprotected _afterNew() {\n\t\tthis.valueFields.push(\"value\");\n\n\t\tsuper._afterNew();\n\n\t\tthis.setPrivate(\"customData\", {});\n\n\t\tthis._disposers.push(this.bullets.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\tthis._handleBullets(this.dataItems);\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tthis._handleBullets(this.dataItems);\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tthis._handleBullets(this.dataItems);\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tthis._handleBullets(this.dataItems);\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis._handleBullets(this.dataItems);\n\t\t\t} else if (change.type === \"moveIndex\") {\n\t\t\t\tthis._handleBullets(this.dataItems);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected _dispose(){\n\t\tthis.bulletsContainer.dispose(); // can be in a different parent\n\t\tsuper._dispose();\n\t}\n\n\tpublic startIndex():number {\n\t\tlet len = this.dataItems.length;\n\t\treturn Math.min(this.getPrivate(\"startIndex\", 0), len);\n\t}\n\n\tpublic endIndex():number {\n\t\tlet len = this.dataItems.length;\n\t\treturn Math.min(this.getPrivate(\"endIndex\", len), len)\n\t}\n\n\tprotected _handleBullets(dataItems:Array<DataItem<this[\"_dataItemSettings\"]>>){\n\t\t$array.each(dataItems, (dataItem)=>{\n\t\t\tconst bullets = dataItem.bullets;\n\t\t\tif(bullets){\n\t\t\t\t$array.each(bullets, (bullet)=>{\n\t\t\t\t\tbullet.dispose();\n\t\t\t\t})\n\n\t\t\t\tdataItem.bullets = undefined;\n\t\t\t}\n\t\t})\n\n\t\tthis.markDirtyValues();\n\t}\n\n\t/**\n\t * Looks up and returns a data item by its ID.\n\t *\n\t * @param   id  ID\n\t * @return      Data item\n\t */\n\tpublic getDataItemById(id: string): DataItem<this[\"_dataItemSettings\"]> | undefined {\n\t\treturn $array.find(this.dataItems, (dataItem: any) => {\n\t\t\treturn dataItem.get(\"id\") == id;\n\t\t})\n\t}\n\n\tprotected _makeBullets(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif(this._shouldMakeBullet(dataItem)){\n\t\t\tdataItem.bullets = [];\n\n\t\t\tthis.bullets.each((bulletFunction) => {\n\t\t\t\tthis._makeBullet(dataItem, bulletFunction);\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _shouldMakeBullet(_dataItem: DataItem<this[\"_dataItemSettings\"]>):boolean{\n\t\treturn true;\n\t}\n\n\tprotected _makeBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>, bulletFunction:(root: Root, series:Series, dataItem: DataItem<this[\"_dataItemSettings\"]>) => Bullet | undefined, index?:number):Bullet | undefined{\n\t\tconst bullet = bulletFunction(this._root, this, dataItem);\n\t\tif(bullet){\n\t\t\tlet sprite = bullet.get(\"sprite\");\n\n\t\t\tif (sprite) {\n\t\t\t\tsprite._setDataItem(dataItem);\n\t\t\t\tsprite.setRaw(\"position\", \"absolute\");\n\t\t\t\tthis.bulletsContainer.children.push(sprite);\n\t\t\t}\n\t\t\tbullet._index = index;\n\t\t\tbullet.series = this;\n\t\t\tdataItem.bullets!.push(bullet);\n\t\t}\n\t\treturn bullet;\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._aggregatesCalculated = false;\n\t\tthis._selectionAggregatesCalculated = false;\n\t}\n\n\tpublic _prepareChildren(){\n\t\tsuper._prepareChildren();\n\n\t\tlet startIndex = this.startIndex();\n\t\tlet endIndex = this.endIndex();\n\n\n\t\tif(this.isDirty(\"heatRules\")){\n\t\t\tthis._valuesDirty = true;\n\t\t}\n\n\t\tif(this.isPrivateDirty(\"baseValueSeries\")){\n\t\t\tconst baseValueSeries = this.getPrivate(\"baseValueSeries\");\n\t\t\tif(baseValueSeries){\n\t\t\t\tthis._disposers.push(baseValueSeries.onPrivate(\"startIndex\", ()=>{\n\t\t\t\t\tthis.markDirtyValues();\n\t\t\t\t}))\n\t\t\t}\n\t\t}\n\n\t\tconst calculateAggregates = this.get(\"calculateAggregates\");\n\t\tif(calculateAggregates){\n\t\t\tif (this._valuesDirty && !this._dataProcessed) {\n\t\t\t\tif (!this._aggregatesCalculated) {\n\t\t\t\t\tthis._calculateAggregates(0, this.dataItems.length);\n\t\t\t\t\tthis._aggregatesCalculated = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ((this._psi != startIndex || this._pei != endIndex) && !this._selectionAggregatesCalculated) {\n\t\t\t\tif (startIndex === 0 && endIndex === this.dataItems.length && this._aggregatesCalculated) {\n\t\t\t\t\t// void\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._calculateAggregates(startIndex, endIndex);\n\t\t\t\t}\n\n\t\t\t\tthis._selectionAggregatesCalculated = true;\n\t\t\t}\n\t\t}\n\n\t\tif(this.isDirty(\"tooltip\")){\n\t\t\tlet tooltip = this.get(\"tooltip\");\n\t\t\tif(tooltip){\n\t\t\t\ttooltip.hide(0);\n\t\t\t\ttooltip.set(\"tooltipTarget\", this);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"fill\") || this.isDirty(\"stroke\")) {\n\n\t\t\tlet markerRectangle: Graphics | undefined;\n\t\t\tconst legendDataItem = this.get(\"legendDataItem\");\n\t\t\tif (legendDataItem) {\n\t\t\t\tmarkerRectangle = legendDataItem.get(\"markerRectangle\");\n\n\t\t\t\tif (markerRectangle) {\n\t\t\t\t\tif(this.isVisible()){\n\t\t\t\t\t\tif (this.isDirty(\"stroke\")) {\n\t\t\t\t\t\t\tlet stroke = this.get(\"stroke\");\n\t\t\t\t\t\t\tmarkerRectangle.set(\"stroke\", stroke);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.isDirty(\"fill\")) {\n\t\t\t\t\t\t\tlet fill = this.get(\"fill\");\n\t\t\t\t\t\t\tmarkerRectangle.set(\"fill\", fill);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.updateLegendMarker(undefined);\n\t\t}\n\n\n\t\tif (this.bullets.length > 0) {\n\t\t\tlet startIndex = this.startIndex();\n\t\t\tlet endIndex = this.endIndex();\n\n\t\t\tif(endIndex < this.dataItems.length){\n\t\t\t\tendIndex++;\n\t\t\t}\n\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tlet dataItem = this.dataItems[i];\n\t\t\t\tif (!dataItem.bullets) {\n\t\t\t\t\tthis._makeBullets(dataItem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tprotected _calculateAggregates(startIndex: number, endIndex: number) {\n\t\tlet fields = this._valueFields;\n\n\t\tif (!fields) {\n\t\t\tthrow new Error(\"No value fields are set for the series.\");\n\t\t}\n\n\t\tconst sum: { [index: string]: number } = {};\n\t\tconst absSum: { [index: string]: number } = {};\n\t\tconst count: { [index: string]: number } = {};\n\t\tconst low: { [index: string]: number } = {};\n\t\tconst high: { [index: string]: number } = {};\n\t\tconst open: { [index: string]: number } = {};\n\t\tconst close: { [index: string]: number } = {};\n\t\tconst average: { [index: string]: number } = {};\n\t\tconst previous: { [index: string]: number } = {};\n\n\t\t$array.each(fields, (key) => {\n\t\t\tsum[key] = 0;\n\t\t\tabsSum[key] = 0;\n\t\t\tcount[key] = 0;\n\t\t})\n\n\t\t$array.each(fields, (key) => {\n\t\t\tlet change = key + \"Change\";\n\t\t\tlet changePercent = key + \"ChangePercent\";\n\t\t\tlet changePrevious = key + \"ChangePrevious\";\n\t\t\tlet changePreviousPercent = key + \"ChangePreviousPercent\";\n\t\t\tlet changeSelection = key + \"ChangeSelection\";\n\t\t\tlet changeSelectionPercent = key + \"ChangeSelectionPercent\";\n\n\t\t\tlet openKey = \"valueY\";\n\n\t\t\tif(key == \"valueX\" || key == \"openValueX\" || key == \"lowValueX\" || key == \"highValueX\"){\n\t\t\t\topenKey = \"valueX\";\n\t\t\t}\n\n\t\t\tconst baseValueSeries = this.getPrivate(\"baseValueSeries\");\n\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tconst dataItem = this.dataItems[i];\n\n\t\t\t\tlet value = dataItem.get(<any>key)\n\n\t\t\t\tif (value != null) {\n\t\t\t\t\tcount[key]++;\n\t\t\t\t\tsum[key] += value;\n\n\t\t\t\t\tabsSum[key] += Math.abs(value);\n\n\t\t\t\t\taverage[key] = sum[key] / count[key];\n\n\t\t\t\t\tif (low[key] > value || low[key] == null) {\n\t\t\t\t\t\tlow[key] = value;\n\t\t\t\t\t}\n\t\t\t\t\tif (high[key] < value || high[key] == null) {\n\t\t\t\t\t\thigh[key] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\tclose[key] = value;\n\n\t\t\t\t\tif (open[key] == null) {\n\t\t\t\t\t\topen[key] = value;\n\t\t\t\t\t\tprevious[key] = value;\n\n\t\t\t\t\t\tif(baseValueSeries){\n\t\t\t\t\t\t\topen[openKey] = baseValueSeries._getBase(openKey);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (startIndex === 0) {\n\t\t\t\t\t\tdataItem.setRaw(<any>(change), value - open[openKey]);\n\t\t\t\t\t\tdataItem.setRaw(<any>(changePercent), (value - open[openKey]) / open[openKey] * 100);\n\t\t\t\t\t}\n\n\t\t\t\t\tdataItem.setRaw(<any>(changePrevious), value - previous[openKey]);\n\t\t\t\t\tdataItem.setRaw(<any>(changePreviousPercent), (value - previous[openKey]) / previous[openKey] * 100);\n\t\t\t\t\tdataItem.setRaw(<any>(changeSelection), value - open[openKey]);\n\t\t\t\t\tdataItem.setRaw(<any>(changeSelectionPercent), (value - open[openKey]) / open[openKey] * 100);\n\n\t\t\t\t\tprevious[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\t$array.each(fields, (key) => {\n\t\t\tthis.setPrivate(<any>(key + \"AverageSelection\"), average[key]);\n\t\t\tthis.setPrivate(<any>(key + \"CountSelection\"), count[key]);\n\t\t\tthis.setPrivate(<any>(key + \"SumSelection\"), sum[key]);\n\t\t\tthis.setPrivate(<any>(key + \"AbsoluteSumSelection\"), absSum[key]);\n\t\t\tthis.setPrivate(<any>(key + \"LowSelection\"), low[key]);\n\t\t\tthis.setPrivate(<any>(key + \"HighSelection\"), high[key]);\n\t\t\tthis.setPrivate(<any>(key + \"OpenSelection\"), open[key]);\n\t\t\tthis.setPrivate(<any>(key + \"CloseSelection\"), close[key]);\n\t\t})\n\n\t\tif (startIndex === 0 && endIndex === this.dataItems.length) {\n\t\t\t$array.each(fields, (key) => {\n\t\t\t\tthis.setPrivate(<any>(key + \"Average\"), average[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"Count\"), count[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"Sum\"), sum[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"AbsoluteSum\"), absSum[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"Low\"), low[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"High\"), high[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"Open\"), open[key]);\n\t\t\t\tthis.setPrivate(<any>(key + \"Close\"), close[key]);\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tthis._psi = this.startIndex();\n\t\tthis._pei = this.endIndex();\n\n\t\tif(this.isDirty(\"visible\")){\n\t\t\tthis.bulletsContainer.set(\"visible\", this.get(\"visible\"));\n\t\t}\n\n\n\t\t// Apply heat rules\n\t\tconst rules = this.get(\"heatRules\");\n\n\t\tif (this._valuesDirty && rules && rules.length > 0) {\n\t\t\t$array.each(rules, (rule) => {\n\t\t\t\tconst minValue = rule.minValue || this.getPrivate(<any>(rule.dataField + \"Low\")) || 0;\n\t\t\t\tconst maxValue = rule.maxValue || this.getPrivate(<any>(rule.dataField + \"High\")) || 0;\n\n\t\t\t\t$array.each(rule.target._entities, (target) => {\n\t\t\t\t\tconst value = target.dataItem.get(rule.dataField);\n\n\t\t\t\t\tif (!$type.isNumber(value)) {\n\t\t\t\t\t\tif(rule.neutral){\n\t\t\t\t\t\t\ttarget.set(rule.key, rule.neutral);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rule.customFunction) {\n\t\t\t\t\t\trule.customFunction.call(this, target, minValue, maxValue, value);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet percent: number;\n\t\t\t\t\t\tif (rule.logarithmic) {\n\t\t\t\t\t\t\tpercent = (Math.log(value) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / ((Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tpercent = (value - minValue) / (maxValue - minValue);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($type.isNumber(value) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\n\t\t\t\t\t\t\tpercent = 0.5;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// fixes problems if all values are the same\n\t\t\t\t\t\tlet propertyValue;\n\t\t\t\t\t\tif ($type.isNumber(rule.min)) {\n\t\t\t\t\t\t\tpropertyValue = rule.min + (rule.max - rule.min) * percent;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rule.min instanceof Color) {\n\t\t\t\t\t\t\tpropertyValue = Color.interpolate(percent, rule.min, rule.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rule.min instanceof Percent) {\n\t\t\t\t\t\t\tpropertyValue = percentInterpolate(percent, rule.min, rule.max);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget.set(rule.key, propertyValue);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif(this.get(\"visible\")){\n\t\t\tif (this.bullets.length > 0) {\n\t\t\t\tlet count = this.dataItems.length;\n\t\t\t\tlet startIndex = this.startIndex();\n\t\t\t\tlet endIndex = this.endIndex();\n\n\t\t\t\tif(endIndex < count){\n\t\t\t\t\tendIndex++;\n\t\t\t\t}\n\t\t\t\tif(startIndex > 0){\n\t\t\t\t\tstartIndex--;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < startIndex; i++) {\n\t\t\t\t\tthis._hideBullets(this.dataItems[i]);\n\t\t\t\t}\n\n\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\t\tthis._positionBullets(this.dataItems[i]);\n\t\t\t\t}\n\n\t\t\t\tfor (let i = endIndex; i < count; i++) {\n\t\t\t\t\tthis._hideBullets(this.dataItems[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _positionBullets(dataItem: DataItem<this[\"_dataItemSettings\"]>){\n\t\tif(dataItem.bullets){\n\t\t\t$array.each(dataItem.bullets, (bullet) => {\n\t\t\t\tthis._positionBullet(bullet);\n\t\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\t\t\t\tif(bullet.get(\"dynamic\")){\n\n\t\t\t\t\tif(sprite){\n\t\t\t\t\t\tsprite._markDirtyKey(\"fill\" as any);\n\t\t\t\t\t\tsprite.markDirtySize();\n\t\t\t\t\t}\n\t\t\t\t\tif(sprite instanceof Container){\n\t\t\t\t\t\tsprite.walkChildren((child)=>{\n\t\t\t\t\t\t\tchild._markDirtyKey(\"fill\" as any);\n\t\t\t\t\t\t\tchild.markDirtySize();\n\n\t\t\t\t\t\t\tif(child instanceof Label){\n\t\t\t\t\t\t\t\tchild.text.markDirtyText();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(sprite instanceof Label && sprite.get(\"populateText\" as any)){\n\t\t\t\t\tsprite.text.markDirtyText();\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _hideBullets(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif (dataItem.bullets) {\n\t\t\t$array.each(dataItem.bullets, (bullet) => {\n\t\t\t\tlet sprite = bullet.get(\"sprite\");\n\t\t\t\tif (sprite) {\n\t\t\t\t\tsprite.setPrivate(\"visible\", false);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic _positionBullet(_bullet: Bullet) {\n\t}\n\n\tpublic _placeBulletsContainer(chart:Chart){\n\t\tchart.bulletsContainer.children.moveValue(this.bulletsContainer);\n\t}\n\n\tpublic _removeBulletsContainer(){\n\t\tconst bulletsContainer = this.bulletsContainer;\n\t\tif(bulletsContainer.parent){\n\t\t\tbulletsContainer.parent.children.removeValue(bulletsContainer)\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\t//super.disposeDataItem(dataItem); // does nothing\n\n\t\tconst bullets = dataItem.bullets;\n\n\t\tif(bullets){\n\t\t\t$array.each(bullets, (bullet)=>{\n\t\t\t\tbullet.dispose();\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _getItemReaderLabel(): string {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.showDataItem(dataItem, duration)];\n\t\tconst bullets = dataItem.bullets;\n\t\tif(bullets){\n\t\t\t$array.each(bullets, (bullet)=>{\n\t\t\t\tpromises.push(bullet.get(\"sprite\").show(duration));\n\t\t\t})\n\t\t}\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.hideDataItem(dataItem, duration)];\n\t\tconst bullets = dataItem.bullets;\n\t\tif(bullets){\n\t\t\t$array.each(bullets, (bullet)=>{\n\t\t\t\tpromises.push(bullet.get(\"sprite\").hide(duration));\n\t\t\t})\n\t\t}\n\t\tawait Promise.all(promises);\n\t}\n\n\n\tprotected async _sequencedShowHide(show: boolean, duration?: number): Promise<void> {\n\t\tif (this.get(\"sequencedInterpolation\")) {\n\n\t\t\tif (!$type.isNumber(duration)) {\n\t\t\t\tduration = this.get(\"interpolationDuration\", 0);\n\t\t\t}\n\n\t\t\tif (duration > 0) {\n\t\t\t\tconst startIndex = this.startIndex();\n\t\t\t\tconst endIndex = this.endIndex();\n\n\t\t\t\tawait Promise.all($array.map(this.dataItems, async (dataItem, i) => {\n\t\t\t\t\tlet realDuration = duration || 0;\n\n\t\t\t\t\tif (i < startIndex - 10 || i > endIndex + 10) {\n\t\t\t\t\t\trealDuration = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t//let delay = this.get(\"sequencedDelay\", 0) * i + realDuration * (i - startIndex) / (endIndex - startIndex);\n\t\t\t\t\tlet delay = this.get(\"sequencedDelay\", 0) + realDuration / (endIndex - startIndex);\n\n\t\t\t\t\tawait $time.sleep(delay * (i - startIndex));\n\n\t\t\t\t\tif (show) {\n\t\t\t\t\t\tawait this.showDataItem(dataItem, realDuration);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tawait this.hideDataItem(dataItem, realDuration);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tawait Promise.all($array.map(this.dataItems, (dataItem) => {\n\t\t\t\t\tif (show) {\n\t\t\t\t\t\treturn this.showDataItem(dataItem, 0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn this.hideDataItem(dataItem, 0);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendValue(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif(dataItem){\n\t\t\tconst legendDataItem = dataItem.get(\"legendDataItem\" as any) as DataItem<ILegendDataItem>;\n\n\t\t\tif (legendDataItem) {\n\t\t\t\tconst valueLabel = legendDataItem.get(\"valueLabel\");\n\t\t\t\tif (valueLabel) {\n\t\t\t\t\tconst text = valueLabel.text;\n\t\t\t\t\tlet txt = \"\";\n\t\t\t\t\tvalueLabel._setDataItem(dataItem);\n\t\t\t\t\ttxt = this.get(\"legendValueText\", text.get(\"text\", \"\"));\n\n\t\t\t\t\tvalueLabel.set(\"text\", txt);\n\t\t\t\t\ttext.markDirtyText();\n\t\t\t\t}\n\n\t\t\t\tconst label = legendDataItem.get(\"label\");\n\t\t\t\tif (label) {\n\t\t\t\t\tconst text = label.text;\n\t\t\t\t\tlet txt = \"\";\n\t\t\t\t\tlabel._setDataItem(dataItem);\n\t\t\t\t\ttxt = this.get(\"legendLabelText\", text.get(\"text\", \"\"));\n\n\t\t\t\t\tlabel.set(\"text\", txt);\n\t\t\t\t\ttext.markDirtyText();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendMarker(_dataItem?: DataItem<this[\"_dataItemSettings\"]>) {\n\t}\n\n\tprotected _onHide(){\n\t\tsuper._onHide();\n\n\t\tconst tooltip = this.getTooltip();\n\t\tif(tooltip){\n\t\t\ttooltip.hide();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic hoverDataItem(_dataItem: DataItem<this[\"_dataItemSettings\"]>) {}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic unhoverDataItem(_dataItem: DataItem<this[\"_dataItemSettings\"]>) {}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _getBase(key: any): number {\n\t\tconst dataItem = this.dataItems[this.startIndex()];\n\t\tif (dataItem) {\n\t\t\treturn dataItem.get(key);\n\t\t}\n\t\treturn 0;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}