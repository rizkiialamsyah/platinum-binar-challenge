{"ast":null,"code":"import { XYChartDefaultTheme } from \"./XYChartDefaultTheme\";\nimport { Container } from \"../../core/render/Container\";\nimport { Rectangle } from \"../../core/render/Rectangle\";\nimport { SerialChart } from \"../../core/render/SerialChart\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { Color } from \"../../core/util/Color\";\nimport { Button } from \"../../core/render/Button\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Percent } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $order from \"../../core/util/Order\";\nimport * as $object from \"../../core/util/Object\";\nimport * as $utils from \"../../core/util/Utils\";\n/**\r\n * Creates an XY chart.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/} for more info\r\n * @important\r\n */\nexport class XYChart extends SerialChart {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * A list of horizontal axes.\r\n     */\n    Object.defineProperty(this, \"xAxes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListAutoDispose()\n    });\n    /**\r\n     * A list of vertical axes.\r\n     */\n    Object.defineProperty(this, \"yAxes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListAutoDispose()\n    });\n    /**\r\n     * A [[Container]] located on top of the chart, used to store top horizontal\r\n     * axes.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"topAxesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.chartContainer.children.push(Container.new(this._root, {\n        width: p100,\n        layout: this._root.verticalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] located in the middle the chart, used to store vertical axes\r\n     * and plot area container.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"yAxesAndPlotContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.chartContainer.children.push(Container.new(this._root, {\n        width: p100,\n        height: p100,\n        layout: this._root.horizontalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] located on bottom of the chart, used to store bottom\r\n     * horizontal axes.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"bottomAxesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.chartContainer.children.push(Container.new(this._root, {\n        width: p100,\n        layout: this._root.verticalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] located on left of the chart, used to store left-hand\r\n     * vertical axes.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"leftAxesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.yAxesAndPlotContainer.children.push(Container.new(this._root, {\n        height: p100,\n        layout: this._root.horizontalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] located in the middle of the chart, used to store plotContainer and topPlotContainer\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"plotsContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.yAxesAndPlotContainer.children.push(Container.new(this._root, {\n        width: p100,\n        height: p100,\n        maskContent: false\n      }))\n    });\n    /**\r\n     * A [[Container]] located in the middle of the chart, used to store actual\r\n     * plots (series).\r\n     *\r\n     * NOTE: `plotContainer` will automatically have its `background` preset. If\r\n     * you need to modify background or outline for chart's plot area, you can\r\n     * use `plotContainer.get(\"background\")` for that.*\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"plotContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.plotsContainer.children.push(Container.new(this._root, {\n        width: p100,\n        height: p100\n      }))\n    });\n    /**\r\n     * A [[Container]] used for any elements that need to be displayed over\r\n     * regular `plotContainer`.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"topPlotContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.plotsContainer.children.push(Container.new(this._root, {\n        width: p100,\n        height: p100\n      }))\n    });\n    /**\r\n     * A [[Container]] axis grid elements are stored in.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"gridContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.plotContainer.children.push(Container.new(this._root, {\n        width: p100,\n        height: p100,\n        isMeasured: false\n      }))\n    });\n    /**\r\n     * A [[Container]] axis background grid elements are stored in.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"topGridContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(this._root, {\n        width: p100,\n        height: p100,\n        isMeasured: false\n      })\n    });\n    /**\r\n     * A [[Container]] located on right of the chart, used to store right-hand\r\n     * vertical axes.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"rightAxesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.yAxesAndPlotContainer.children.push(Container.new(this._root, {\n        height: p100,\n        layout: this._root.horizontalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] axis headers are stored in.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"axisHeadersContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.plotContainer.children.push(Container.new(this._root, {}))\n    });\n    /**\r\n     * A button that is shown when chart is not fully zoomed out.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Zoom_out_button} for more info\r\n     * @default Button.new()\r\n     */\n    Object.defineProperty(this, \"zoomOutButton\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.topPlotContainer.children.push(Button.new(this._root, {\n        themeTags: [\"zoom\"],\n        icon: Graphics.new(this._root, {\n          themeTags: [\"button\", \"icon\"]\n        })\n      }))\n    });\n    Object.defineProperty(this, \"_movePoint\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {\n        x: 0,\n        y: 0\n      }\n    });\n    Object.defineProperty(this, \"_wheelDp\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_otherCharts\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_movePoints\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_downStartX\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_downEndX\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_downStartY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_downEndY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  _afterNew() {\n    this._defaultThemes.push(XYChartDefaultTheme.new(this._root));\n    super._afterNew();\n    this._disposers.push(this.xAxes);\n    this._disposers.push(this.yAxes);\n    const root = this._root;\n    let verticalLayout = this._root.verticalLayout;\n    const zoomOutButton = this.zoomOutButton;\n    zoomOutButton.events.on(\"click\", () => {\n      this.zoomOut();\n    });\n    zoomOutButton.set(\"opacity\", 0);\n    zoomOutButton.states.lookup(\"default\").set(\"opacity\", 1);\n    this.chartContainer.set(\"layout\", verticalLayout);\n    const plotContainer = this.plotContainer;\n    plotContainer.children.push(this.seriesContainer);\n    this._disposers.push(this._processAxis(this.xAxes, this.bottomAxesContainer));\n    this._disposers.push(this._processAxis(this.yAxes, this.leftAxesContainer));\n    plotContainer.children.push(this.topGridContainer);\n    plotContainer.children.push(this.bulletsContainer);\n    // Setting trasnparent background so that full body of the plot container\n    // is interactive\n    plotContainer.set(\"interactive\", true);\n    plotContainer.set(\"interactiveChildren\", false);\n    plotContainer.set(\"background\", Rectangle.new(root, {\n      themeTags: [\"xy\", \"background\"],\n      fill: Color.fromHex(0x000000),\n      fillOpacity: 0\n    }));\n    this._disposers.push(plotContainer.events.on(\"pointerdown\", event => {\n      this._handlePlotDown(event.originalEvent);\n    }));\n    this._disposers.push(plotContainer.events.on(\"globalpointerup\", event => {\n      this._handlePlotUp(event.originalEvent);\n    }));\n    this._disposers.push(plotContainer.events.on(\"globalpointermove\", event => {\n      this._handlePlotMove(event.originalEvent);\n    }));\n    this._maskGrid();\n    this._setUpTouch();\n  }\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isDirty(\"pinchZoomX\") || this.isDirty(\"pinchZoomY\") || this.get(\"panX\") || this.get(\"panY\")) {\n      this._setUpTouch();\n    }\n  }\n  _setUpTouch() {\n    if (!this.plotContainer._display.cancelTouch) {\n      this.plotContainer._display.cancelTouch = this.get(\"pinchZoomX\") || this.get(\"pinchZoomY\") || this.get(\"panX\") || this.get(\"panY\") ? true : false;\n    }\n  }\n  _maskGrid() {\n    this.gridContainer.set(\"maskContent\", true);\n    this.topGridContainer.set(\"maskContent\", true);\n  }\n  _removeSeries(series) {\n    const xAxis = series.get(\"xAxis\");\n    if (xAxis) {\n      $array.remove(xAxis.series, series);\n      xAxis.markDirtyExtremes();\n    }\n    const yAxis = series.get(\"yAxis\");\n    if (yAxis) {\n      $array.remove(yAxis.series, series);\n      yAxis.markDirtyExtremes();\n    }\n    const cursor = this.get(\"cursor\");\n    if (cursor) {\n      const snapToSeries = cursor.get(\"snapToSeries\");\n      if (snapToSeries) {\n        $array.remove(snapToSeries, series);\n      }\n    }\n    super._removeSeries(series);\n  }\n  /**\r\n   * This method is invoked when mouse wheel is used over chart's plot\r\n   * container, and handles zooming/pan.\r\n   *\r\n   * You can invoke this method manually, if you need to mimic chart's wheel\r\n   * behavior over other elements of the chart.\r\n   */\n  handleWheel(event) {\n    const wheelX = this.get(\"wheelX\");\n    const wheelY = this.get(\"wheelY\");\n    const plotContainer = this.plotContainer;\n    const wheelEvent = event.originalEvent;\n    // Ignore wheel event if it is happening on a non-chart element, e.g. if\n    // some page element is over the chart.\n    if ($utils.isLocalEvent(wheelEvent, this)) {\n      wheelEvent.preventDefault();\n    } else {\n      return;\n    }\n    const plotPoint = plotContainer.toLocal(this._root.documentPointToRoot({\n      x: wheelEvent.clientX,\n      y: wheelEvent.clientY\n    }));\n    const wheelStep = this.get(\"wheelStep\", 0.2);\n    const shiftY = wheelEvent.deltaY / 100;\n    const shiftX = wheelEvent.deltaX / 100;\n    const wheelZoomPositionX = this.get(\"wheelZoomPositionX\");\n    const wheelZoomPositionY = this.get(\"wheelZoomPositionY\");\n    if ((wheelX === \"zoomX\" || wheelX === \"zoomXY\") && shiftX != 0) {\n      this.xAxes.each(axis => {\n        if (axis.get(\"zoomX\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let position = axis.fixPosition(plotPoint.x / plotContainer.width());\n          if (wheelZoomPositionX != null) {\n            position = wheelZoomPositionX;\n          }\n          let newStart = start - wheelStep * (end - start) * shiftX * position;\n          let newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);\n          if (1 / (newEnd - newStart) < axis.getPrivate(\"maxZoomFactor\", Infinity) / axis.get(\"minZoomCount\", 1)) {\n            this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n          }\n        }\n      });\n    }\n    if ((wheelY === \"zoomX\" || wheelY === \"zoomXY\") && shiftY != 0) {\n      this.xAxes.each(axis => {\n        if (axis.get(\"zoomX\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let position = axis.fixPosition(plotPoint.x / plotContainer.width());\n          if (wheelZoomPositionX != null) {\n            position = wheelZoomPositionX;\n          }\n          let newStart = start - wheelStep * (end - start) * shiftY * position;\n          let newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);\n          if (1 / (newEnd - newStart) < axis.getPrivate(\"maxZoomFactor\", Infinity) / axis.get(\"minZoomCount\", 1)) {\n            this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n          }\n        }\n      });\n    }\n    if ((wheelX === \"zoomY\" || wheelX === \"zoomXY\") && shiftX != 0) {\n      this.yAxes.each(axis => {\n        if (axis.get(\"zoomY\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let position = axis.fixPosition(plotPoint.y / plotContainer.height());\n          if (wheelZoomPositionY != null) {\n            position = wheelZoomPositionY;\n          }\n          let newStart = start - wheelStep * (end - start) * shiftX * position;\n          let newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);\n          if (1 / (newEnd - newStart) < axis.getPrivate(\"maxZoomFactor\", Infinity) / axis.get(\"minZoomCount\", 1)) {\n            this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n          }\n        }\n      });\n    }\n    if ((wheelY === \"zoomY\" || wheelY === \"zoomXY\") && shiftY != 0) {\n      this.yAxes.each(axis => {\n        if (axis.get(\"zoomY\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let position = axis.fixPosition(plotPoint.y / plotContainer.height());\n          if (wheelZoomPositionY != null) {\n            position = wheelZoomPositionY;\n          }\n          let newStart = start - wheelStep * (end - start) * shiftY * position;\n          let newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);\n          if (1 / (newEnd - newStart) < axis.getPrivate(\"maxZoomFactor\", Infinity) / axis.get(\"minZoomCount\", 1)) {\n            this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n          }\n        }\n      });\n    }\n    if ((wheelX === \"panX\" || wheelX === \"panXY\") && shiftX != 0) {\n      this.xAxes.each(axis => {\n        if (axis.get(\"panX\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let delta = this._getWheelSign(axis) * wheelStep * (end - start) * shiftX;\n          let newStart = start + delta;\n          let newEnd = end + delta;\n          let se = this._fixWheel(newStart, newEnd);\n          newStart = se[0];\n          newEnd = se[1];\n          this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n        }\n      });\n    }\n    if ((wheelY === \"panX\" || wheelY === \"panXY\") && shiftY != 0) {\n      this.xAxes.each(axis => {\n        if (axis.get(\"panX\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let delta = this._getWheelSign(axis) * wheelStep * (end - start) * shiftY;\n          let newStart = start + delta;\n          let newEnd = end + delta;\n          let se = this._fixWheel(newStart, newEnd);\n          newStart = se[0];\n          newEnd = se[1];\n          this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n        }\n      });\n    }\n    if ((wheelX === \"panY\" || wheelX === \"panXY\") && shiftX != 0) {\n      this.yAxes.each(axis => {\n        if (axis.get(\"panY\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let delta = this._getWheelSign(axis) * wheelStep * (end - start) * shiftX;\n          let newStart = start + delta;\n          let newEnd = end + delta;\n          let se = this._fixWheel(newStart, newEnd);\n          newStart = se[0];\n          newEnd = se[1];\n          this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n        }\n      });\n    }\n    if ((wheelY === \"panY\" || wheelY === \"panXY\") && shiftY != 0) {\n      this.yAxes.each(axis => {\n        if (axis.get(\"panY\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let delta = this._getWheelSign(axis) * wheelStep * (end - start) * shiftY;\n          let newStart = start - delta;\n          let newEnd = end - delta;\n          let se = this._fixWheel(newStart, newEnd);\n          newStart = se[0];\n          newEnd = se[1];\n          this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n        }\n      });\n    }\n  }\n  _handleSetWheel() {\n    const wheelX = this.get(\"wheelX\");\n    const wheelY = this.get(\"wheelY\");\n    const plotContainer = this.plotContainer;\n    if (wheelX !== \"none\" || wheelY !== \"none\") {\n      this._wheelDp = plotContainer.events.on(\"wheel\", event => {\n        this.handleWheel(event);\n      });\n      this._disposers.push(this._wheelDp);\n    } else {\n      if (this._wheelDp) {\n        this._wheelDp.dispose();\n      }\n    }\n  }\n  _getWheelSign(axis) {\n    let sign = 1;\n    if (axis.get(\"renderer\").get(\"inversed\")) {\n      sign = -1;\n    }\n    return sign;\n  }\n  _fixWheel(start, end) {\n    const diff = end - start;\n    if (start < 0) {\n      start = 0;\n      end = start + diff;\n    }\n    if (end > 1) {\n      end = 1;\n      start = end - diff;\n    }\n    return [start, end];\n  }\n  _handlePlotDown(event) {\n    if (event.button == 2) {\n      return;\n    }\n    const plotContainer = this.plotContainer;\n    let local = plotContainer.toLocal(this._root.documentPointToRoot({\n      x: event.clientX,\n      y: event.clientY\n    }));\n    if (this.get(\"pinchZoomX\") || this.get(\"pinchZoomY\")) {\n      const touchEvent = event;\n      const pointerId = touchEvent.pointerId;\n      if (pointerId) {\n        if ($object.keys(plotContainer._downPoints).length > 0) {\n          const xAxis = this.xAxes.getIndex(0);\n          const yAxis = this.yAxes.getIndex(0);\n          if (xAxis) {\n            this._downStartX = xAxis.get(\"start\", 0);\n            this._downEndX = xAxis.get(\"end\", 1);\n          }\n          if (yAxis) {\n            this._downStartY = yAxis.get(\"start\", 0);\n            this._downEndY = yAxis.get(\"end\", 1);\n          }\n        }\n      }\n    }\n    if (this.get(\"panX\") || this.get(\"panY\")) {\n      if (local.x >= 0 && local.y >= 0 && local.x <= plotContainer.width() && local.y <= this.height()) {\n        //this._downPoint = local;\n        this._downPoint = {\n          x: event.clientX,\n          y: event.clientY\n        };\n        const panX = this.get(\"panX\");\n        const panY = this.get(\"panY\");\n        if (panX) {\n          this.xAxes.each(axis => {\n            axis._panStart = axis.get(\"start\");\n            axis._panEnd = axis.get(\"end\");\n          });\n        }\n        if (panY) {\n          this.yAxes.each(axis => {\n            axis._panStart = axis.get(\"start\");\n            axis._panEnd = axis.get(\"end\");\n          });\n        }\n        const eventType = \"panstarted\";\n        if (this.events.isEnabled(eventType)) {\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this,\n            originalEvent: event\n          });\n        }\n      }\n    }\n  }\n  _handleWheelAnimation(animation) {\n    if (animation) {\n      animation.events.on(\"stopped\", () => {\n        this._dispatchWheelAnimation();\n      });\n    } else {\n      this._dispatchWheelAnimation();\n    }\n  }\n  _dispatchWheelAnimation() {\n    const eventType = \"wheelended\";\n    if (this.events.isEnabled(eventType)) {\n      this.events.dispatch(eventType, {\n        type: eventType,\n        target: this\n      });\n    }\n  }\n  _handlePlotUp(event) {\n    const downPoint = this._downPoint;\n    if (downPoint) {\n      if (this.get(\"panX\") || this.get(\"panY\")) {\n        let local = this.plotContainer.toLocal(this._root.documentPointToRoot({\n          x: event.clientX,\n          y: event.clientY\n        }));\n        if (local.x == downPoint.x && local.y == downPoint.y) {\n          const eventType = \"pancancelled\";\n          if (this.events.isEnabled(eventType)) {\n            this.events.dispatch(eventType, {\n              type: eventType,\n              target: this,\n              originalEvent: event\n            });\n          }\n        }\n        const eventType = \"panended\";\n        if (this.events.isEnabled(eventType)) {\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this,\n            originalEvent: event\n          });\n        }\n      }\n    }\n    // TODO: handle multitouch\n    this._downPoint = undefined;\n    this.xAxes.each(xAxis => {\n      xAxis._isPanning = false;\n    });\n    this.yAxes.each(yAxis => {\n      yAxis._isPanning = false;\n    });\n  }\n  _handlePlotMove(event) {\n    const plotContainer = this.plotContainer;\n    if (this.get(\"pinchZoomX\") || this.get(\"pinchZoomY\")) {\n      const touchEvent = event;\n      const pointerId = touchEvent.pointerId;\n      if (pointerId) {\n        this._movePoints[pointerId] = this._root.documentPointToRoot({\n          x: event.clientX,\n          y: event.clientY\n        });\n        if ($object.keys(plotContainer._downPoints).length > 1) {\n          this._handlePinch();\n          return;\n        }\n      }\n    }\n    let downPoint = this._downPoint;\n    if (downPoint) {\n      downPoint = plotContainer.toLocal(this._root.documentPointToRoot(downPoint));\n      let local = plotContainer.toLocal(this._root.documentPointToRoot({\n        x: event.clientX,\n        y: event.clientY\n      }));\n      const panX = this.get(\"panX\");\n      const panY = this.get(\"panY\");\n      if (panX) {\n        let scrollbarX = this.get(\"scrollbarX\");\n        if (scrollbarX) {\n          scrollbarX.events.disableType(\"rangechanged\");\n        }\n        this.xAxes.each(axis => {\n          if (axis.get(\"panX\")) {\n            axis._isPanning = true;\n            //const maxDeviation = axis.get(\"maxDeviation\", 0);\n            let panStart = axis._panStart;\n            let panEnd = axis._panEnd;\n            let difference = panEnd - panStart;\n            let deltaX = difference * (downPoint.x - local.x) / plotContainer.width();\n            if (axis.get(\"renderer\").get(\"inversed\")) {\n              deltaX *= -1;\n            }\n            let start = panStart + deltaX;\n            let end = panEnd + deltaX;\n            if (end - start < 1 + axis.get(\"maxDeviation\", 1) * 2) {\n              axis.set(\"start\", start);\n              axis.set(\"end\", end);\n            }\n          }\n        });\n        if (scrollbarX) {\n          scrollbarX.events.enableType(\"rangechanged\");\n        }\n      }\n      if (panY) {\n        let scrollbarY = this.get(\"scrollbarY\");\n        if (scrollbarY) {\n          scrollbarY.events.disableType(\"rangechanged\");\n        }\n        this.yAxes.each(axis => {\n          if (axis.get(\"panY\")) {\n            axis._isPanning = true;\n            //const maxDeviation = axis.get(\"maxDeviation\", 0);\n            let panStart = axis._panStart;\n            let panEnd = axis._panEnd;\n            let difference = panEnd - panStart;\n            let deltaY = difference * (downPoint.y - local.y) / plotContainer.height();\n            if (axis.get(\"renderer\").get(\"inversed\")) {\n              deltaY *= -1;\n            }\n            let start = panStart - deltaY;\n            let end = panEnd - deltaY;\n            if (end - start < 1 + axis.get(\"maxDeviation\", 1) * 2) {\n              axis.set(\"start\", start);\n              axis.set(\"end\", end);\n            }\n          }\n        });\n        if (scrollbarY) {\n          scrollbarY.events.enableType(\"rangechanged\");\n        }\n      }\n    }\n  }\n  _handlePinch() {\n    const plotContainer = this.plotContainer;\n    let i = 0;\n    let downPoints = [];\n    let movePoints = [];\n    $object.each(plotContainer._downPoints, (k, point) => {\n      downPoints[i] = point;\n      let movePoint = this._movePoints[k];\n      if (movePoint) {\n        movePoints[i] = movePoint;\n      }\n      i++;\n    });\n    if (downPoints.length > 1 && movePoints.length > 1) {\n      const w = plotContainer.width();\n      const h = plotContainer.height();\n      let downPoint0 = downPoints[0];\n      let downPoint1 = downPoints[1];\n      let movePoint0 = movePoints[0];\n      let movePoint1 = movePoints[1];\n      if (downPoint0 && downPoint1 && movePoint0 && movePoint1) {\n        movePoint0 = plotContainer.toLocal(movePoint0);\n        movePoint1 = plotContainer.toLocal(movePoint1);\n        downPoint0 = plotContainer.toLocal(downPoint0);\n        downPoint1 = plotContainer.toLocal(downPoint1);\n        if (this.get(\"pinchZoomX\")) {\n          const downStartX = this._downStartX;\n          const downEndX = this._downEndX;\n          if (downStartX != null && downEndX != null) {\n            if (downPoint0.x > downPoint1.x) {\n              [downPoint0, downPoint1] = [downPoint1, downPoint0];\n              [movePoint0, movePoint1] = [movePoint1, movePoint0];\n            }\n            let downPos0 = downStartX + downPoint0.x / w * (downEndX - downStartX);\n            let downPos1 = downStartX + downPoint1.x / w * (downEndX - downStartX);\n            let movePos0 = downStartX + movePoint0.x / w * (downEndX - downStartX);\n            let movePos1 = downStartX + movePoint1.x / w * (downEndX - downStartX);\n            let initialDistance = Math.max(0.001, downPos1 - downPos0);\n            let currentDistance = Math.max(0.001, movePos1 - movePos0);\n            let d = initialDistance / currentDistance;\n            let s = downStartX * d + downPos0 - movePos0 * d;\n            let e = downEndX * d + downPos1 - movePos1 * d;\n            this.xAxes.each(xAxis => {\n              let sa = xAxis.fixPosition(s);\n              let ea = xAxis.fixPosition(e);\n              xAxis.zoom(sa, ea, 0);\n            });\n          }\n        }\n        if (this.get(\"pinchZoomY\")) {\n          const downStartY = this._downStartY;\n          const downEndY = this._downEndY;\n          if (downStartY != null && downEndY != null) {\n            if (downPoint0.y < downPoint1.y) {\n              [downPoint0, downPoint1] = [downPoint1, downPoint0];\n              [movePoint0, movePoint1] = [movePoint1, movePoint0];\n            }\n            let downPos0 = downStartY + (1 - downPoint0.y / h) * (downEndY - downStartY);\n            let downPos1 = downStartY + (1 - downPoint1.y / h) * (downEndY - downStartY);\n            let movePos0 = downStartY + (1 - movePoint0.y / h) * (downEndY - downStartY);\n            let movePos1 = downStartY + (1 - movePoint1.y / h) * (downEndY - downStartY);\n            let initialDistance = Math.max(0.001, downPos1 - downPos0);\n            let currentDistance = Math.max(0.001, movePos1 - movePos0);\n            let d = initialDistance / currentDistance;\n            let s = downStartY * d + downPos0 - movePos0 * d;\n            let e = downEndY * d + downPos1 - movePos1 * d;\n            this.yAxes.each(yAxis => {\n              let sa = yAxis.fixPosition(s);\n              let ea = yAxis.fixPosition(e);\n              yAxis.zoom(sa, ea, 0);\n            });\n          }\n        }\n      }\n    }\n  }\n  _handleCursorPosition() {\n    const cursor = this.get(\"cursor\");\n    if (cursor) {\n      const cursorPoint = cursor.getPrivate(\"point\");\n      let snapToSeries = cursor.get(\"snapToSeries\");\n      if (cursor._downPoint) {\n        snapToSeries = undefined;\n      }\n      if (snapToSeries && cursorPoint) {\n        const snapToSeriesBy = cursor.get(\"snapToSeriesBy\");\n        const dataItems = [];\n        $array.each(snapToSeries, series => {\n          if (!series.isHidden() && !series.isHiding()) {\n            if (snapToSeriesBy != \"x!\" && snapToSeriesBy != \"y!\") {\n              const startIndex = series.startIndex();\n              const endIndex = series.endIndex();\n              for (let i = startIndex; i < endIndex; i++) {\n                const dataItem = series.dataItems[i];\n                if (dataItem && !dataItem.isHidden()) {\n                  dataItems.push(dataItem);\n                }\n              }\n            } else {\n              const tooltipDataItem = series.get(\"tooltipDataItem\");\n              if (tooltipDataItem) {\n                dataItems.push(tooltipDataItem);\n              }\n            }\n          }\n        });\n        let minDistance = Infinity;\n        let closestItem;\n        $array.each(dataItems, dataItem => {\n          const point = dataItem.get(\"point\");\n          if (point) {\n            let distance = 0;\n            if (snapToSeriesBy == \"x\" || snapToSeriesBy == \"x!\") {\n              distance = Math.abs(cursorPoint.x - point.x);\n            } else if (snapToSeriesBy == \"y\" || snapToSeriesBy == \"y!\") {\n              distance = Math.abs(cursorPoint.y - point.y);\n            } else {\n              distance = Math.hypot(cursorPoint.x - point.x, cursorPoint.y - point.y);\n            }\n            if (distance < minDistance) {\n              minDistance = distance;\n              closestItem = dataItem;\n            }\n          }\n        });\n        $array.each(snapToSeries, series => {\n          const tooltip = series.get(\"tooltip\");\n          if (tooltip) {\n            tooltip._setDataItem(undefined);\n          }\n        });\n        if (closestItem) {\n          let series = closestItem.component;\n          series.showDataItemTooltip(closestItem);\n          const point = closestItem.get(\"point\");\n          if (point) {\n            // removing x and y to solve #72225\n            cursor.handleMove(series.toGlobal({\n              x: point.x - series.x(),\n              y: point.y - series.y()\n            }), true);\n          }\n        }\n      }\n    }\n  }\n  _updateCursor() {\n    let cursor = this.get(\"cursor\");\n    if (cursor) {\n      cursor.handleMove();\n    }\n  }\n  _addCursor(cursor) {\n    this.plotContainer.children.push(cursor);\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    this.series.each(series => {\n      this._colorize(series);\n    });\n    if (this.isDirty(\"wheelX\") || this.isDirty(\"wheelY\")) {\n      this._handleSetWheel();\n    }\n    if (this.isDirty(\"cursor\")) {\n      const previous = this._prevSettings.cursor;\n      const cursor = this.get(\"cursor\");\n      if (cursor !== previous) {\n        this._disposeProperty(\"cursor\");\n        if (previous) {\n          previous.dispose();\n        }\n        if (cursor) {\n          cursor._setChart(this);\n          this._addCursor(cursor);\n          this._pushPropertyDisposer(\"cursor\", cursor.events.on(\"selectended\", () => {\n            this._handleCursorSelectEnd();\n          }));\n        }\n        //this.setRaw(\"cursor\", cursor) // to reset previous value\n        this._prevSettings.cursor = cursor;\n      }\n    }\n    if (this.isDirty(\"scrollbarX\")) {\n      const previous = this._prevSettings.scrollbarX;\n      const scrollbarX = this.get(\"scrollbarX\");\n      if (scrollbarX !== previous) {\n        this._disposeProperty(\"scrollbarX\");\n        if (previous) {\n          previous.dispose();\n        }\n        if (scrollbarX) {\n          if (!scrollbarX.parent) {\n            this.topAxesContainer.children.push(scrollbarX);\n          }\n          this._pushPropertyDisposer(\"scrollbarX\", scrollbarX.events.on(\"rangechanged\", e => {\n            this._handleScrollbar(this.xAxes, e.start, e.end, e.grip);\n          }));\n          // Used to populate `ariaLabel` with meaningful values\n          scrollbarX.setPrivate(\"positionTextFunction\", position => {\n            const axis = this.xAxes.getIndex(0);\n            return axis ? axis.getTooltipText(position) || \"\" : \"\";\n          });\n        }\n        this._prevSettings.scrollbarX = scrollbarX;\n      }\n    }\n    if (this.isDirty(\"scrollbarY\")) {\n      const previous = this._prevSettings.scrollbarY;\n      const scrollbarY = this.get(\"scrollbarY\");\n      if (scrollbarY !== previous) {\n        this._disposeProperty(\"scrollbarY\");\n        if (previous) {\n          previous.dispose();\n        }\n        if (scrollbarY) {\n          if (!scrollbarY.parent) {\n            this.rightAxesContainer.children.push(scrollbarY);\n          }\n          this._pushPropertyDisposer(\"scrollbarY\", scrollbarY.events.on(\"rangechanged\", e => {\n            this._handleScrollbar(this.yAxes, e.start, e.end, e.grip);\n          }));\n          // Used to populate `ariaLabel` with meaningful values\n          scrollbarY.setPrivate(\"positionTextFunction\", position => {\n            const axis = this.yAxes.getIndex(0);\n            return axis ? axis.getTooltipText(position) || \"\" : \"\";\n          });\n        }\n        this._prevSettings.scrollbarY = scrollbarY;\n      }\n    }\n    this._handleZoomOut();\n  }\n  _processSeries(series) {\n    super._processSeries(series);\n    this._colorize(series);\n  }\n  _colorize(series) {\n    const colorSet = this.get(\"colors\");\n    if (colorSet) {\n      if (series.get(\"fill\") == null) {\n        const color = colorSet.next();\n        series._setSoft(\"stroke\", color);\n        series._setSoft(\"fill\", color);\n      }\n    }\n  }\n  _handleCursorSelectEnd() {\n    const cursor = this.get(\"cursor\");\n    const behavior = cursor.get(\"behavior\");\n    const downPositionX = cursor.getPrivate(\"downPositionX\", 0);\n    const downPositionY = cursor.getPrivate(\"downPositionY\", 0);\n    const positionX = cursor.getPrivate(\"positionX\", 0.5);\n    const positionY = cursor.getPrivate(\"positionY\", 0.5);\n    this.xAxes.each(axis => {\n      if (behavior === \"zoomX\" || behavior === \"zoomXY\") {\n        let position0 = axis.toAxisPosition(downPositionX);\n        let position1 = axis.toAxisPosition(positionX);\n        axis.zoom(position0, position1);\n      }\n      axis.setPrivate(\"updateScrollbar\", true);\n    });\n    this.yAxes.each(axis => {\n      if (behavior === \"zoomY\" || behavior === \"zoomXY\") {\n        let position0 = axis.toAxisPosition(downPositionY);\n        let position1 = axis.toAxisPosition(positionY);\n        axis.zoom(position0, position1);\n      }\n      axis.setPrivate(\"updateScrollbar\", true);\n    });\n  }\n  _handleScrollbar(axes, start, end, priority) {\n    axes.each(axis => {\n      let axisStart = axis.fixPosition(start);\n      let axisEnd = axis.fixPosition(end);\n      let zoomAnimation = axis.zoom(axisStart, axisEnd, undefined, priority);\n      const updateScrollbar = \"updateScrollbar\";\n      axis.setPrivateRaw(updateScrollbar, false);\n      if (zoomAnimation) {\n        zoomAnimation.events.on(\"stopped\", () => {\n          axis.setPrivateRaw(updateScrollbar, true);\n        });\n      } else {\n        axis.setPrivateRaw(updateScrollbar, true);\n      }\n    });\n  }\n  _processAxis(axes, container) {\n    return axes.events.onAll(change => {\n      if (change.type === \"clear\") {\n        $array.each(change.oldValues, axis => {\n          this._removeAxis(axis);\n        });\n      } else if (change.type === \"push\") {\n        container.children.push(change.newValue);\n        change.newValue.processChart(this);\n      } else if (change.type === \"setIndex\") {\n        container.children.setIndex(change.index, change.newValue);\n        change.newValue.processChart(this);\n      } else if (change.type === \"insertIndex\") {\n        container.children.insertIndex(change.index, change.newValue);\n        change.newValue.processChart(this);\n      } else if (change.type === \"removeIndex\") {\n        this._removeAxis(change.oldValue);\n      } else if (change.type === \"moveIndex\") {\n        container.children.moveValue(change.value, change.newIndex);\n        change.value.processChart(this);\n      } else {\n        throw new Error(\"Unknown IListEvent type\");\n      }\n    });\n  }\n  _removeAxis(axis) {\n    if (!axis.isDisposed()) {\n      const axisParent = axis.parent;\n      if (axisParent) {\n        axisParent.children.removeValue(axis);\n      }\n      const gridContainer = axis.gridContainer;\n      const gridParent = gridContainer.parent;\n      if (gridParent) {\n        gridParent.children.removeValue(gridContainer);\n      }\n      const topGridContainer = axis.topGridContainer;\n      const topGridParent = topGridContainer.parent;\n      if (topGridParent) {\n        topGridParent.children.removeValue(topGridContainer);\n      }\n    }\n  }\n  _updateChartLayout() {\n    const left = this.leftAxesContainer.width();\n    const right = this.rightAxesContainer.width();\n    const bottomAxesContainer = this.bottomAxesContainer;\n    bottomAxesContainer.set(\"paddingLeft\", left);\n    bottomAxesContainer.set(\"paddingRight\", right);\n    const topAxesContainer = this.topAxesContainer;\n    topAxesContainer.set(\"paddingLeft\", left);\n    topAxesContainer.set(\"paddingRight\", right);\n  }\n  /**\r\n   * @ignore\r\n   */\n  processAxis(_axis) {}\n  _handleAxisSelection(axis, force) {\n    let start = axis.fixPosition(axis.get(\"start\", 0));\n    let end = axis.fixPosition(axis.get(\"end\", 1));\n    if (start > end) {\n      [start, end] = [end, start];\n    }\n    if (this.xAxes.indexOf(axis) != -1) {\n      if (force || axis.getPrivate(\"updateScrollbar\")) {\n        let scrollbarX = this.get(\"scrollbarX\");\n        if (scrollbarX && (!scrollbarX.getPrivate(\"isBusy\") || force)) {\n          scrollbarX.setRaw(\"start\", start);\n          scrollbarX.setRaw(\"end\", end);\n          scrollbarX.updateGrips();\n        }\n      }\n    } else if (this.yAxes.indexOf(axis) != -1) {\n      if (force || axis.getPrivate(\"updateScrollbar\")) {\n        let scrollbarY = this.get(\"scrollbarY\");\n        if (scrollbarY && (!scrollbarY.getPrivate(\"isBusy\") || force)) {\n          scrollbarY.setRaw(\"start\", start);\n          scrollbarY.setRaw(\"end\", end);\n          scrollbarY.updateGrips();\n        }\n      }\n    }\n    this._handleZoomOut();\n  }\n  _handleZoomOut() {\n    let zoomOutButton = this.zoomOutButton;\n    if (zoomOutButton && zoomOutButton.parent) {\n      let visible = false;\n      this.xAxes.each(axis => {\n        if (axis.get(\"start\") != 0 || axis.get(\"end\") != 1) {\n          visible = true;\n        }\n      });\n      this.yAxes.each(axis => {\n        if (axis.get(\"start\") != 0 || axis.get(\"end\") != 1) {\n          visible = true;\n        }\n      });\n      if (visible) {\n        if (zoomOutButton.isHidden()) {\n          zoomOutButton.show();\n        }\n      } else {\n        zoomOutButton.hide();\n      }\n    }\n  }\n  /**\r\n   * Checks if point is within plot area.\r\n   *\r\n   * @param   point  Reference point\r\n   * @return         Is within plot area?\r\n   */\n  inPlot(point) {\n    const plotContainer = this.plotContainer;\n    const otherCharts = this.getPrivate(\"otherCharts\", this._otherCharts);\n    const global = plotContainer.toGlobal(point);\n    if (point.x >= -0.5 && point.y >= -0.5 && point.x <= plotContainer.width() + 0.5 && point.y <= plotContainer.height() + 0.5) {\n      return true;\n    }\n    if (otherCharts) {\n      for (let i = otherCharts.length - 1; i >= 0; i--) {\n        const chart = otherCharts[i];\n        if (chart != this) {\n          const chartPlotContainer = chart.plotContainer;\n          const documentPoint = this._root.rootPointToDocument(global);\n          const chartRoot = chart._root.documentPointToRoot(documentPoint);\n          const local = chartPlotContainer.toLocal(chartRoot);\n          if (local.x >= -0.1 && local.y >= -0.1 && local.x <= chartPlotContainer.width() + 0.1 && local.y <= chartPlotContainer.height() + 0.1) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n  /**\r\n   * @ignore\r\n   */\n  arrangeTooltips() {\n    const plotContainer = this.plotContainer;\n    const w = plotContainer.width();\n    const h = plotContainer.height();\n    const hh = this.height();\n    let plotT = plotContainer._display.toGlobal({\n      x: 0,\n      y: 0\n    });\n    let plotB = plotContainer._display.toGlobal({\n      x: w,\n      y: h\n    });\n    const tooltips = [];\n    let sum = 0;\n    let minDistance = Infinity;\n    let movePoint = this._movePoint;\n    let maxTooltipDistance = this.get(\"maxTooltipDistance\");\n    let maxTooltipDistanceBy = this.get(\"maxTooltipDistanceBy\", \"xy\");\n    let closest;\n    let closestPoint;\n    if ($type.isNumber(maxTooltipDistance)) {\n      this.series.each(series => {\n        if (!series.isHidden()) {\n          const tooltip = series.get(\"tooltip\");\n          if (tooltip) {\n            let point = tooltip.get(\"pointTo\");\n            if (point) {\n              let distance = Math.hypot(movePoint.x - point.x, movePoint.y - point.y);\n              if (maxTooltipDistanceBy == \"x\") {\n                distance = Math.abs(movePoint.x - point.x);\n              } else if (maxTooltipDistanceBy == \"y\") {\n                distance = Math.abs(movePoint.y - point.y);\n              }\n              if (distance < minDistance) {\n                minDistance = distance;\n                closest = series;\n                closestPoint = point;\n              }\n            }\n          }\n        }\n      });\n    }\n    const tooltipSeries = [];\n    this.series.each(series => {\n      const tooltip = series.get(\"tooltip\");\n      if (tooltip) {\n        let hidden = false;\n        let point = tooltip.get(\"pointTo\");\n        if (point) {\n          if (maxTooltipDistance >= 0) {\n            let point = tooltip.get(\"pointTo\");\n            if (point) {\n              if (series != closest) {\n                let distance = Math.hypot(closestPoint.x - point.x, closestPoint.y - point.y);\n                if (maxTooltipDistanceBy == \"x\") {\n                  distance = Math.abs(closestPoint.x - point.x);\n                } else if (maxTooltipDistanceBy == \"y\") {\n                  distance = Math.abs(closestPoint.y - point.y);\n                }\n                if (distance > maxTooltipDistance) {\n                  hidden = true;\n                }\n              }\n            }\n          } else if (maxTooltipDistance == -1) {\n            if (series != closest) {\n              hidden = true;\n            }\n          }\n          if (!this.inPlot(this._tooltipToLocal(point)) || !tooltip.dataItem) {\n            hidden = true;\n          } else {\n            if (!hidden) {\n              sum += point.y;\n            }\n          }\n          if (hidden || series.isHidden() || series.isHiding()) {\n            tooltip.hide(0);\n          } else {\n            tooltip.show();\n            tooltips.push(tooltip);\n            tooltipSeries.push(series);\n          }\n        }\n      }\n    });\n    this.setPrivate(\"tooltipSeries\", tooltipSeries);\n    if (this.get(\"arrangeTooltips\")) {\n      const tooltipContainer = this._root.tooltipContainer;\n      const count = tooltips.length;\n      const average = sum / count;\n      if (average > h / 2 + plotT.y) {\n        tooltips.sort((a, b) => $order.compareNumber(b.get(\"pointTo\").y, a.get(\"pointTo\").y));\n        let prevY = plotB.y;\n        $array.each(tooltips, tooltip => {\n          let height = tooltip.height();\n          let centerY = tooltip.get(\"centerY\");\n          if (centerY instanceof Percent) {\n            height *= centerY.value;\n          }\n          height += tooltip.get(\"marginBottom\", 0);\n          tooltip.set(\"bounds\", {\n            left: plotT.x,\n            top: plotT.y,\n            right: plotB.x,\n            bottom: prevY\n          });\n          tooltip.setPrivate(\"customData\", {\n            left: plotT.x,\n            top: plotT.y,\n            right: plotB.x,\n            bottom: prevY\n          });\n          prevY = Math.min(prevY - height, tooltip._fy - height);\n          if (tooltip.parent == tooltipContainer) {\n            tooltipContainer.children.moveValue(tooltip, 0);\n          }\n        });\n        if (prevY < 0) {\n          tooltips.reverse();\n          let prevBottom = prevY;\n          $array.each(tooltips, tooltip => {\n            let bounds = tooltip.get(\"bounds\");\n            if (bounds) {\n              let top = bounds.top - prevY;\n              let bottom = bounds.bottom - prevY;\n              if (top < prevBottom) {\n                top = prevBottom;\n                bottom = top + tooltip.height();\n              }\n              tooltip.set(\"bounds\", {\n                left: bounds.left,\n                top: top,\n                right: bounds.right,\n                bottom: bottom\n              });\n              prevBottom = bounds.bottom - prevY + tooltip.get(\"marginBottom\", 0);\n            }\n          });\n        }\n      } else {\n        tooltips.reverse();\n        tooltips.sort((a, b) => $order.compareNumber(a.get(\"pointTo\").y, b.get(\"pointTo\").y));\n        let prevY = 0;\n        $array.each(tooltips, tooltip => {\n          let height = tooltip.height();\n          let centerY = tooltip.get(\"centerY\");\n          if (centerY instanceof Percent) {\n            height *= centerY.value;\n          }\n          height += tooltip.get(\"marginBottom\", 0);\n          tooltip.set(\"bounds\", {\n            left: plotT.x,\n            top: prevY,\n            right: plotB.x,\n            bottom: Math.max(plotT.y + hh, prevY + height)\n          });\n          if (tooltip.parent == tooltipContainer) {\n            tooltipContainer.children.moveValue(tooltip, 0);\n          }\n          prevY = Math.max(prevY + height, tooltip._fy + height);\n        });\n        if (prevY > hh) {\n          tooltips.reverse();\n          let prevBottom = hh;\n          $array.each(tooltips, tooltip => {\n            let bounds = tooltip.get(\"bounds\");\n            if (bounds) {\n              let top = bounds.top - (hh - prevY);\n              let bottom = bounds.bottom - (hh - prevY);\n              if (bottom > prevBottom) {\n                bottom = prevBottom;\n                top = bottom - tooltip.height();\n              }\n              tooltip.set(\"bounds\", {\n                left: bounds.left,\n                top: top,\n                right: bounds.right,\n                bottom: bottom\n              });\n              prevBottom = bottom - tooltip.height() - tooltip.get(\"marginBottom\", 0);\n            }\n          });\n        }\n      }\n    }\n  }\n  _tooltipToLocal(point) {\n    return this.plotContainer.toLocal(point);\n  }\n  /**\r\n   * Fully zooms out the chart.\r\n   */\n  zoomOut() {\n    this.xAxes.each(axis => {\n      axis.setPrivate(\"updateScrollbar\", true);\n      axis.zoom(0, 1);\n    });\n    this.yAxes.each(axis => {\n      axis.setPrivate(\"updateScrollbar\", true);\n      axis.zoom(0, 1);\n    });\n  }\n}\nObject.defineProperty(XYChart, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"XYChart\"\n});\nObject.defineProperty(XYChart, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: SerialChart.classNames.concat([XYChart.className])\n});","map":{"version":3,"names":["XYChartDefaultTheme","Container","Rectangle","SerialChart","ListAutoDispose","p100","Color","Button","Graphics","Percent","$array","$type","$order","$object","$utils","XYChart","constructor","Object","defineProperty","chartContainer","children","push","new","_root","width","layout","verticalLayout","height","horizontalLayout","yAxesAndPlotContainer","maskContent","plotsContainer","plotContainer","isMeasured","topPlotContainer","themeTags","icon","x","y","_afterNew","_defaultThemes","_disposers","xAxes","yAxes","root","zoomOutButton","events","on","zoomOut","set","states","lookup","seriesContainer","_processAxis","bottomAxesContainer","leftAxesContainer","topGridContainer","bulletsContainer","fill","fromHex","fillOpacity","event","_handlePlotDown","originalEvent","_handlePlotUp","_handlePlotMove","_maskGrid","_setUpTouch","_beforeChanged","isDirty","get","_display","cancelTouch","gridContainer","_removeSeries","series","xAxis","remove","markDirtyExtremes","yAxis","cursor","snapToSeries","handleWheel","wheelX","wheelY","wheelEvent","isLocalEvent","preventDefault","plotPoint","toLocal","documentPointToRoot","clientX","clientY","wheelStep","shiftY","deltaY","shiftX","deltaX","wheelZoomPositionX","wheelZoomPositionY","each","axis","start","end","position","fixPosition","newStart","newEnd","getPrivate","Infinity","_handleWheelAnimation","zoom","delta","_getWheelSign","se","_fixWheel","_handleSetWheel","_wheelDp","dispose","sign","diff","button","local","touchEvent","pointerId","keys","_downPoints","length","getIndex","_downStartX","_downEndX","_downStartY","_downEndY","_downPoint","panX","panY","_panStart","_panEnd","eventType","isEnabled","dispatch","type","target","animation","_dispatchWheelAnimation","downPoint","undefined","_isPanning","_movePoints","_handlePinch","scrollbarX","disableType","panStart","panEnd","difference","enableType","scrollbarY","i","downPoints","movePoints","k","point","movePoint","w","h","downPoint0","downPoint1","movePoint0","movePoint1","downStartX","downEndX","downPos0","downPos1","movePos0","movePos1","initialDistance","Math","max","currentDistance","d","s","e","sa","ea","downStartY","downEndY","_handleCursorPosition","cursorPoint","snapToSeriesBy","dataItems","isHidden","isHiding","startIndex","endIndex","dataItem","tooltipDataItem","minDistance","closestItem","distance","abs","hypot","tooltip","_setDataItem","component","showDataItemTooltip","handleMove","toGlobal","_updateCursor","_addCursor","_prepareChildren","_colorize","previous","_prevSettings","_disposeProperty","_setChart","_pushPropertyDisposer","_handleCursorSelectEnd","parent","topAxesContainer","_handleScrollbar","grip","setPrivate","getTooltipText","rightAxesContainer","_handleZoomOut","_processSeries","colorSet","color","next","_setSoft","behavior","downPositionX","downPositionY","positionX","positionY","position0","toAxisPosition","position1","axes","priority","axisStart","axisEnd","zoomAnimation","updateScrollbar","setPrivateRaw","container","onAll","change","oldValues","_removeAxis","newValue","processChart","setIndex","index","insertIndex","oldValue","moveValue","value","newIndex","Error","isDisposed","axisParent","removeValue","gridParent","topGridParent","_updateChartLayout","left","right","processAxis","_axis","_handleAxisSelection","force","indexOf","setRaw","updateGrips","visible","show","hide","inPlot","otherCharts","_otherCharts","global","chart","chartPlotContainer","documentPoint","rootPointToDocument","chartRoot","arrangeTooltips","hh","plotT","plotB","tooltips","sum","_movePoint","maxTooltipDistance","maxTooltipDistanceBy","closest","closestPoint","isNumber","tooltipSeries","hidden","_tooltipToLocal","tooltipContainer","count","average","sort","a","b","compareNumber","prevY","centerY","top","bottom","min","_fy","reverse","prevBottom","bounds","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\charts\\xy\\XYChart.ts"],"sourcesContent":["import type { Axis } from \"./axes/Axis\";\nimport type { XYCursor } from \"./XYCursor\";\nimport type { AxisRenderer } from \"./axes/AxisRenderer\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport type { IDisposer } from \"../../core/util/Disposer\";\nimport type { XYSeries, IXYSeriesDataItem } from \"./series/XYSeries\";\nimport type { IPointerEvent } from \"../../core/render/backend/Renderer\";\nimport type { Scrollbar } from \"../../core/render/Scrollbar\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\nimport type { IPoint } from \"../../core/util/IPoint\";\n\nimport { XYChartDefaultTheme } from \"./XYChartDefaultTheme\";\nimport { Container } from \"../../core/render/Container\";\nimport { Rectangle } from \"../../core/render/Rectangle\";\nimport { SerialChart, ISerialChartPrivate, ISerialChartSettings, ISerialChartEvents } from \"../../core/render/SerialChart\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { Color } from \"../../core/util/Color\";\nimport { Button } from \"../../core/render/Button\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Percent } from \"../../core/util/Percent\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $order from \"../../core/util/Order\";\nimport * as $object from \"../../core/util/Object\";\nimport * as $utils from \"../../core/util/Utils\";\nimport type { Animation } from \"../../core/util/Entity\";\n\nexport interface IXYChartSettings extends ISerialChartSettings {\n\n\t/**\n\t * horizontal scrollbar.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/} for more info\n\t */\n\tscrollbarX?: Scrollbar;\n\n\t/**\n\t * Vertical scrollbar.\n\t *\n\t */\n\tscrollbarY?: Scrollbar;\n\n\t/**\n\t * If this is set to `true`, users will be able to pan the chart horizontally\n\t * by dragging plot area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Panning} for more info\n\t */\n\tpanX?: boolean;\n\n\t/**\n\t * If this is set to `true`, users will be able to pan the chart vertically\n\t * by dragging plot area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Panning} for more info\n\t */\n\tpanY?: boolean;\n\n\t/**\n\t * Indicates what happens when mouse wheel is spinned horizontally while over\n\t * plot area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Mouse_wheel_behavior} for more info\n\t */\n\twheelX?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\n\n\t/**\n\t * Indicates what happens when mouse wheel is spinned vertically while over\n\t * plot area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Mouse_wheel_behavior} for more info\n\t */\n\twheelY?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\n\n\t/**\n\t * Indicates the relative \"speed\" of the mouse wheel.\n\t *\n\t * @default 0.25\n\t */\n\twheelStep?: number;\n\n\t/**\n\t * Chart's cursor.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/} for more info\n\t */\n\tcursor?: XYCursor;\n\n\t/**\n\t * If not set (default), cursor will show tooltips for all data items in the\n\t * same category/date.\n\t * \n\t * If set, cursor will select closest data item to pointer (mouse or touch) and\n\t * show tooltip for it.\n\t *\n\t * It will also show tooltips for all data items that are within X pixels\n\t * range (as set in `maxTooltipDistance`).\n\t *\n\t * Tooltips for data items farther then X pixels, will not be shown.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/#Tooltips} for more info\n\t */\n\tmaxTooltipDistance?: number;\n\n\t/**\n\t * Indicates how the distance should be measured when assessing distance\n\t * between tooltips as set in `maxTooltipDistance`.\n\t * \n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/#Tooltips} for more info\n\t * @since 5.2.6\n\t */\n\tmaxTooltipDistanceBy?: \"xy\" | \"x\" | \"y\";\n\n\t/**\n\t * If set to `false` the chart will not check for overlapping of multiple\n\t * tooltips, and will not arrange them to not overlap.\n\t *\n\t * Will work only if chart has an `XYCursor` enabled.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/#Tooltips} for more info\n\t * @default true\n\t */\n\tarrangeTooltips?: boolean\n\n\t/**\n\t * If set to `true`, using pinch gesture on the chart's plot area will zoom\n\t * chart horizontally.\n\t *\n\t * NOTE: this setting is not supported in a [[RadarChart]].\n\t * \n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Pinch_zoom} for more info\n\t * @since 5.1.8\n\t * @default false\n\t */\n\tpinchZoomX?: boolean;\n\n\t/**\n\t * If set to `true`, using pinch gesture on the chart's plot area will zoom\n\t * chart vertically.\n\t * \n\t * NOTE: this setting is not supported in a [[RadarChart]].\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Pinch_zoom} for more info\n\t * @since 5.1.8\n\t * @default false\n\t */\n\tpinchZoomY?: boolean;\n\n\t/**\n\t * If set, will use this relative position as a \"center\" for mouse wheel\n\t * horizontal zooming instead of actual cursor position.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Mouse_wheel_behavior} for more info\n\t * @since 5.2.11\n\t */\n\twheelZoomPositionX?: number;\n\n\t/**\n\t * If set, will use this relative position as a \"center\" for mouse wheel\n\t * vertical zooming instead of actual cursor position.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Mouse_wheel_behavior} for more info\n\t * @since 5.2.11\n\t */\n\twheelZoomPositionY?: number;\n\n}\n\nexport interface IXYChartPrivate extends ISerialChartPrivate {\n\n\t/**\n\t * A list of [[Series]] that currently have their tooltip being displayed.\n\t */\n\ttooltipSeries?: Array<XYSeries>\n\n\t/**\n\t * Array of other [[XYChart]] objects that cursors should be synced with.\n\t * \n\t * Note: cursors will be synced across the vertically stacked charts only.\n\t */\n\totherCharts?: Array<XYChart>\n\n}\n\n\nexport interface IXYChartEvents extends ISerialChartEvents {\n\n\t/**\n\t * Invoked when panning starts.\n\t *\n\t * @since 5.0.4\n\t */\n\tpanstarted: {\n\t\toriginalEvent: IPointerEvent\n\t};\n\n\t/**\n\t * Invoked when panning ends.\n\t *\n\t * @since 5.0.4\n\t */\n\tpanended: {\n\t\toriginalEvent: IPointerEvent\n\t};\n\n\t/**\n\t * Invoked if pointer is pressed down on a chart and released without moving.\n\t *\n\t * `panended` event will still kick in after that.\n\t * \n\t * @since 5.2.19\n\t */\n\tpancancelled: {\n\t\toriginalEvent: IPointerEvent\n\t};\n\n\t/**\n\t * Invoked when wheel caused zoom ends.\n\t *\n\t * @since 5.0.4\n\t */\n\twheelended: {};\n\n}\n\n/**\n * Creates an XY chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/} for more info\n * @important\n */\nexport class XYChart extends SerialChart {\n\n\tpublic static className: string = \"XYChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([XYChart.className]);\n\n\tdeclare public _settings: IXYChartSettings;\n\tdeclare public _privateSettings: IXYChartPrivate;\n\tdeclare public _seriesType: XYSeries;\n\tdeclare public _events: IXYChartEvents;\n\n\t/**\n\t * A list of horizontal axes.\n\t */\n\tpublic readonly xAxes: ListAutoDispose<Axis<AxisRenderer>> = new ListAutoDispose();\n\n\t/**\n\t * A list of vertical axes.\n\t */\n\tpublic readonly yAxes: ListAutoDispose<Axis<AxisRenderer>> = new ListAutoDispose();\n\n\t/**\n\t * A [[Container]] located on top of the chart, used to store top horizontal\n\t * axes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly topAxesContainer: Container = this.chartContainer.children.push(Container.new(this._root, { width: p100, layout: this._root.verticalLayout }));\n\n\t/**\n\t * A [[Container]] located in the middle the chart, used to store vertical axes\n\t * and plot area container.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly yAxesAndPlotContainer: Container = this.chartContainer.children.push(Container.new(this._root, { width: p100, height: p100, layout: this._root.horizontalLayout }));\n\n\t/**\n\t * A [[Container]] located on bottom of the chart, used to store bottom\n\t * horizontal axes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly bottomAxesContainer: Container = this.chartContainer.children.push(Container.new(this._root, { width: p100, layout: this._root.verticalLayout }));\n\n\t/**\n\t * A [[Container]] located on left of the chart, used to store left-hand\n\t * vertical axes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly leftAxesContainer: Container = this.yAxesAndPlotContainer.children.push(Container.new(this._root, { height: p100, layout: this._root.horizontalLayout }));\n\n\t/**\n\t * A [[Container]] located in the middle of the chart, used to store plotContainer and topPlotContainer\t \n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly plotsContainer: Container = this.yAxesAndPlotContainer.children.push(Container.new(this._root, { width: p100, height: p100, maskContent: false }));\n\n\t/**\n\t * A [[Container]] located in the middle of the chart, used to store actual\n\t * plots (series).\n\t * \n\t * NOTE: `plotContainer` will automatically have its `background` preset. If\n\t * you need to modify background or outline for chart's plot area, you can\n\t * use `plotContainer.get(\"background\")` for that.* \n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly plotContainer: Container = this.plotsContainer.children.push(Container.new(this._root, { width: p100, height: p100 }));\n\n\t/**\n\t * A [[Container]] used for any elements that need to be displayed over\n\t * regular `plotContainer`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly topPlotContainer: Container = this.plotsContainer.children.push(Container.new(this._root, { width: p100, height: p100 }));\n\n\t/**\n\t * A [[Container]] axis grid elements are stored in.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly gridContainer: Container = this.plotContainer.children.push(Container.new(this._root, { width: p100, height: p100, isMeasured: false }));\n\n\t/**\n\t * A [[Container]] axis background grid elements are stored in.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly topGridContainer: Container = Container.new(this._root, { width: p100, height: p100, isMeasured: false });\n\n\t/**\n\t * A [[Container]] located on right of the chart, used to store right-hand\n\t * vertical axes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly rightAxesContainer: Container = this.yAxesAndPlotContainer.children.push(Container.new(this._root, { height: p100, layout: this._root.horizontalLayout }));\n\n\t/**\n\t * A [[Container]] axis headers are stored in.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info\n\t * @default Container.new()\n\t */\n\tpublic readonly axisHeadersContainer: Container = this.plotContainer.children.push(Container.new(this._root, {}));\n\n\t/**\n\t * A button that is shown when chart is not fully zoomed out.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Zoom_out_button} for more info\n\t * @default Button.new()\n\t */\n\tpublic readonly zoomOutButton: Button = this.topPlotContainer.children.push(Button.new(this._root, {\n\t\tthemeTags: [\"zoom\"],\n\t\ticon: Graphics.new(this._root, {\n\t\t\tthemeTags: [\"button\", \"icon\"]\n\t\t})\n\t}));\n\n\tpublic _movePoint: IPoint = { x: 0, y: 0 };\n\n\tprotected _wheelDp: IDisposer | undefined;\n\n\tpublic _otherCharts?: Array<XYChart>;\n\n\tprotected _movePoints: { [index: number]: IPoint } = {};\n\n\tprotected _downStartX?: number;\n\tprotected _downEndX?: number;\n\n\tprotected _downStartY?: number;\n\tprotected _downEndY?: number;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(XYChartDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tthis._disposers.push(this.xAxes);\n\t\tthis._disposers.push(this.yAxes);\n\n\t\tconst root = this._root;\n\n\t\tlet verticalLayout = this._root.verticalLayout;\n\n\t\tconst zoomOutButton = this.zoomOutButton;\n\t\tzoomOutButton.events.on(\"click\", () => {\n\t\t\tthis.zoomOut();\n\t\t})\n\t\tzoomOutButton.set(\"opacity\", 0);\n\t\tzoomOutButton.states.lookup(\"default\")!.set(\"opacity\", 1);\n\n\t\tthis.chartContainer.set(\"layout\", verticalLayout);\n\n\t\tconst plotContainer = this.plotContainer;\n\t\tplotContainer.children.push(this.seriesContainer);\n\n\t\tthis._disposers.push(this._processAxis(this.xAxes, this.bottomAxesContainer));\n\t\tthis._disposers.push(this._processAxis(this.yAxes, this.leftAxesContainer));\n\n\n\t\tplotContainer.children.push(this.topGridContainer);\n\t\tplotContainer.children.push(this.bulletsContainer);\n\n\t\t// Setting trasnparent background so that full body of the plot container\n\t\t// is interactive\n\t\tplotContainer.set(\"interactive\", true);\n\t\tplotContainer.set(\"interactiveChildren\", false);\n\t\tplotContainer.set(\"background\", Rectangle.new(root, {\n\t\t\tthemeTags: [\"xy\", \"background\"],\n\t\t\tfill: Color.fromHex(0x000000),\n\t\t\tfillOpacity: 0\n\t\t}));\n\n\t\tthis._disposers.push(plotContainer.events.on(\"pointerdown\", (event) => {\n\t\t\tthis._handlePlotDown(event.originalEvent);\n\t\t}));\n\n\t\tthis._disposers.push(plotContainer.events.on(\"globalpointerup\", (event) => {\n\t\t\tthis._handlePlotUp(event.originalEvent);\n\t\t}));\n\n\t\tthis._disposers.push(plotContainer.events.on(\"globalpointermove\", (event) => {\n\t\t\tthis._handlePlotMove(event.originalEvent);\n\t\t}));\n\n\t\tthis._maskGrid();\n\t\tthis._setUpTouch();\n\t}\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"pinchZoomX\") || this.isDirty(\"pinchZoomY\") || this.get(\"panX\") || this.get(\"panY\")) {\n\t\t\tthis._setUpTouch();\n\t\t}\n\n\t}\n\n\tprotected _setUpTouch(): void {\n\t\tif (!this.plotContainer._display.cancelTouch) {\n\t\t\tthis.plotContainer._display.cancelTouch = (this.get(\"pinchZoomX\") || this.get(\"pinchZoomY\") || this.get(\"panX\") || this.get(\"panY\")) ? true : false;\n\t\t}\n\t}\n\n\tprotected _maskGrid() {\n\t\tthis.gridContainer.set(\"maskContent\", true);\n\t\tthis.topGridContainer.set(\"maskContent\", true);\n\t}\n\n\tprotected _removeSeries(series: this[\"_seriesType\"]) {\n\t\tconst xAxis = series.get(\"xAxis\");\n\t\tif (xAxis) {\n\t\t\t$array.remove(xAxis.series, series);\n\t\t\txAxis.markDirtyExtremes();\n\t\t}\n\t\tconst yAxis = series.get(\"yAxis\");\n\t\tif (yAxis) {\n\t\t\t$array.remove(yAxis.series, series);\n\t\t\tyAxis.markDirtyExtremes();\n\t\t}\n\n\t\tconst cursor = this.get(\"cursor\");\n\t\tif (cursor) {\n\t\t\tconst snapToSeries = cursor.get(\"snapToSeries\");\n\t\t\tif (snapToSeries) {\n\t\t\t\t$array.remove(snapToSeries, series);\n\t\t\t}\n\t\t}\n\n\t\tsuper._removeSeries(series);\n\t}\n\n\t/**\n\t * This method is invoked when mouse wheel is used over chart's plot\n\t * container, and handles zooming/pan.\n\t *\n\t * You can invoke this method manually, if you need to mimic chart's wheel\n\t * behavior over other elements of the chart.\n\t */\n\tpublic handleWheel(event: { originalEvent: WheelEvent, point: IPoint, target: Container }) {\n\t\tconst wheelX = this.get(\"wheelX\");\n\t\tconst wheelY = this.get(\"wheelY\");\n\t\tconst plotContainer = this.plotContainer;\n\n\t\tconst wheelEvent = event.originalEvent;\n\n\t\t// Ignore wheel event if it is happening on a non-chart element, e.g. if\n\t\t// some page element is over the chart.\n\t\tif ($utils.isLocalEvent(wheelEvent, this)) {\n\t\t\twheelEvent.preventDefault();\n\t\t}\n\t\telse {\n\t\t\treturn;\n\t\t}\n\n\t\tconst plotPoint = plotContainer.toLocal(this._root.documentPointToRoot({ x: wheelEvent.clientX, y: wheelEvent.clientY }))\n\t\tconst wheelStep = this.get(\"wheelStep\", 0.2);\n\n\t\tconst shiftY = wheelEvent.deltaY / 100;\n\t\tconst shiftX = wheelEvent.deltaX / 100;\n\n\t\tconst wheelZoomPositionX = this.get(\"wheelZoomPositionX\");\n\t\tconst wheelZoomPositionY = this.get(\"wheelZoomPositionY\");\n\n\t\tif ((wheelX === \"zoomX\" || wheelX === \"zoomXY\") && shiftX != 0) {\n\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\tif (axis.get(\"zoomX\")) {\n\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\tlet position = axis.fixPosition(plotPoint.x / plotContainer.width());\n\n\t\t\t\t\tif (wheelZoomPositionX != null) {\n\t\t\t\t\t\tposition = wheelZoomPositionX;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet newStart = start - wheelStep * (end - start) * shiftX * position;\n\t\t\t\t\tlet newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);\n\t\t\t\t\tif (1 / (newEnd - newStart) < axis.getPrivate(\"maxZoomFactor\", Infinity) / axis.get(\"minZoomCount\", 1)) {\n\t\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif ((wheelY === \"zoomX\" || wheelY === \"zoomXY\") && shiftY != 0) {\n\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\tif (axis.get(\"zoomX\")) {\n\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\tlet position = axis.fixPosition(plotPoint.x / plotContainer.width());\n\n\t\t\t\t\tif (wheelZoomPositionX != null) {\n\t\t\t\t\t\tposition = wheelZoomPositionX;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet newStart = start - wheelStep * (end - start) * shiftY * position;\n\t\t\t\t\tlet newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);\n\n\t\t\t\t\tif (1 / (newEnd - newStart) < axis.getPrivate(\"maxZoomFactor\", Infinity) / axis.get(\"minZoomCount\", 1)) {\n\t\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\n\t\tif ((wheelX === \"zoomY\" || wheelX === \"zoomXY\") && shiftX != 0) {\n\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\tif (axis.get(\"zoomY\")) {\n\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\tlet position = axis.fixPosition(plotPoint.y / plotContainer.height());\n\n\t\t\t\t\tif (wheelZoomPositionY != null) {\n\t\t\t\t\t\tposition = wheelZoomPositionY;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet newStart = start - wheelStep * (end - start) * shiftX * position;\n\t\t\t\t\tlet newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);\n\n\t\t\t\t\tif (1 / (newEnd - newStart) < axis.getPrivate(\"maxZoomFactor\", Infinity) / axis.get(\"minZoomCount\", 1)) {\n\t\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif ((wheelY === \"zoomY\" || wheelY === \"zoomXY\") && shiftY != 0) {\n\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\tif (axis.get(\"zoomY\")) {\n\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\tlet position = axis.fixPosition(plotPoint.y / plotContainer.height());\n\n\t\t\t\t\tif (wheelZoomPositionY != null) {\n\t\t\t\t\t\tposition = wheelZoomPositionY;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet newStart = start - wheelStep * (end - start) * shiftY * position;\n\t\t\t\t\tlet newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);\n\n\t\t\t\t\tif (1 / (newEnd - newStart) < axis.getPrivate(\"maxZoomFactor\", Infinity) / axis.get(\"minZoomCount\", 1)) {\n\t\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\n\t\tif ((wheelX === \"panX\" || wheelX === \"panXY\") && shiftX != 0) {\n\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\tif (axis.get(\"panX\")) {\n\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\tlet delta = this._getWheelSign(axis) * wheelStep * (end - start) * shiftX;\n\t\t\t\t\tlet newStart = start + delta;\n\t\t\t\t\tlet newEnd = end + delta;\n\n\t\t\t\t\tlet se = this._fixWheel(newStart, newEnd);\n\t\t\t\t\tnewStart = se[0];\n\t\t\t\t\tnewEnd = se[1];\n\n\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif ((wheelY === \"panX\" || wheelY === \"panXY\") && shiftY != 0) {\n\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\tif (axis.get(\"panX\")) {\n\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\tlet delta = this._getWheelSign(axis) * wheelStep * (end - start) * shiftY;\n\t\t\t\t\tlet newStart = start + delta;\n\t\t\t\t\tlet newEnd = end + delta;\n\n\t\t\t\t\tlet se = this._fixWheel(newStart, newEnd);\n\t\t\t\t\tnewStart = se[0];\n\t\t\t\t\tnewEnd = se[1];\n\n\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif ((wheelX === \"panY\" || wheelX === \"panXY\") && shiftX != 0) {\n\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\tif (axis.get(\"panY\")) {\n\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\tlet delta = this._getWheelSign(axis) * wheelStep * (end - start) * shiftX;\n\t\t\t\t\tlet newStart = start + delta;\n\t\t\t\t\tlet newEnd = end + delta;\n\n\t\t\t\t\tlet se = this._fixWheel(newStart, newEnd);\n\t\t\t\t\tnewStart = se[0];\n\t\t\t\t\tnewEnd = se[1];\n\n\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif ((wheelY === \"panY\" || wheelY === \"panXY\") && shiftY != 0) {\n\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\tif (axis.get(\"panY\")) {\n\t\t\t\t\tlet start = axis.get(\"start\")!;\n\t\t\t\t\tlet end = axis.get(\"end\")!;\n\n\t\t\t\t\tlet delta = this._getWheelSign(axis) * wheelStep * (end - start) * shiftY;\n\t\t\t\t\tlet newStart = start - delta;\n\t\t\t\t\tlet newEnd = end - delta;\n\n\t\t\t\t\tlet se = this._fixWheel(newStart, newEnd);\n\t\t\t\t\tnewStart = se[0];\n\t\t\t\t\tnewEnd = se[1];\n\n\t\t\t\t\tthis._handleWheelAnimation(axis.zoom(newStart, newEnd));\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _handleSetWheel() {\n\t\tconst wheelX = this.get(\"wheelX\");\n\t\tconst wheelY = this.get(\"wheelY\");\n\t\tconst plotContainer = this.plotContainer;\n\n\t\tif (wheelX !== \"none\" || wheelY !== \"none\") {\n\t\t\tthis._wheelDp = plotContainer.events.on(\"wheel\", (event) => {\n\t\t\t\tthis.handleWheel(event);\n\t\t\t});\n\n\t\t\tthis._disposers.push(this._wheelDp);\n\t\t}\n\t\telse {\n\t\t\tif (this._wheelDp) {\n\t\t\t\tthis._wheelDp.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _getWheelSign(axis: Axis<AxisRenderer>) {\n\t\tlet sign = 1;\n\t\tif (axis.get(\"renderer\").get(\"inversed\")) {\n\t\t\tsign = -1;\n\t\t}\n\n\t\treturn sign\n\t}\n\n\tprotected _fixWheel(start: number, end: number): [number, number] {\n\t\tconst diff = end - start;\n\t\tif (start < 0) {\n\t\t\tstart = 0;\n\t\t\tend = start + diff;\n\t\t}\n\t\tif (end > 1) {\n\t\t\tend = 1;\n\t\t\tstart = end - diff;\n\t\t}\n\n\t\treturn [start, end];\n\t}\n\n\tprotected _handlePlotDown(event: IPointerEvent) {\n\t\tif((event as any).button == 2){\n\t\t\treturn;\n\t\t}\n\t\tconst plotContainer = this.plotContainer;\n\t\tlet local = plotContainer.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));\n\n\t\tif (this.get(\"pinchZoomX\") || this.get(\"pinchZoomY\")) {\n\n\t\t\tconst touchEvent = event as any;\n\t\t\tconst pointerId = touchEvent.pointerId;\n\n\t\t\tif (pointerId) {\n\n\t\t\t\tif ($object.keys(plotContainer._downPoints).length > 0) {\n\t\t\t\t\tconst xAxis = this.xAxes.getIndex(0);\n\t\t\t\t\tconst yAxis = this.yAxes.getIndex(0);\n\n\n\t\t\t\t\tif (xAxis) {\n\t\t\t\t\t\tthis._downStartX = xAxis.get(\"start\", 0);\n\t\t\t\t\t\tthis._downEndX = xAxis.get(\"end\", 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (yAxis) {\n\t\t\t\t\t\tthis._downStartY = yAxis.get(\"start\", 0);\n\t\t\t\t\t\tthis._downEndY = yAxis.get(\"end\", 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.get(\"panX\") || this.get(\"panY\")) {\n\n\t\t\tif (local.x >= 0 && local.y >= 0 && local.x <= plotContainer.width() && local.y <= this.height()) {\n\t\t\t\t//this._downPoint = local;\n\t\t\t\tthis._downPoint = { x: event.clientX, y: event.clientY };\n\n\t\t\t\tconst panX = this.get(\"panX\");\n\t\t\t\tconst panY = this.get(\"panY\");\n\n\t\t\t\tif (panX) {\n\t\t\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\t\t\taxis._panStart = axis.get(\"start\")!;\n\t\t\t\t\t\taxis._panEnd = axis.get(\"end\")!;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tif (panY) {\n\t\t\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\t\t\taxis._panStart = axis.get(\"start\")!;\n\t\t\t\t\t\taxis._panEnd = axis.get(\"end\")!;\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tconst eventType = \"panstarted\";\n\t\t\t\tif (this.events.isEnabled(eventType)) {\n\t\t\t\t\tthis.events.dispatch(eventType, { type: eventType, target: this, originalEvent: event });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleWheelAnimation(animation?: Animation<any>) {\n\t\tif (animation) {\n\t\t\tanimation.events.on(\"stopped\", () => {\n\t\t\t\tthis._dispatchWheelAnimation();\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tthis._dispatchWheelAnimation();\n\t\t}\n\t}\n\n\tprotected _dispatchWheelAnimation() {\n\t\tconst eventType = \"wheelended\";\n\t\tif (this.events.isEnabled(eventType)) {\n\t\t\tthis.events.dispatch(eventType, { type: eventType, target: this });\n\t\t}\n\t}\n\n\tprotected _handlePlotUp(event: IPointerEvent) {\n\t\tconst downPoint = this._downPoint;\n\t\tif (downPoint) {\n\t\t\tif (this.get(\"panX\") || this.get(\"panY\")) {\n\t\t\t\tlet local = this.plotContainer.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));\n\t\t\t\tif (local.x == downPoint.x && local.y == downPoint.y) {\n\t\t\t\t\tconst eventType = \"pancancelled\";\n\t\t\t\t\tif (this.events.isEnabled(eventType)) {\n\t\t\t\t\t\tthis.events.dispatch(eventType, { type: eventType, target: this, originalEvent: event });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst eventType = \"panended\";\n\t\t\t\tif (this.events.isEnabled(eventType)) {\n\t\t\t\t\tthis.events.dispatch(eventType, { type: eventType, target: this, originalEvent: event });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// TODO: handle multitouch\n\t\tthis._downPoint = undefined;\n\t\tthis.xAxes.each((xAxis) => {\n\t\t\txAxis._isPanning = false;\n\t\t})\n\t\tthis.yAxes.each((yAxis) => {\n\t\t\tyAxis._isPanning = false;\n\t\t})\n\t}\n\n\tprotected _handlePlotMove(event: IPointerEvent) {\n\t\tconst plotContainer = this.plotContainer;\n\n\t\tif (this.get(\"pinchZoomX\") || this.get(\"pinchZoomY\")) {\n\t\t\tconst touchEvent = event as any;\n\t\t\tconst pointerId = touchEvent.pointerId;\n\n\t\t\tif (pointerId) {\n\t\t\t\tthis._movePoints[pointerId] = this._root.documentPointToRoot({ x: event.clientX, y: event.clientY });\n\n\t\t\t\tif ($object.keys(plotContainer._downPoints).length > 1) {\n\t\t\t\t\tthis._handlePinch();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet downPoint = this._downPoint!;\n\n\t\tif (downPoint) {\n\n\t\t\tdownPoint = plotContainer.toLocal(this._root.documentPointToRoot(downPoint));\n\t\t\tlet local = plotContainer.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));\n\n\t\t\tconst panX = this.get(\"panX\");\n\t\t\tconst panY = this.get(\"panY\");\n\n\t\t\tif (panX) {\n\n\t\t\t\tlet scrollbarX = this.get(\"scrollbarX\");\n\t\t\t\tif (scrollbarX) {\n\t\t\t\t\tscrollbarX.events.disableType(\"rangechanged\");\n\t\t\t\t}\n\n\t\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\t\tif (axis.get(\"panX\")) {\n\t\t\t\t\t\taxis._isPanning = true;\n\t\t\t\t\t\t//const maxDeviation = axis.get(\"maxDeviation\", 0);\n\t\t\t\t\t\tlet panStart = axis._panStart;\n\t\t\t\t\t\tlet panEnd = axis._panEnd;\n\t\t\t\t\t\tlet difference = (panEnd - panStart);\n\t\t\t\t\t\tlet deltaX = difference * (downPoint.x - local.x) / plotContainer.width();\n\n\t\t\t\t\t\tif (axis.get(\"renderer\").get(\"inversed\")) {\n\t\t\t\t\t\t\tdeltaX *= -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet start = panStart + deltaX;\n\t\t\t\t\t\tlet end = panEnd + deltaX;\n\n\t\t\t\t\t\tif (end - start < 1 + axis.get(\"maxDeviation\", 1) * 2) {\n\t\t\t\t\t\t\taxis.set(\"start\", start);\n\t\t\t\t\t\t\taxis.set(\"end\", end);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tif (scrollbarX) {\n\t\t\t\t\tscrollbarX.events.enableType(\"rangechanged\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (panY) {\n\n\t\t\t\tlet scrollbarY = this.get(\"scrollbarY\");\n\t\t\t\tif (scrollbarY) {\n\t\t\t\t\tscrollbarY.events.disableType(\"rangechanged\");\n\t\t\t\t}\n\n\t\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\t\tif (axis.get(\"panY\")) {\n\t\t\t\t\t\taxis._isPanning = true;\n\t\t\t\t\t\t//const maxDeviation = axis.get(\"maxDeviation\", 0);\n\n\t\t\t\t\t\tlet panStart = axis._panStart;\n\t\t\t\t\t\tlet panEnd = axis._panEnd;\n\t\t\t\t\t\tlet difference = (panEnd - panStart);\n\t\t\t\t\t\tlet deltaY = difference * (downPoint.y - local.y) / plotContainer.height();\n\t\t\t\t\t\tif (axis.get(\"renderer\").get(\"inversed\")) {\n\t\t\t\t\t\t\tdeltaY *= -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet start = panStart - deltaY;\n\t\t\t\t\t\tlet end = panEnd - deltaY;\n\n\t\t\t\t\t\tif (end - start < 1 + axis.get(\"maxDeviation\", 1) * 2) {\n\t\t\t\t\t\t\taxis.set(\"start\", start);\n\t\t\t\t\t\t\taxis.set(\"end\", end);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tif (scrollbarY) {\n\t\t\t\t\tscrollbarY.events.enableType(\"rangechanged\");\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t}\n\t}\n\n\tprotected _handlePinch() {\n\t\tconst plotContainer = this.plotContainer;\n\t\tlet i = 0;\n\t\tlet downPoints: Array<IPoint> = [];\n\t\tlet movePoints: Array<IPoint> = [];\n\n\t\t$object.each(plotContainer._downPoints, (k, point) => {\n\t\t\tdownPoints[i] = point;\n\t\t\tlet movePoint = this._movePoints[k];\n\t\t\tif (movePoint) {\n\t\t\t\tmovePoints[i] = movePoint;\n\t\t\t}\n\t\t\ti++;\n\t\t});\n\n\t\tif (downPoints.length > 1 && movePoints.length > 1) {\n\t\t\tconst w = plotContainer.width();\n\t\t\tconst h = plotContainer.height();\n\n\t\t\tlet downPoint0 = downPoints[0];\n\t\t\tlet downPoint1 = downPoints[1];\n\n\t\t\tlet movePoint0 = movePoints[0];\n\t\t\tlet movePoint1 = movePoints[1];\n\n\t\t\tif (downPoint0 && downPoint1 && movePoint0 && movePoint1) {\n\n\t\t\t\tmovePoint0 = plotContainer.toLocal(movePoint0)\n\t\t\t\tmovePoint1 = plotContainer.toLocal(movePoint1)\n\n\t\t\t\tdownPoint0 = plotContainer.toLocal(downPoint0)\n\t\t\t\tdownPoint1 = plotContainer.toLocal(downPoint1)\n\n\t\t\t\tif (this.get(\"pinchZoomX\")) {\n\t\t\t\t\tconst downStartX = this._downStartX;\n\t\t\t\t\tconst downEndX = this._downEndX;\n\n\t\t\t\t\tif (downStartX != null && downEndX != null) {\n\n\t\t\t\t\t\tif (downPoint0.x > downPoint1.x) {\n\t\t\t\t\t\t\t[downPoint0, downPoint1] = [downPoint1, downPoint0];\n\t\t\t\t\t\t\t[movePoint0, movePoint1] = [movePoint1, movePoint0];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet downPos0 = downStartX + (downPoint0.x / w) * (downEndX - downStartX);\n\t\t\t\t\t\tlet downPos1 = downStartX + (downPoint1.x / w) * (downEndX - downStartX);\n\n\t\t\t\t\t\tlet movePos0 = downStartX + (movePoint0.x / w) * (downEndX - downStartX);\n\t\t\t\t\t\tlet movePos1 = downStartX + (movePoint1.x / w) * (downEndX - downStartX);\n\n\t\t\t\t\t\tlet initialDistance = Math.max(0.001, downPos1 - downPos0);\n\t\t\t\t\t\tlet currentDistance = Math.max(0.001, movePos1 - movePos0);\n\n\n\t\t\t\t\t\tlet d = initialDistance / currentDistance;\n\n\t\t\t\t\t\tlet s = downStartX * d + downPos0 - movePos0 * d;\n\t\t\t\t\t\tlet e = downEndX * d + downPos1 - movePos1 * d;\n\n\t\t\t\t\t\tthis.xAxes.each((xAxis) => {\n\t\t\t\t\t\t\tlet sa = xAxis.fixPosition(s);\n\t\t\t\t\t\t\tlet ea = xAxis.fixPosition(e);\n\n\t\t\t\t\t\t\txAxis.zoom(sa, ea, 0);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.get(\"pinchZoomY\")) {\n\t\t\t\t\tconst downStartY = this._downStartY;\n\t\t\t\t\tconst downEndY = this._downEndY;\n\n\t\t\t\t\tif (downStartY != null && downEndY != null) {\n\n\t\t\t\t\t\tif (downPoint0.y < downPoint1.y) {\n\t\t\t\t\t\t\t[downPoint0, downPoint1] = [downPoint1, downPoint0];\n\t\t\t\t\t\t\t[movePoint0, movePoint1] = [movePoint1, movePoint0];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet downPos0 = downStartY + (1 - downPoint0.y / h) * (downEndY - downStartY);\n\t\t\t\t\t\tlet downPos1 = downStartY + (1 - downPoint1.y / h) * (downEndY - downStartY);\n\n\t\t\t\t\t\tlet movePos0 = downStartY + (1 - movePoint0.y / h) * (downEndY - downStartY);\n\t\t\t\t\t\tlet movePos1 = downStartY + (1 - movePoint1.y / h) * (downEndY - downStartY);\n\n\t\t\t\t\t\tlet initialDistance = Math.max(0.001, downPos1 - downPos0);\n\t\t\t\t\t\tlet currentDistance = Math.max(0.001, movePos1 - movePos0);\n\n\t\t\t\t\t\tlet d = initialDistance / currentDistance;\n\n\t\t\t\t\t\tlet s = downStartY * d + downPos0 - movePos0 * d;\n\t\t\t\t\t\tlet e = downEndY * d + downPos1 - movePos1 * d;\n\n\t\t\t\t\t\tthis.yAxes.each((yAxis) => {\n\n\t\t\t\t\t\t\tlet sa = yAxis.fixPosition(s);\n\t\t\t\t\t\t\tlet ea = yAxis.fixPosition(e);\n\n\t\t\t\t\t\t\tyAxis.zoom(sa, ea, 0);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _handleCursorPosition() {\n\t\tconst cursor = this.get(\"cursor\");\n\t\tif (cursor) {\n\t\t\tconst cursorPoint = cursor.getPrivate(\"point\");\n\n\t\t\tlet snapToSeries = cursor.get(\"snapToSeries\");\n\n\t\t\tif (cursor._downPoint) {\n\t\t\t\tsnapToSeries = undefined;\n\t\t\t}\n\n\t\t\tif (snapToSeries && cursorPoint) {\n\t\t\t\tconst snapToSeriesBy = cursor.get(\"snapToSeriesBy\");\n\t\t\t\tconst dataItems: Array<DataItem<IXYSeriesDataItem>> = [];\n\t\t\t\t$array.each(snapToSeries, (series) => {\n\t\t\t\t\tif (!series.isHidden() && !series.isHiding()) {\n\t\t\t\t\t\tif (snapToSeriesBy != \"x!\" && snapToSeriesBy != \"y!\") {\n\t\t\t\t\t\t\tconst startIndex = series.startIndex();\n\t\t\t\t\t\t\tconst endIndex = series.endIndex();\n\t\t\t\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\t\t\t\t\tconst dataItem = series.dataItems[i];\n\t\t\t\t\t\t\t\tif (dataItem && !dataItem.isHidden()) {\n\t\t\t\t\t\t\t\t\tdataItems.push(dataItem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst tooltipDataItem = series.get(\"tooltipDataItem\");\n\t\t\t\t\t\t\tif (tooltipDataItem) {\n\t\t\t\t\t\t\t\tdataItems.push(tooltipDataItem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tlet minDistance = Infinity;\n\t\t\t\tlet closestItem: DataItem<IXYSeriesDataItem> | undefined;\n\n\t\t\t\t$array.each(dataItems, (dataItem) => {\n\t\t\t\t\tconst point = dataItem.get(\"point\");\n\n\t\t\t\t\tif (point) {\n\t\t\t\t\t\tlet distance = 0;\n\t\t\t\t\t\tif (snapToSeriesBy == \"x\" || snapToSeriesBy == \"x!\") {\n\t\t\t\t\t\t\tdistance = Math.abs(cursorPoint.x - point.x);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (snapToSeriesBy == \"y\" || snapToSeriesBy == \"y!\") {\n\t\t\t\t\t\t\tdistance = Math.abs(cursorPoint.y - point.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdistance = Math.hypot(cursorPoint.x - point.x, cursorPoint.y - point.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (distance < minDistance) {\n\t\t\t\t\t\t\tminDistance = distance;\n\t\t\t\t\t\t\tclosestItem = dataItem;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\t$array.each(snapToSeries, (series) => {\n\t\t\t\t\tconst tooltip = series.get(\"tooltip\");\n\t\t\t\t\tif (tooltip) {\n\t\t\t\t\t\ttooltip._setDataItem(undefined);\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tif (closestItem) {\n\t\t\t\t\tlet series = closestItem.component as XYSeries;\n\t\t\t\t\tseries.showDataItemTooltip(closestItem);\n\t\t\t\t\tconst point = closestItem.get(\"point\");\n\t\t\t\t\tif (point) {\n\t\t\t\t\t\t// removing x and y to solve #72225\n\t\t\t\t\t\tcursor.handleMove(series.toGlobal({ x: point.x - series.x(), y: point.y - series.y() }), true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _updateCursor() {\n\t\tlet cursor = this.get(\"cursor\");\n\t\tif (cursor) {\n\t\t\tcursor.handleMove();\n\t\t}\n\t}\n\n\tprotected _addCursor(cursor: XYCursor) {\n\t\tthis.plotContainer.children.push(cursor);\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tthis.series.each((series) => {\n\t\t\tthis._colorize(series);\n\t\t})\n\n\t\tif (this.isDirty(\"wheelX\") || this.isDirty(\"wheelY\")) {\n\t\t\tthis._handleSetWheel();\n\t\t}\n\n\t\tif (this.isDirty(\"cursor\")) {\n\t\t\tconst previous = this._prevSettings.cursor;\n\t\t\tconst cursor = this.get(\"cursor\")!;\n\t\t\tif (cursor !== previous) {\n\t\t\t\tthis._disposeProperty(\"cursor\");\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious.dispose();\n\t\t\t\t}\n\t\t\t\tif (cursor) {\n\t\t\t\t\tcursor._setChart(this);\n\t\t\t\t\tthis._addCursor(cursor);\n\n\t\t\t\t\tthis._pushPropertyDisposer(\"cursor\", cursor.events.on(\"selectended\", () => {\n\t\t\t\t\t\tthis._handleCursorSelectEnd();\n\t\t\t\t\t}))\n\t\t\t\t}\n\n\t\t\t\t//this.setRaw(\"cursor\", cursor) // to reset previous value\n\t\t\t\tthis._prevSettings.cursor = cursor;\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"scrollbarX\")) {\n\t\t\tconst previous = this._prevSettings.scrollbarX;\n\t\t\tconst scrollbarX = this.get(\"scrollbarX\")!;\n\t\t\tif (scrollbarX !== previous) {\n\t\t\t\tthis._disposeProperty(\"scrollbarX\");\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious.dispose();\n\t\t\t\t}\n\t\t\t\tif (scrollbarX) {\n\t\t\t\t\tif (!scrollbarX.parent) {\n\t\t\t\t\t\tthis.topAxesContainer.children.push(scrollbarX);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._pushPropertyDisposer(\"scrollbarX\", scrollbarX.events.on(\"rangechanged\", (e) => {\n\t\t\t\t\t\tthis._handleScrollbar(this.xAxes, e.start, e.end, e.grip);\n\t\t\t\t\t}))\n\n\t\t\t\t\t// Used to populate `ariaLabel` with meaningful values\n\t\t\t\t\tscrollbarX.setPrivate(\"positionTextFunction\", (position: number) => {\n\t\t\t\t\t\tconst axis = this.xAxes.getIndex(0);\n\t\t\t\t\t\treturn axis ? axis.getTooltipText(position) || \"\" : \"\";\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t\tthis._prevSettings.scrollbarX = scrollbarX;\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"scrollbarY\")) {\n\t\t\tconst previous = this._prevSettings.scrollbarY;\n\t\t\tconst scrollbarY = this.get(\"scrollbarY\")!;\n\t\t\tif (scrollbarY !== previous) {\n\t\t\t\tthis._disposeProperty(\"scrollbarY\");\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious.dispose();\n\t\t\t\t}\n\t\t\t\tif (scrollbarY) {\n\t\t\t\t\tif (!scrollbarY.parent) {\n\t\t\t\t\t\tthis.rightAxesContainer.children.push(scrollbarY);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._pushPropertyDisposer(\"scrollbarY\", scrollbarY.events.on(\"rangechanged\", (e) => {\n\t\t\t\t\t\tthis._handleScrollbar(this.yAxes, e.start, e.end, e.grip);\n\t\t\t\t\t}))\n\n\t\t\t\t\t// Used to populate `ariaLabel` with meaningful values\n\t\t\t\t\tscrollbarY.setPrivate(\"positionTextFunction\", (position: number) => {\n\t\t\t\t\t\tconst axis = this.yAxes.getIndex(0);\n\t\t\t\t\t\treturn axis ? axis.getTooltipText(position) || \"\" : \"\";\n\t\t\t\t\t});\n\n\t\t\t\t}\n\t\t\t\tthis._prevSettings.scrollbarY = scrollbarY;\n\t\t\t}\n\t\t}\n\n\t\tthis._handleZoomOut();\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tsuper._processSeries(series);\n\t\tthis._colorize(series);\n\t}\n\n\tprotected _colorize(series: this[\"_seriesType\"]) {\n\t\tconst colorSet = this.get(\"colors\")!;\n\t\tif (colorSet) {\n\t\t\tif (series.get(\"fill\") == null) {\n\t\t\t\tconst color = colorSet.next();\n\n\t\t\t\tseries._setSoft(\"stroke\", color);\n\t\t\t\tseries._setSoft(\"fill\", color);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleCursorSelectEnd() {\n\t\tconst cursor = this.get(\"cursor\")!;\n\t\tconst behavior = cursor.get(\"behavior\");\n\n\t\tconst downPositionX = cursor.getPrivate(\"downPositionX\", 0);\n\t\tconst downPositionY = cursor.getPrivate(\"downPositionY\", 0);\n\n\t\tconst positionX = cursor.getPrivate(\"positionX\", 0.5);\n\t\tconst positionY = cursor.getPrivate(\"positionY\", 0.5);\n\n\n\t\tthis.xAxes.each((axis) => {\n\t\t\tif (behavior === \"zoomX\" || behavior === \"zoomXY\") {\n\t\t\t\tlet position0 = axis.toAxisPosition(downPositionX);\n\t\t\t\tlet position1 = axis.toAxisPosition(positionX);\n\t\t\t\taxis.zoom(position0, position1);\n\t\t\t}\n\t\t\taxis.setPrivate(\"updateScrollbar\", true);\n\t\t})\n\n\t\tthis.yAxes.each((axis) => {\n\t\t\tif (behavior === \"zoomY\" || behavior === \"zoomXY\") {\n\t\t\t\tlet position0 = axis.toAxisPosition(downPositionY);\n\t\t\t\tlet position1 = axis.toAxisPosition(positionY);\n\t\t\t\taxis.zoom(position0, position1);\n\t\t\t}\n\t\t\taxis.setPrivate(\"updateScrollbar\", true);\n\t\t})\n\t}\n\n\tprotected _handleScrollbar(axes: ListAutoDispose<Axis<any>>, start: number, end: number, priority?: \"start\" | \"end\") {\n\n\t\taxes.each((axis) => {\n\n\t\t\tlet axisStart = axis.fixPosition(start);\n\t\t\tlet axisEnd = axis.fixPosition(end);\n\n\t\t\tlet zoomAnimation = axis.zoom(axisStart, axisEnd, undefined, priority);\n\n\t\t\tconst updateScrollbar = \"updateScrollbar\";\n\t\t\taxis.setPrivateRaw(updateScrollbar, false);\n\n\t\t\tif (zoomAnimation) {\n\t\t\t\tzoomAnimation.events.on(\"stopped\", () => {\n\t\t\t\t\taxis.setPrivateRaw(updateScrollbar, true);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\taxis.setPrivateRaw(updateScrollbar, true);\n\t\t\t}\n\t\t})\n\t}\n\n\n\tprotected _processAxis<R extends AxisRenderer>(axes: ListAutoDispose<Axis<R>>, container: Container): IDisposer {\n\t\treturn axes.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\t$array.each(change.oldValues, (axis) => {\n\t\t\t\t\tthis._removeAxis(axis);\n\t\t\t\t})\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tcontainer.children.push(change.newValue);\n\t\t\t\tchange.newValue.processChart(this);\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tcontainer.children.setIndex(change.index, change.newValue);\n\t\t\t\tchange.newValue.processChart(this);\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tcontainer.children.insertIndex(change.index, change.newValue);\n\t\t\t\tchange.newValue.processChart(this);\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis._removeAxis(change.oldValue);\n\t\t\t} else if (change.type === \"moveIndex\") {\n\t\t\t\tcontainer.children.moveValue(change.value, change.newIndex);\n\t\t\t\tchange.value.processChart(this);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _removeAxis(axis: Axis<AxisRenderer>) {\n\t\tif (!axis.isDisposed()) {\n\t\t\tconst axisParent = axis.parent\n\t\t\tif (axisParent) {\n\t\t\t\taxisParent.children.removeValue(axis);\n\t\t\t}\n\n\t\t\tconst gridContainer = axis.gridContainer;\n\t\t\tconst gridParent = gridContainer.parent;\n\t\t\tif (gridParent) {\n\t\t\t\tgridParent.children.removeValue(gridContainer);\n\t\t\t}\n\n\t\t\tconst topGridContainer = axis.topGridContainer;\n\t\t\tconst topGridParent = topGridContainer.parent;\n\t\t\tif (topGridParent) {\n\t\t\t\ttopGridParent.children.removeValue(topGridContainer);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _updateChartLayout() {\n\t\tconst left = this.leftAxesContainer.width();\n\t\tconst right = this.rightAxesContainer.width();\n\n\t\tconst bottomAxesContainer = this.bottomAxesContainer;\n\t\tbottomAxesContainer.set(\"paddingLeft\", left);\n\t\tbottomAxesContainer.set(\"paddingRight\", right);\n\n\t\tconst topAxesContainer = this.topAxesContainer;\n\t\ttopAxesContainer.set(\"paddingLeft\", left);\n\t\ttopAxesContainer.set(\"paddingRight\", right);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis(_axis: Axis<AxisRenderer>) { };\n\n\tpublic _handleAxisSelection(axis: Axis<any>, force?: boolean) {\n\n\t\tlet start = axis.fixPosition(axis.get(\"start\", 0));\n\t\tlet end = axis.fixPosition(axis.get(\"end\", 1));\n\n\t\tif (start > end) {\n\t\t\t[start, end] = [end, start];\n\t\t}\n\n\t\tif (this.xAxes.indexOf(axis) != -1) {\n\t\t\tif (force || axis.getPrivate(\"updateScrollbar\")) {\n\t\t\t\tlet scrollbarX = this.get(\"scrollbarX\");\n\n\t\t\t\tif (scrollbarX && (!scrollbarX.getPrivate(\"isBusy\") || force)) {\n\t\t\t\t\tscrollbarX.setRaw(\"start\", start);\n\t\t\t\t\tscrollbarX.setRaw(\"end\", end);\n\t\t\t\t\tscrollbarX.updateGrips();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.yAxes.indexOf(axis) != -1) {\n\t\t\tif (force || axis.getPrivate(\"updateScrollbar\")) {\n\t\t\t\tlet scrollbarY = this.get(\"scrollbarY\");\n\n\t\t\t\tif (scrollbarY && (!scrollbarY.getPrivate(\"isBusy\") || force)) {\n\t\t\t\t\tscrollbarY.setRaw(\"start\", start);\n\t\t\t\t\tscrollbarY.setRaw(\"end\", end);\n\t\t\t\t\tscrollbarY.updateGrips();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._handleZoomOut();\n\t}\n\n\tprotected _handleZoomOut() {\n\t\tlet zoomOutButton = this.zoomOutButton;\n\t\tif (zoomOutButton && zoomOutButton.parent) {\n\t\t\tlet visible = false;\n\t\t\tthis.xAxes.each((axis) => {\n\t\t\t\tif (axis.get(\"start\") != 0 || axis.get(\"end\") != 1) {\n\t\t\t\t\tvisible = true;\n\t\t\t\t}\n\t\t\t})\n\t\t\tthis.yAxes.each((axis) => {\n\t\t\t\tif (axis.get(\"start\") != 0 || axis.get(\"end\") != 1) {\n\t\t\t\t\tvisible = true;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (visible) {\n\t\t\t\tif (zoomOutButton.isHidden()) {\n\t\t\t\t\tzoomOutButton.show();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tzoomOutButton.hide();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if point is within plot area.\n\t *\n\t * @param   point  Reference point\n\t * @return         Is within plot area?\n\t */\n\tpublic inPlot(point: IPoint): boolean {\n\t\tconst plotContainer = this.plotContainer;\n\t\tconst otherCharts = this.getPrivate(\"otherCharts\", this._otherCharts);\n\t\tconst global = plotContainer.toGlobal(point);\n\n\t\tif (point.x >= -0.5 && point.y >= -0.5 && point.x <= plotContainer.width() + 0.5 && point.y <= plotContainer.height() + 0.5) {\n\t\t\treturn true;\n\t\t}\n\t\tif (otherCharts) {\n\n\t\t\tfor (let i = otherCharts.length - 1; i >= 0; i--) {\n\t\t\t\tconst chart = otherCharts[i];\n\n\t\t\t\tif (chart != this) {\n\t\t\t\t\tconst chartPlotContainer = chart.plotContainer;\n\t\t\t\t\tconst documentPoint = this._root.rootPointToDocument(global);\n\t\t\t\t\tconst chartRoot = chart._root.documentPointToRoot(documentPoint);\n\t\t\t\t\tconst local = chartPlotContainer.toLocal(chartRoot);\n\t\t\t\t\tif (local.x >= -0.1 && local.y >= -0.1 && local.x <= chartPlotContainer.width() + 0.1 && local.y <= chartPlotContainer.height() + 0.1) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic arrangeTooltips() {\n\t\tconst plotContainer = this.plotContainer;\n\n\t\tconst w = plotContainer.width();\n\t\tconst h = plotContainer.height();\n\n\t\tconst hh = this.height();\n\n\t\tlet plotT = plotContainer._display.toGlobal({ x: 0, y: 0 });\n\t\tlet plotB = plotContainer._display.toGlobal({ x: w, y: h });\n\n\t\tconst tooltips: Array<Tooltip> = [];\n\t\tlet sum = 0;\n\n\t\tlet minDistance = Infinity;\n\t\tlet movePoint = this._movePoint;\n\t\tlet maxTooltipDistance = this.get(\"maxTooltipDistance\");\n\t\tlet maxTooltipDistanceBy = this.get(\"maxTooltipDistanceBy\", \"xy\");\n\t\tlet closest: XYSeries;\n\t\tlet closestPoint: IPoint;\n\n\t\tif ($type.isNumber(maxTooltipDistance)) {\n\t\t\tthis.series.each((series) => {\n\t\t\t\tif(!series.isHidden()){\n\t\t\t\t\tconst tooltip = series.get(\"tooltip\");\n\t\t\t\t\tif (tooltip) {\n\t\t\t\t\t\tlet point = tooltip.get(\"pointTo\")!;\n\t\t\t\t\t\tif (point) {\n\t\t\t\t\t\t\tlet distance = Math.hypot(movePoint.x - point.x, movePoint.y - point.y);\n\t\t\t\t\t\t\tif (maxTooltipDistanceBy == \"x\") {\n\t\t\t\t\t\t\t\tdistance = Math.abs(movePoint.x - point.x);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (maxTooltipDistanceBy == \"y\") {\n\t\t\t\t\t\t\t\tdistance = Math.abs(movePoint.y - point.y);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (distance < minDistance) {\n\t\t\t\t\t\t\t\tminDistance = distance;\n\t\t\t\t\t\t\t\tclosest = series;\n\t\t\t\t\t\t\t\tclosestPoint = point;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tconst tooltipSeries: Array<XYSeries> = [];\n\n\t\tthis.series.each((series) => {\n\t\t\tconst tooltip = series.get(\"tooltip\")!;\n\n\t\t\tif (tooltip) {\n\t\t\t\tlet hidden = false;\n\t\t\t\tlet point = tooltip.get(\"pointTo\")!;\n\t\t\t\tif (point) {\n\t\t\t\t\tif (maxTooltipDistance >= 0) {\n\t\t\t\t\t\tlet point = tooltip.get(\"pointTo\")!;\n\t\t\t\t\t\tif (point) {\n\t\t\t\t\t\t\tif (series != closest) {\n\t\t\t\t\t\t\t\tlet distance = Math.hypot(closestPoint.x - point.x, closestPoint.y - point.y);\n\t\t\t\t\t\t\t\tif (maxTooltipDistanceBy == \"x\") {\n\t\t\t\t\t\t\t\t\tdistance = Math.abs(closestPoint.x - point.x);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (maxTooltipDistanceBy == \"y\") {\n\t\t\t\t\t\t\t\t\tdistance = Math.abs(closestPoint.y - point.y);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (distance > maxTooltipDistance) {\n\t\t\t\t\t\t\t\t\thidden = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (maxTooltipDistance == -1) {\n\t\t\t\t\t\tif (series != closest) {\n\t\t\t\t\t\t\thidden = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.inPlot(this._tooltipToLocal(point)) || !tooltip.dataItem) {\n\t\t\t\t\t\thidden = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!hidden) {\n\t\t\t\t\t\t\tsum += point.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hidden || series.isHidden() || series.isHiding()) {\n\t\t\t\t\t\ttooltip.hide(0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttooltip.show();\n\t\t\t\t\t\ttooltips.push(tooltip);\n\n\t\t\t\t\t\ttooltipSeries.push(series);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis.setPrivate(\"tooltipSeries\", tooltipSeries);\n\n\t\tif (this.get(\"arrangeTooltips\")) {\n\n\t\t\tconst tooltipContainer = this._root.tooltipContainer;\n\n\t\t\tconst count = tooltips.length;\n\t\t\tconst average = sum / count;\n\n\t\t\tif (average > h / 2 + plotT.y) {\n\t\t\t\ttooltips.sort((a, b) => $order.compareNumber(b.get(\"pointTo\")!.y, a.get(\"pointTo\")!.y));\n\n\t\t\t\tlet prevY = plotB.y;\n\n\t\t\t\t$array.each(tooltips, (tooltip) => {\n\t\t\t\t\tlet height = tooltip.height();\n\t\t\t\t\tlet centerY = tooltip.get(\"centerY\");\n\t\t\t\t\tif (centerY instanceof Percent) {\n\t\t\t\t\t\theight *= centerY.value;\n\t\t\t\t\t}\n\t\t\t\t\theight += tooltip.get(\"marginBottom\", 0);\n\n\t\t\t\t\ttooltip.set(\"bounds\", { left: plotT.x, top: plotT.y, right: plotB.x, bottom: prevY })\n\t\t\t\t\ttooltip.setPrivate(\"customData\", { left: plotT.x, top: plotT.y, right: plotB.x, bottom: prevY })\n\t\t\t\t\tprevY = Math.min(prevY - height, tooltip._fy - height);\n\t\t\t\t\tif (tooltip.parent == tooltipContainer) {\n\t\t\t\t\t\ttooltipContainer.children.moveValue(tooltip, 0);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tif (prevY < 0) {\n\n\t\t\t\t\ttooltips.reverse();\n\t\t\t\t\tlet prevBottom = prevY;\n\n\t\t\t\t\t$array.each(tooltips, (tooltip) => {\n\t\t\t\t\t\tlet bounds = tooltip.get(\"bounds\");\n\t\t\t\t\t\tif (bounds) {\n\t\t\t\t\t\t\tlet top = bounds.top - prevY;\n\t\t\t\t\t\t\tlet bottom = bounds.bottom - prevY;\n\t\t\t\t\t\t\tif (top < prevBottom) {\n\t\t\t\t\t\t\t\ttop = prevBottom;\n\t\t\t\t\t\t\t\tbottom = top + tooltip.height();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttooltip.set(\"bounds\", { left: bounds.left, top: top, right: bounds.right, bottom: bottom })\n\t\t\t\t\t\t\tprevBottom = bounds.bottom - prevY + tooltip.get(\"marginBottom\", 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttooltips.reverse();\n\t\t\t\ttooltips.sort((a, b) => $order.compareNumber(a.get(\"pointTo\")!.y, b.get(\"pointTo\")!.y));\n\n\t\t\t\tlet prevY = 0;\n\t\t\t\t$array.each(tooltips, (tooltip) => {\n\t\t\t\t\tlet height = tooltip.height();\n\t\t\t\t\tlet centerY = tooltip.get(\"centerY\");\n\t\t\t\t\tif (centerY instanceof Percent) {\n\t\t\t\t\t\theight *= centerY.value;\n\t\t\t\t\t}\n\t\t\t\t\theight += tooltip.get(\"marginBottom\", 0);\n\n\t\t\t\t\ttooltip.set(\"bounds\", { left: plotT.x, top: prevY, right: plotB.x, bottom: Math.max(plotT.y + hh, prevY + height) })\n\t\t\t\t\tif (tooltip.parent == tooltipContainer) {\n\t\t\t\t\t\ttooltipContainer.children.moveValue(tooltip, 0);\n\t\t\t\t\t}\n\t\t\t\t\tprevY = Math.max(prevY + height, tooltip._fy + height);\n\t\t\t\t})\n\n\t\t\t\tif (prevY > hh) {\n\t\t\t\t\ttooltips.reverse();\n\t\t\t\t\tlet prevBottom = hh;\n\n\t\t\t\t\t$array.each(tooltips, (tooltip) => {\n\t\t\t\t\t\tlet bounds = tooltip.get(\"bounds\");\n\t\t\t\t\t\tif (bounds) {\n\t\t\t\t\t\t\tlet top = bounds.top - (hh - prevY);\n\t\t\t\t\t\t\tlet bottom = bounds.bottom - (hh - prevY);\n\t\t\t\t\t\t\tif (bottom > prevBottom) {\n\t\t\t\t\t\t\t\tbottom = prevBottom\n\t\t\t\t\t\t\t\ttop = bottom - tooltip.height();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttooltip.set(\"bounds\", { left: bounds.left, top: top, right: bounds.right, bottom: bottom })\n\t\t\t\t\t\t\tprevBottom = bottom - tooltip.height() - tooltip.get(\"marginBottom\", 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _tooltipToLocal(point: IPoint): IPoint {\n\t\treturn this.plotContainer.toLocal(point);\n\t}\n\n\t/**\n\t * Fully zooms out the chart.\n\t */\n\tpublic zoomOut() {\n\t\tthis.xAxes.each((axis) => {\n\t\t\taxis.setPrivate(\"updateScrollbar\", true);\n\t\t\taxis.zoom(0, 1);\n\t\t})\n\n\t\tthis.yAxes.each((axis) => {\n\t\t\taxis.setPrivate(\"updateScrollbar\", true);\n\t\t\taxis.zoom(0, 1);\n\t\t})\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}