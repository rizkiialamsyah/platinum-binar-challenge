{"ast":null,"code":"import { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\n/**\r\n * A vertical children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\nexport class VerticalLayout extends Layout {\n  /**\r\n   * @ignore\r\n   */\n  updateContainer(container) {\n    let paddingTop = container.get(\"paddingTop\", 0);\n    let availableHeight = container.innerHeight();\n    let totalPercent = 0;\n    eachChildren(container, child => {\n      if (child.isVisible()) {\n        if (child.get(\"position\") == \"relative\") {\n          let childHeight = child.get(\"height\");\n          if (childHeight instanceof Percent) {\n            totalPercent += childHeight.value;\n            let h = availableHeight * childHeight.value;\n            let minHeight = child.get(\"minHeight\", child.getPrivate(\"minHeight\", -Infinity));\n            if (minHeight > h) {\n              availableHeight -= minHeight;\n              totalPercent -= childHeight.value;\n            }\n            let maxHeight = child.get(\"maxHeight\", child.getPrivate(\"maxHeight\", Infinity));\n            if (h > maxHeight) {\n              availableHeight -= maxHeight;\n              totalPercent -= childHeight.value;\n            }\n          } else {\n            if (!$type.isNumber(childHeight)) {\n              childHeight = child.height();\n            }\n            availableHeight -= childHeight + child.get(\"marginTop\", 0) + child.get(\"marginBottom\", 0);\n          }\n        }\n      }\n    });\n    if (availableHeight <= 0 || availableHeight == Infinity) {\n      availableHeight = .1;\n    }\n    //if (availableHeight > 0) {\n    eachChildren(container, child => {\n      if (child.isVisible()) {\n        if (child.get(\"position\") == \"relative\") {\n          let childHeight = child.get(\"height\");\n          if (childHeight instanceof Percent) {\n            let privateHeight = availableHeight * childHeight.value / totalPercent - child.get(\"marginTop\", 0) - child.get(\"marginBottom\", 0);\n            let minHeight = child.get(\"minHeight\", child.getPrivate(\"minHeight\", -Infinity));\n            let maxHeight = child.get(\"maxHeight\", child.getPrivate(\"maxHeight\", Infinity));\n            privateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);\n            child.setPrivate(\"height\", privateHeight);\n          }\n        }\n      }\n    });\n    //}\n    let prevY = paddingTop;\n    eachChildren(container, child => {\n      if (child.get(\"position\") == \"relative\") {\n        if (child.isVisible()) {\n          let bounds = child.adjustedLocalBounds();\n          let marginTop = child.get(\"marginTop\", 0);\n          let top = bounds.top;\n          let bottom = bounds.bottom;\n          let maxHeight = child.get(\"maxHeight\");\n          if (maxHeight) {\n            if (bottom - top > maxHeight) {\n              bottom = top + maxHeight;\n            }\n          }\n          let marginBottom = child.get(\"marginBottom\", 0);\n          let y = prevY + marginTop - top;\n          child.setPrivate(\"y\", y);\n          prevY = y + bottom + marginBottom;\n        } else {\n          child.setPrivate(\"y\", undefined);\n        }\n      }\n    });\n  }\n}\nObject.defineProperty(VerticalLayout, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"VerticalLayout\"\n});\nObject.defineProperty(VerticalLayout, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Layout.classNames.concat([VerticalLayout.className])\n});","map":{"version":3,"names":["Layout","eachChildren","$type","Percent","VerticalLayout","updateContainer","container","paddingTop","get","availableHeight","innerHeight","totalPercent","child","isVisible","childHeight","value","h","minHeight","getPrivate","Infinity","maxHeight","isNumber","height","privateHeight","Math","min","max","setPrivate","prevY","bounds","adjustedLocalBounds","marginTop","top","bottom","marginBottom","y","undefined","Object","defineProperty","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\VerticalLayout.ts"],"sourcesContent":["import { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { Container } from \"./Container\";\n\n\n/**\n * A vertical children layout for [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\n */\nexport class VerticalLayout extends Layout {\n\n\tpublic static className: string = \"VerticalLayout\";\n\tpublic static classNames: Array<string> = Layout.classNames.concat([VerticalLayout.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateContainer(container: Container): void {\n\t\tlet paddingTop = container.get(\"paddingTop\", 0);\n\n\t\tlet availableHeight = container.innerHeight();\n\t\tlet totalPercent = 0;\n\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.isVisible()) {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childHeight = child.get(\"height\");\n\t\t\t\t\tif (childHeight instanceof Percent) {\n\t\t\t\t\t\ttotalPercent += childHeight.value;\n\n\t\t\t\t\t\tlet h = availableHeight * childHeight.value;\n\t\t\t\t\t\tlet minHeight = child.get(\"minHeight\", child.getPrivate(\"minHeight\", -Infinity));\n\t\t\t\t\t\tif (minHeight > h) {\n\t\t\t\t\t\t\tavailableHeight -= minHeight;\n\t\t\t\t\t\t\ttotalPercent -= childHeight.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet maxHeight = child.get(\"maxHeight\", child.getPrivate(\"maxHeight\", Infinity));\n\t\t\t\t\t\tif (h > maxHeight) {\n\t\t\t\t\t\t\tavailableHeight -= maxHeight;\n\t\t\t\t\t\t\ttotalPercent -= childHeight.value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!$type.isNumber(childHeight)) {\n\t\t\t\t\t\t\tchildHeight = child.height();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tavailableHeight -= childHeight + child.get(\"marginTop\", 0) + child.get(\"marginBottom\", 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tif (availableHeight <= 0 || availableHeight == Infinity) {\n\t\t\tavailableHeight = .1;\n\t\t}\n\n\t\t//if (availableHeight > 0) {\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.isVisible()) {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childHeight = child.get(\"height\");\n\n\t\t\t\t\tif (childHeight instanceof Percent) {\n\t\t\t\t\t\tlet privateHeight = availableHeight * childHeight.value / totalPercent - child.get(\"marginTop\", 0) - child.get(\"marginBottom\", 0);\n\n\t\t\t\t\t\tlet minHeight = child.get(\"minHeight\", child.getPrivate(\"minHeight\", -Infinity));\n\t\t\t\t\t\tlet maxHeight = child.get(\"maxHeight\", child.getPrivate(\"maxHeight\", Infinity));\n\t\t\t\t\t\tprivateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);\n\n\t\t\t\t\t\tchild.setPrivate(\"height\", privateHeight);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t//}\n\n\t\tlet prevY = paddingTop;\n\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\tif (child.isVisible()) {\n\t\t\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\t\t\tlet marginTop = child.get(\"marginTop\", 0);\n\n\t\t\t\t\tlet top = bounds.top;\n\t\t\t\t\tlet bottom = bounds.bottom;\n\n\t\t\t\t\tlet maxHeight = child.get(\"maxHeight\");\n\t\t\t\t\tif (maxHeight) {\n\t\t\t\t\t\tif (bottom - top > maxHeight) {\n\t\t\t\t\t\t\tbottom = top + maxHeight;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet marginBottom = child.get(\"marginBottom\", 0);\n\t\t\t\t\tlet y = prevY + marginTop - top;\n\t\t\t\t\tchild.setPrivate(\"y\", y);\n\t\t\t\t\tprevY = y + bottom + marginBottom;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tchild.setPrivate(\"y\", undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}