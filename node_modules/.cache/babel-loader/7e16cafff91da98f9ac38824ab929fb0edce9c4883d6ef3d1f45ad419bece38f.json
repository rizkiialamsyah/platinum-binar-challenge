{"ast":null,"code":"import { Graphics } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n/**\r\n * Draws a slice shape.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n */\nexport class Slice extends Graphics {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * @ignore\r\n     */\n    Object.defineProperty(this, \"ix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    /**\r\n     * @ignore\r\n     */\n    Object.defineProperty(this, \"iy\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_generator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: arc()\n    });\n  }\n  _getTooltipPoint() {\n    let tooltipX = this.get(\"tooltipX\");\n    let tooltipY = this.get(\"tooltipY\");\n    let x = 0;\n    let y = 0;\n    if ($type.isNumber(tooltipX)) {\n      x = tooltipX;\n    }\n    if ($type.isNumber(tooltipY)) {\n      y = tooltipY;\n    }\n    let radius = this.get(\"radius\", 0);\n    let innerRadius = this.get(\"innerRadius\", 0);\n    let dRadius = this.get(\"dRadius\", 0);\n    let dInnerRadius = this.get(\"dInnerRadius\", 0);\n    radius += dRadius;\n    innerRadius += dInnerRadius;\n    if (innerRadius < 0) {\n      innerRadius = radius + innerRadius;\n    }\n    if (tooltipX instanceof Percent) {\n      x = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value);\n    }\n    if (tooltipY instanceof Percent) {\n      y = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value);\n    }\n    if (this.get(\"arc\") >= 360 && innerRadius == 0) {\n      x = 0;\n      y = 0;\n    }\n    return {\n      x,\n      y\n    };\n  }\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\")) {\n      this._clear = true;\n    }\n  }\n  _changed() {\n    super._changed();\n    if (this._clear) {\n      let startAngle = this.get(\"startAngle\", 0);\n      let arc = this.get(\"arc\", 0);\n      const generator = this._generator;\n      if (arc < 0) {\n        startAngle = startAngle + arc;\n        arc = arc * -1;\n      }\n      if (arc > 0.1) {\n        // this fixes bug with full circle when arc is very small\n        generator.cornerRadius(this.get(\"cornerRadius\", 0));\n      }\n      generator.context(this._display);\n      let radius = this.get(\"radius\", 0);\n      let innerRadius = this.get(\"innerRadius\", 0);\n      let dRadius = this.get(\"dRadius\", 0);\n      let dInnerRadius = this.get(\"dInnerRadius\", 0);\n      radius += dRadius;\n      innerRadius += dInnerRadius;\n      if (innerRadius < 0) {\n        innerRadius = radius + innerRadius;\n      }\n      generator({\n        innerRadius: innerRadius,\n        outerRadius: radius,\n        startAngle: (startAngle + 90) * $math.RADIANS,\n        endAngle: (startAngle + arc + 90) * $math.RADIANS\n      });\n      let middleAngle = startAngle + arc / 2;\n      this.ix = $math.cos(middleAngle);\n      this.iy = $math.sin(middleAngle);\n    }\n    if (this.isDirty(\"shiftRadius\")) {\n      const shiftRadius = this.get(\"shiftRadius\", 0);\n      this.setRaw(\"dx\", this.ix * shiftRadius);\n      this.setRaw(\"dy\", this.iy * shiftRadius);\n      this.markDirtyPosition();\n    }\n  }\n}\nObject.defineProperty(Slice, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Slice\"\n});\nObject.defineProperty(Slice, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Graphics.classNames.concat([Slice.className])\n});","map":{"version":3,"names":["Graphics","$type","Percent","arc","$math","Slice","constructor","Object","defineProperty","_getTooltipPoint","tooltipX","get","tooltipY","x","y","isNumber","radius","innerRadius","dRadius","dInnerRadius","ix","value","iy","_beforeChanged","isDirty","_clear","_changed","startAngle","generator","_generator","cornerRadius","context","_display","outerRadius","RADIANS","endAngle","middleAngle","cos","sin","shiftRadius","setRaw","markDirtyPosition","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\Slice.ts"],"sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { IPoint } from \"../util/IPoint\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n\nexport interface ISliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Radius in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Slice \"width\" in degrees.\n\t */\n\tarc?: number;\n\n\t/**\n\t * Inner radius of the slice in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Start angle in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Slice corner radius in pixels.\n\t */\n\tcornerRadius?: number;\n\n\t/**\n\t * Slice \"pull out\" radius in pixels.\n\t */\n\tshiftRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `radius` value is. Negative\n\t * numbers can also be used.\n\t */\n\tdRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `innerRadius` value is.\n\t * Negative numbers can also be used.\n\t */\n\tdInnerRadius?: number;\n\n}\n\nexport interface ISlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice shape.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n */\nexport class Slice extends Graphics {\n\n\tdeclare public _settings: ISliceSettings;\n\tdeclare public _privateSettings: ISlicePrivate;\n\n\tpublic static className: string = \"Slice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Slice.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic ix: number = 0;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic iy: number = 0;\n\n\tprotected _generator = arc();\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tlet tooltipX = this.get(\"tooltipX\");\n\t\tlet tooltipY = this.get(\"tooltipY\");\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tif ($type.isNumber(tooltipX)) {\n\t\t\tx = tooltipX;\n\t\t}\n\n\t\tif ($type.isNumber(tooltipY)) {\n\t\t\ty = tooltipY;\n\t\t}\n\n\t\tlet radius = this.get(\"radius\", 0);\n\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\tradius += dRadius;\n\t\tinnerRadius += dInnerRadius;\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (tooltipX instanceof Percent) {\n\t\t\tx = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value)\n\t\t}\n\n\t\tif (tooltipY instanceof Percent) {\n\t\t\ty = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value)\n\t\t}\n\n\t\tif (this.get(\"arc\") >= 360 && innerRadius == 0) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\n\n\t\treturn { x, y };\n\t}\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tlet startAngle = this.get(\"startAngle\", 0);\n\t\t\tlet arc = this.get(\"arc\", 0);\n\t\t\tconst generator = this._generator;\n\n\t\t\tif(arc < 0){\n\t\t\t\tstartAngle = startAngle + arc;\n\t\t\t\tarc = arc * -1;\n\t\t\t}\n\n\t\t\tif(arc > 0.1){ // this fixes bug with full circle when arc is very small\n\t\t\t\tgenerator.cornerRadius(this.get(\"cornerRadius\", 0));\n\t\t\t}\n\t\t\tgenerator.context(this._display as any);\n\n\t\t\tlet radius = this.get(\"radius\", 0);\n\t\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\t\tradius += dRadius;\n\t\t\tinnerRadius += dInnerRadius;\t\t\t\n\n\t\t\tif (innerRadius < 0) {\n\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t}\n\n\t\t\tgenerator({ innerRadius: innerRadius, outerRadius: radius, startAngle: (startAngle + 90) * $math.RADIANS, endAngle: (startAngle + arc + 90) * $math.RADIANS });\n\n\t\t\tlet middleAngle = startAngle + arc / 2;\n\n\t\t\tthis.ix = $math.cos(middleAngle);\n\t\t\tthis.iy = $math.sin(middleAngle);\n\t\t}\n\n\t\tif (this.isDirty(\"shiftRadius\")) {\n\t\t\tconst shiftRadius = this.get(\"shiftRadius\", 0);\n\t\t\tthis.setRaw(\"dx\", this.ix * shiftRadius);\n\t\t\tthis.setRaw(\"dy\", this.iy * shiftRadius);\n\t\t\tthis.markDirtyPosition();\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}