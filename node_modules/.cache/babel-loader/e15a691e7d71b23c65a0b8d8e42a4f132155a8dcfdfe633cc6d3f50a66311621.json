{"ast":null,"code":"import { Pattern } from \"./Pattern\";\nimport * as $type from \"../../util//Type\";\n/**\r\n * Line pattern.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\nexport class LinePattern extends Pattern {\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isDirty(\"gap\")) {\n      this._clear = true;\n    }\n  }\n  _draw() {\n    super._draw();\n    const w = this.get(\"width\", 100);\n    const h = this.get(\"height\", 100);\n    const gap = this.get(\"gap\", 0);\n    const strokeWidth = this.get(\"strokeWidth\", 1);\n    if (!gap) {\n      this._display.moveTo(0, 0);\n      this._display.lineTo(w, 0);\n    } else {\n      let step = gap + strokeWidth;\n      let count = h / step;\n      for (let i = -count; i < count * 2; i++) {\n        const y = Math.round(i * step - step / 2) + 0.5;\n        this._display.moveTo(-w, y);\n        this._display.lineTo(w * 2, y);\n      }\n    }\n    this._display.lineStyle(strokeWidth, this.get(\"color\"), this.get(\"colorOpacity\"));\n    let strokeDasharray = this.get(\"strokeDasharray\");\n    if ($type.isNumber(strokeDasharray)) {\n      if (strokeDasharray < 0.5) {\n        strokeDasharray = [0];\n      } else {\n        strokeDasharray = [strokeDasharray];\n      }\n    }\n    this._display.setLineDash(strokeDasharray);\n    const strokeDashoffset = this.get(\"strokeDashoffset\");\n    if (strokeDashoffset) {\n      this._display.setLineDashOffset(strokeDashoffset);\n    }\n    this._display.endStroke();\n  }\n}\nObject.defineProperty(LinePattern, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"LinePattern\"\n});\nObject.defineProperty(LinePattern, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Pattern.classNames.concat([LinePattern.className])\n});","map":{"version":3,"names":["Pattern","$type","LinePattern","_beforeChanged","isDirty","_clear","_draw","w","get","h","gap","strokeWidth","_display","moveTo","lineTo","step","count","i","y","Math","round","lineStyle","strokeDasharray","isNumber","setLineDash","strokeDashoffset","setLineDashOffset","endStroke","Object","defineProperty","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\patterns\\LinePattern.ts"],"sourcesContent":["import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\nimport * as $type from \"../../util//Type\";\n\nexport interface ILinePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between  lines, in pixels.\n\t *\n\t * @default 6\n\t */\n\tgap?: number;\n\n}\n\nexport interface ILinePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Line pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class LinePattern extends Pattern {\n\n\tdeclare public _settings: ILinePatternSettings;\n\tdeclare public _privateSettings: ILinePatternPrivate;\n\n\tpublic static className: string = \"LinePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([LinePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst w = this.get(\"width\", 100);\n\t\tconst h = this.get(\"height\", 100);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst strokeWidth = this.get(\"strokeWidth\", 1);\n\n\t\tif (!gap) {\n\t\t\tthis._display.moveTo(0, 0);\n\t\t\tthis._display.lineTo(w, 0);\n\t\t}\n\t\telse {\n\t\t\tlet step = gap + strokeWidth;\n\t\t\tlet count = h / step;\n\n\t\t\tfor (let i = -count; i < count * 2; i++) {\n\t\t\t\tconst y = Math.round(i * step - step / 2) + 0.5;\n\t\t\t\tthis._display.moveTo(-w, y);\n\t\t\t\tthis._display.lineTo(w * 2, y);\n\t\t\t}\n\t\t}\n\n\t\tthis._display.lineStyle(strokeWidth, this.get(\"color\"), this.get(\"colorOpacity\"));\n\n\t\tlet strokeDasharray = this.get(\"strokeDasharray\");\n\t\tif ($type.isNumber(strokeDasharray)) {\n\t\t\tif (strokeDasharray < 0.5) {\n\t\t\t\tstrokeDasharray = [0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrokeDasharray = [strokeDasharray]\n\t\t\t}\n\t\t}\n\t\tthis._display.setLineDash(strokeDasharray as number[]);\n\n\t\tconst strokeDashoffset = this.get(\"strokeDashoffset\");\n\t\tif (strokeDashoffset) {\n\t\t\tthis._display.setLineDashOffset(strokeDashoffset);\n\t\t}\n\n\t\tthis._display.endStroke();\n\t}\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAA2C,WAAW;AACtE,OAAO,KAAKC,KAAK,MAAM,kBAAkB;AAgBzC;;;;;AAKA,OAAM,MAAOC,WAAY,SAAQF,OAAO;EAQhCG,cAAcA,CAAA;IACpB,KAAK,CAACA,cAAc,EAAE;IAEtB,IAAI,IAAI,CAACC,OAAO,CAAC,KAAK,CAAC,EAAE;MACxB,IAAI,CAACC,MAAM,GAAG,IAAI;;EAEpB;EAEUC,KAAKA,CAAA;IACd,KAAK,CAACA,KAAK,EAAE;IAEb,MAAMC,CAAC,GAAG,IAAI,CAACC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC;IAChC,MAAMC,CAAC,GAAG,IAAI,CAACD,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC;IACjC,MAAME,GAAG,GAAG,IAAI,CAACF,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;IAC9B,MAAMG,WAAW,GAAG,IAAI,CAACH,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;IAE9C,IAAI,CAACE,GAAG,EAAE;MACT,IAAI,CAACE,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MAC1B,IAAI,CAACD,QAAQ,CAACE,MAAM,CAACP,CAAC,EAAE,CAAC,CAAC;KAC1B,MACI;MACJ,IAAIQ,IAAI,GAAGL,GAAG,GAAGC,WAAW;MAC5B,IAAIK,KAAK,GAAGP,CAAC,GAAGM,IAAI;MAEpB,KAAK,IAAIE,CAAC,GAAG,CAACD,KAAK,EAAEC,CAAC,GAAGD,KAAK,GAAG,CAAC,EAAEC,CAAC,EAAE,EAAE;QACxC,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,GAAGF,IAAI,GAAGA,IAAI,GAAG,CAAC,CAAC,GAAG,GAAG;QAC/C,IAAI,CAACH,QAAQ,CAACC,MAAM,CAAC,CAACN,CAAC,EAAEW,CAAC,CAAC;QAC3B,IAAI,CAACN,QAAQ,CAACE,MAAM,CAACP,CAAC,GAAG,CAAC,EAAEW,CAAC,CAAC;;;IAIhC,IAAI,CAACN,QAAQ,CAACS,SAAS,CAACV,WAAW,EAAE,IAAI,CAACH,GAAG,CAAC,OAAO,CAAC,EAAE,IAAI,CAACA,GAAG,CAAC,cAAc,CAAC,CAAC;IAEjF,IAAIc,eAAe,GAAG,IAAI,CAACd,GAAG,CAAC,iBAAiB,CAAC;IACjD,IAAIP,KAAK,CAACsB,QAAQ,CAACD,eAAe,CAAC,EAAE;MACpC,IAAIA,eAAe,GAAG,GAAG,EAAE;QAC1BA,eAAe,GAAG,CAAC,CAAC,CAAC;OACrB,MACI;QACJA,eAAe,GAAG,CAACA,eAAe,CAAC;;;IAGrC,IAAI,CAACV,QAAQ,CAACY,WAAW,CAACF,eAA2B,CAAC;IAEtD,MAAMG,gBAAgB,GAAG,IAAI,CAACjB,GAAG,CAAC,kBAAkB,CAAC;IACrD,IAAIiB,gBAAgB,EAAE;MACrB,IAAI,CAACb,QAAQ,CAACc,iBAAiB,CAACD,gBAAgB,CAAC;;IAGlD,IAAI,CAACb,QAAQ,CAACe,SAAS,EAAE;EAC1B;;AArDAC,MAAA,CAAAC,cAAA,CAAA3B,WAAA;;;;SAAkC;;AAClC0B,MAAA,CAAAC,cAAA,CAAA3B,WAAA;;;;SAA0CF,OAAO,CAAC8B,UAAU,CAACC,MAAM,CAAC,CAAC7B,WAAW,CAAC8B,SAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}