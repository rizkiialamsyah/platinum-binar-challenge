{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $array from \"./Array\";\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport class DisposerClass {\n  /**\r\n   * Constructor.\r\n   */\n  constructor() {\n    /**\r\n     * Is object disposed?\r\n     */\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._disposed = false;\n  }\n  /**\r\n   * Checks if object is disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n  isDisposed() {\n    return this._disposed;\n  }\n  /**\r\n   * Disposes the object.\r\n   */\n  dispose() {\n    if (!this._disposed) {\n      this._disposed = true;\n      this._dispose();\n    }\n  }\n}\n/**\r\n * A class for creating an IDisposer.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport class Disposer {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param dispose  Function that disposes object\r\n   */\n  constructor(dispose) {\n    /**\r\n     * Is object disposed?\r\n     */\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * Method that disposes the object.\r\n     */\n    Object.defineProperty(this, \"_dispose\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._disposed = false;\n    this._dispose = dispose;\n  }\n  /**\r\n   * Checks if object is disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n  isDisposed() {\n    return this._disposed;\n  }\n  /**\r\n   * Disposes the object.\r\n   */\n  dispose() {\n    if (!this._disposed) {\n      this._disposed = true;\n      this._dispose();\n    }\n  }\n}\n/**\r\n * This can be extended by other classes to add a `_disposers` property.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport class ArrayDisposer extends DisposerClass {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_disposers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n  }\n  _dispose() {\n    $array.each(this._disposers, x => {\n      x.dispose();\n    });\n  }\n}\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport class MultiDisposer extends DisposerClass {\n  constructor(disposers) {\n    super();\n    Object.defineProperty(this, \"_disposers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._disposers = disposers;\n  }\n  _dispose() {\n    $array.each(this._disposers, x => {\n      x.dispose();\n    });\n  }\n}\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport class MutableValueDisposer extends DisposerClass {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * Current disposer.\r\n     */\n    Object.defineProperty(this, \"_disposer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * Current value.\r\n     */\n    Object.defineProperty(this, \"_value\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  _dispose() {\n    if (this._disposer != null) {\n      this._disposer.dispose();\n      this._disposer = undefined;\n    }\n  }\n  /**\r\n   * Returns current value.\r\n   *\r\n   * @return Value\r\n   */\n  get() {\n    return this._value;\n  }\n  /**\r\n   * Sets value and disposes previous disposer if it was set.\r\n   *\r\n   * @param value     New value\r\n   * @param disposer  Disposer\r\n   */\n  set(value, disposer) {\n    if (this._disposer != null) {\n      this._disposer.dispose();\n    }\n    this._disposer = disposer;\n    this._value = value;\n  }\n  /**\r\n   * Resets the disposer value.\r\n   */\n  reset() {\n    this.set(undefined, undefined);\n  }\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport class CounterDisposer extends Disposer {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * [_counter description]\r\n     *\r\n     * @todo Description\r\n     */\n    Object.defineProperty(this, \"_counter\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n  }\n  /**\r\n   * [increment description]\r\n   *\r\n   * @todo Description\r\n   */\n  increment() {\n    // TODO throw an error if it is disposed\n    ++this._counter;\n    // TODO make this more efficient\n    return new Disposer(() => {\n      --this._counter;\n      if (this._counter === 0) {\n        this.dispose();\n      }\n    });\n  }\n}","map":{"version":3,"names":["$array","DisposerClass","constructor","Object","defineProperty","_disposed","isDisposed","dispose","_dispose","Disposer","ArrayDisposer","each","_disposers","x","MultiDisposer","disposers","MutableValueDisposer","_disposer","undefined","get","_value","set","value","disposer","reset","CounterDisposer","increment","_counter"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\util\\Disposer.ts"],"sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport * as $array from \"./Array\";\nimport type { Optional } from \"./Type\";\n\n/**\n * Defines interface for disposable objects.\n *\n * @ignore Exclude from docs\n */\nexport interface IDisposer {\n\tisDisposed(): boolean;\n\tdispose(): void;\n}\n\n/**\n * A base class for disposable objects.\n *\n * @ignore Exclude from docs\n */\nexport abstract class DisposerClass implements IDisposer {\n\n\t/**\n\t * Is object disposed?\n\t */\n\tprivate _disposed: boolean;\n\n\t/**\n\t * Constructor.\n\t */\n\tconstructor() {\n\t\tthis._disposed = false;\n\t}\n\n\t/**\n\t * Checks if object is disposed.\n\t *\n\t * @return Disposed?\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\tprotected abstract _dispose(): void;\n\n\t/**\n\t * Disposes the object.\n\t */\n\tpublic dispose(): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._dispose();\n\t\t}\n\t}\n}\n\n/**\n * A class for creating an IDisposer.\n *\n * @ignore Exclude from docs\n */\nexport class Disposer implements IDisposer {\n\n\t/**\n\t * Is object disposed?\n\t */\n\tprivate _disposed: boolean;\n\n\t/**\n\t * Method that disposes the object.\n\t */\n\tprivate _dispose: () => void;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param dispose  Function that disposes object\n\t */\n\tconstructor(dispose: () => void) {\n\t\tthis._disposed = false;\n\t\tthis._dispose = dispose;\n\t}\n\n\t/**\n\t * Checks if object is disposed.\n\t *\n\t * @return Disposed?\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Disposes the object.\n\t */\n\tpublic dispose(): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._dispose();\n\t\t}\n\t}\n}\n\n/**\n * This can be extended by other classes to add a `_disposers` property.\n *\n * @ignore Exclude from docs\n */\nexport class ArrayDisposer extends DisposerClass {\n\tprotected _disposers: Array<IDisposer> = [];\n\n\tprotected _dispose(): void {\n\t\t$array.each(this._disposers, (x) => {\n\t\t\tx.dispose();\n\t\t});\n\t}\n}\n\n/**\n * A collection of related disposers that can be disposed in one go.\n *\n * @ignore Exclude from docs\n */\nexport class MultiDisposer extends DisposerClass {\n\tprotected _disposers: Array<IDisposer>;\n\n\tconstructor(disposers: Array<IDisposer>) {\n\t\tsuper();\n\t\tthis._disposers = disposers;\n\t}\n\n\tprotected _dispose(): void {\n\t\t$array.each(this._disposers, (x) => {\n\t\t\tx.dispose();\n\t\t});\n\t}\n}\n\n/**\n * A special kind of Disposer that has attached value set.\n *\n * If a new value is set using `set()` method, the old disposer value is\n * disposed.\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class MutableValueDisposer<T extends IDisposer> extends DisposerClass {\n\n\t/**\n\t * Current disposer.\n\t */\n\tprivate _disposer: Optional<IDisposer>;\n\n\t/**\n\t * Current value.\n\t */\n\tprivate _value: Optional<T>;\n\n\tprotected _dispose(): void {\n\t\tif (this._disposer != null) {\n\t\t\tthis._disposer.dispose();\n\t\t\tthis._disposer = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns current value.\n\t *\n\t * @return Value\n\t */\n\tpublic get(): Optional<T> {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * Sets value and disposes previous disposer if it was set.\n\t *\n\t * @param value     New value\n\t * @param disposer  Disposer\n\t */\n\tpublic set(value: Optional<T>, disposer: Optional<IDisposer>): void {\n\t\tif (this._disposer != null) {\n\t\t\tthis._disposer.dispose();\n\t\t}\n\n\t\tthis._disposer = disposer;\n\t\tthis._value = value;\n\t}\n\n\t/**\n\t * Resets the disposer value.\n\t */\n\tpublic reset(): void {\n\t\tthis.set(undefined, undefined);\n\t}\n\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class CounterDisposer extends Disposer {\n\n\t/**\n\t * [_counter description]\n\t *\n\t * @todo Description\n\t */\n\tprivate _counter: number = 0;\n\n\t/**\n\t * [increment description]\n\t *\n\t * @todo Description\n\t */\n\tpublic increment() {\n\t\t// TODO throw an error if it is disposed\n\t\t++this._counter;\n\n\t\t// TODO make this more efficient\n\t\treturn new Disposer(() => {\n\t\t\t--this._counter;\n\n\t\t\tif (this._counter === 0) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}