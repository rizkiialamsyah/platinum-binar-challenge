{"ast":null,"code":"import { Entity } from \"../../util/Entity\";\n/**\r\n * Base class for patterns.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\nexport class Pattern extends Entity {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this._root._renderer.makeGraphics()\n    });\n    Object.defineProperty(this, \"_backgroundDisplay\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this._root._renderer.makeGraphics()\n    });\n    Object.defineProperty(this, \"_clear\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_pattern\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  _afterNew() {\n    // Applying themes because pattern will not have parent\n    super._afterNewApplyThemes();\n  }\n  get pattern() {\n    return this._pattern;\n  }\n  _draw() {}\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isDirty(\"repetition\") || this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\") || this.isDirty(\"color\") || this.isDirty(\"strokeWidth\") || this.isDirty(\"strokeDasharray\") || this.isDirty(\"strokeDashoffset\") || this.isDirty(\"colorOpacity\") || this.isDirty(\"fill\") || this.isDirty(\"fillOpacity\")) {\n      this._clear = true;\n    }\n  }\n  _changed() {\n    super._changed();\n    if (this._clear) {\n      const repetition = this.get(\"repetition\", \"\");\n      const width = this.get(\"width\", 100);\n      const height = this.get(\"height\", 100);\n      const fill = this.get(\"fill\");\n      const fillOpacity = this.get(\"fillOpacity\", 1);\n      this._display.clear();\n      this._backgroundDisplay.clear();\n      if (fill && fillOpacity > 0) {\n        this._backgroundDisplay.beginFill(fill, fillOpacity);\n        this._backgroundDisplay.drawRect(0, 0, width, height);\n        this._backgroundDisplay.endFill();\n      }\n      this._display.angle = this.get(\"rotation\", 0);\n      //this._display.pivot = { x: width / 2, y: height / 2 };\n      this._draw();\n      this._pattern = this._root._renderer.createPattern(this._display, this._backgroundDisplay, repetition, width, height);\n    }\n  }\n}\nObject.defineProperty(Pattern, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Pattern\"\n});\nObject.defineProperty(Pattern, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Entity.classNames.concat([Pattern.className])\n});","map":{"version":3,"names":["Entity","Pattern","constructor","Object","defineProperty","_root","_renderer","makeGraphics","_afterNew","_afterNewApplyThemes","pattern","_pattern","_draw","_beforeChanged","isDirty","_clear","_changed","repetition","get","width","height","fill","fillOpacity","_display","clear","_backgroundDisplay","beginFill","drawRect","endFill","angle","createPattern","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\patterns\\Pattern.ts"],"sourcesContent":["import type { IGraphics, IPattern } from \"../backend/Renderer\";\nimport type { Color } from \"../../util/Color\";\n\nimport { Entity, IEntitySettings, IEntityPrivate, IEntityEvents } from \"../../util/Entity\";\n\nexport interface IPatternSettings extends IEntitySettings {\n\n\t/**\n\t * Rotation of patterm in degrees. Supported values: -90 to 90.\n\t *\n\t * @default 0\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Rotation} for more info\n\t */\n\trotation?: number;\n\n\t/**\n\t * How pattern tiles are repeated when filling the area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Repetition} for more info\n\t */\n\trepetition?: \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"no-repeat\";\n\n\t/**\n\t * Width of the pattern tile, in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Sizing_patterns} for more info\n\t */\n\twidth?: number;\n\n\t/**\n\t * Width of the pattern tile, in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Sizing_patterns} for more info\n\t */\n\theight?: number;\n\n\t/**\n\t * Color of the pattern shape.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tcolor?: Color;\n\n\t/**\n\t * Opacity of the pattern shape.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tcolorOpacity?: number;\n\n\t/**\n\t * Width of the pattern's line elements.\n\t *\n\t * @default 1\n\t */\n\tstrokeWidth?: number;\n\n\t/**\n\t * Stroke (border or line) dash settings.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Dashed_lines} for more information\n\t */\n\tstrokeDasharray?: number[] | number;\n\n\t/**\n\t * Stroke (border or line) dash offset.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Dashed_lines} for more information\n\t */\n\tstrokeDashoffset?: number;\n\n\t/**\n\t * Color to fill gaps between pattern shapes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tfill?: Color;\n\n\t/**\n\t * Opacity of the fill for gaps between pattern shapes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tfillOpacity?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tcolorInherited?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tfillInherited?: boolean;\n}\n\nexport interface IPatternPrivate extends IEntityPrivate {\n}\n\nexport interface IPatternEvents extends IEntityEvents {\n}\n\n/**\n * Base class for patterns.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class Pattern extends Entity {\n\tprotected _afterNew() {\n\t\t// Applying themes because pattern will not have parent\n\t\tsuper._afterNewApplyThemes();\n\t}\n\n\tdeclare public _settings: IPatternSettings;\n\tdeclare public _privateSettings: IPatternPrivate;\n\n\tpublic static className: string = \"Pattern\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([Pattern.className]);\n\n\tpublic _display: IGraphics = this._root._renderer.makeGraphics();\n\tpublic _backgroundDisplay: IGraphics = this._root._renderer.makeGraphics();\n\n\tprotected _clear = false;\n\n\tprotected _pattern: IPattern | undefined;\n\n\tpublic get pattern(): IPattern | undefined {\n\t\treturn this._pattern;\n\t}\n\n\tprotected _draw(): void { }\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"repetition\") || this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\") || this.isDirty(\"color\") || this.isDirty(\"strokeWidth\") || this.isDirty(\"strokeDasharray\") || this.isDirty(\"strokeDashoffset\") || this.isDirty(\"colorOpacity\") || this.isDirty(\"fill\") || this.isDirty(\"fillOpacity\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tconst repetition = this.get(\"repetition\", \"\");\n\t\t\tconst width = this.get(\"width\", 100);\n\t\t\tconst height = this.get(\"height\", 100);\n\t\t\tconst fill = this.get(\"fill\");\n\t\t\tconst fillOpacity = this.get(\"fillOpacity\", 1);\n\n\t\t\tthis._display.clear();\n\t\t\tthis._backgroundDisplay.clear();\n\n\t\t\tif (fill && (fillOpacity > 0)) {\n\t\t\t\tthis._backgroundDisplay.beginFill(fill, fillOpacity);\n\t\t\t\tthis._backgroundDisplay.drawRect(0, 0, width, height);\n\t\t\t\tthis._backgroundDisplay.endFill();\n\t\t\t}\n\n\t\t\tthis._display.angle = this.get(\"rotation\", 0);\n\t\t\t//this._display.pivot = { x: width / 2, y: height / 2 };\n\t\t\tthis._draw();\n\n\t\t\tthis._pattern = this._root._renderer.createPattern(this._display, this._backgroundDisplay, repetition, width, height);\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}