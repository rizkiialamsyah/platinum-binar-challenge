{"ast":null,"code":"import { Text } from \"./Text\";\nimport * as $math from \"../util/Math\";\n/**\r\n * @ignore\r\n */\nexport class RadialText extends Text {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this._root._renderer.makeRadialText(\"\", this.textStyle)\n    });\n  }\n  _afterNew() {\n    super._afterNew();\n  }\n  _beforeChanged() {\n    super._beforeChanged();\n    this._display.clear();\n    if (this.isDirty(\"textType\")) {\n      this._display.textType = this.get(\"textType\");\n      this.markDirtyBounds();\n    }\n    if (this.isDirty(\"radius\")) {\n      this._display.radius = this.get(\"radius\");\n      this.markDirtyBounds();\n    }\n    if (this.isDirty(\"startAngle\")) {\n      this._display.startAngle = (this.get(\"startAngle\", 0) + 90) * $math.RADIANS;\n      this.markDirtyBounds();\n    }\n    if (this.isDirty(\"inside\")) {\n      this._display.inside = this.get(\"inside\");\n      this.markDirtyBounds();\n    }\n    if (this.isDirty(\"orientation\")) {\n      this._display.orientation = this.get(\"orientation\");\n      this.markDirtyBounds();\n    }\n    if (this.isDirty(\"kerning\")) {\n      this._display.kerning = this.get(\"kerning\");\n      this.markDirtyBounds();\n    }\n  }\n}\nObject.defineProperty(RadialText, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"RadialText\"\n});\nObject.defineProperty(RadialText, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Text.classNames.concat([RadialText.className])\n});","map":{"version":3,"names":["Text","$math","RadialText","constructor","Object","defineProperty","_root","_renderer","makeRadialText","textStyle","_afterNew","_beforeChanged","_display","clear","isDirty","textType","get","markDirtyBounds","radius","startAngle","RADIANS","inside","orientation","kerning","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\RadialText.ts"],"sourcesContent":["import { Text, ITextSettings, ITextPrivate } from \"./Text\";\nimport * as $math from \"../util/Math\";\nimport type { IRadialText } from \"./backend/Renderer\";\n\n/**\n * @ignore\n */\nexport interface IRadialTextSettings extends ITextSettings {\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\tradius?: number;\n\tstartAngle?: number;\n\tinside?: boolean;\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\tkerning?: number;\n}\n\n/**\n * @ignore\n */\nexport interface IRadialTextPrivate extends ITextPrivate {\n}\n\n/**\n * @ignore\n */\nexport class RadialText extends Text {\n\n\tdeclare public _settings: IRadialTextSettings;\n\tdeclare public _privateSettings: IRadialTextPrivate;\n\n\tpublic _display: IRadialText = this._root._renderer.makeRadialText(\"\", this.textStyle);\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t}\n\n\tpublic static className: string = \"RadialText\";\n\tpublic static classNames: Array<string> = Text.classNames.concat([RadialText.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tthis._display.clear();\n\n\t\tif (this.isDirty(\"textType\")) {\n\t\t\tthis._display.textType = this.get(\"textType\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"radius\")) {\n\t\t\tthis._display.radius = this.get(\"radius\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"startAngle\")) {\n\t\t\tthis._display.startAngle = (this.get(\"startAngle\", 0)! + 90) * $math.RADIANS;\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"inside\")) {\n\t\t\tthis._display.inside = this.get(\"inside\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"orientation\")) {\n\t\t\tthis._display.orientation = this.get(\"orientation\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"kerning\")) {\n\t\t\tthis._display.kerning = this.get(\"kerning\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAqC,QAAQ;AAC1D,OAAO,KAAKC,KAAK,MAAM,cAAc;AAqBrC;;;AAGA,OAAM,MAAOC,UAAW,SAAQF,IAAI;EAApCG,YAAA;;IAKCC,MAAA,CAAAC,cAAA;;;;aAA+B,IAAI,CAACC,KAAK,CAACC,SAAS,CAACC,cAAc,CAAC,EAAE,EAAE,IAAI,CAACC,SAAS;;EA6CtF;EA3CWC,SAASA,CAAA;IAClB,KAAK,CAACA,SAAS,EAAE;EAClB;EAKOC,cAAcA,CAAA;IACpB,KAAK,CAACA,cAAc,EAAE;IAEtB,IAAI,CAACC,QAAQ,CAACC,KAAK,EAAE;IAErB,IAAI,IAAI,CAACC,OAAO,CAAC,UAAU,CAAC,EAAE;MAC7B,IAAI,CAACF,QAAQ,CAACG,QAAQ,GAAG,IAAI,CAACC,GAAG,CAAC,UAAU,CAAC;MAC7C,IAAI,CAACC,eAAe,EAAE;;IAGvB,IAAI,IAAI,CAACH,OAAO,CAAC,QAAQ,CAAC,EAAE;MAC3B,IAAI,CAACF,QAAQ,CAACM,MAAM,GAAG,IAAI,CAACF,GAAG,CAAC,QAAQ,CAAC;MACzC,IAAI,CAACC,eAAe,EAAE;;IAGvB,IAAI,IAAI,CAACH,OAAO,CAAC,YAAY,CAAC,EAAE;MAC/B,IAAI,CAACF,QAAQ,CAACO,UAAU,GAAG,CAAC,IAAI,CAACH,GAAG,CAAC,YAAY,EAAE,CAAC,CAAE,GAAG,EAAE,IAAIf,KAAK,CAACmB,OAAO;MAC5E,IAAI,CAACH,eAAe,EAAE;;IAGvB,IAAI,IAAI,CAACH,OAAO,CAAC,QAAQ,CAAC,EAAE;MAC3B,IAAI,CAACF,QAAQ,CAACS,MAAM,GAAG,IAAI,CAACL,GAAG,CAAC,QAAQ,CAAC;MACzC,IAAI,CAACC,eAAe,EAAE;;IAGvB,IAAI,IAAI,CAACH,OAAO,CAAC,aAAa,CAAC,EAAE;MAChC,IAAI,CAACF,QAAQ,CAACU,WAAW,GAAG,IAAI,CAACN,GAAG,CAAC,aAAa,CAAC;MACnD,IAAI,CAACC,eAAe,EAAE;;IAGvB,IAAI,IAAI,CAACH,OAAO,CAAC,SAAS,CAAC,EAAE;MAC5B,IAAI,CAACF,QAAQ,CAACW,OAAO,GAAG,IAAI,CAACP,GAAG,CAAC,SAAS,CAAC;MAC3C,IAAI,CAACC,eAAe,EAAE;;EAExB;;AArCAb,MAAA,CAAAC,cAAA,CAAAH,UAAA;;;;SAAkC;;AAClCE,MAAA,CAAAC,cAAA,CAAAH,UAAA;;;;SAA0CF,IAAI,CAACwB,UAAU,CAACC,MAAM,CAAC,CAACvB,UAAU,CAACwB,SAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}