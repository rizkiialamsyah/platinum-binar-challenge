{"ast":null,"code":"import { Children } from \"../util/Children\";\nimport { Percent } from \"../util/Percent\";\nimport { Sprite } from \"./Sprite\";\nimport { Rectangle } from \"./Rectangle\";\nimport { HorizontalLayout } from \"./HorizontalLayout\";\nimport { VerticalLayout } from \"./VerticalLayout\";\nimport { GridLayout } from \"./GridLayout\";\nimport { populateString } from \"../util/PopulateString\";\nimport * as $array from \"../util/Array\";\nimport * as $type from \"../util/Type\";\nimport * as $utils from \"../util/Utils\";\n/**\r\n * A basic element that can have child elements, maintain their layout, and\r\n * have a background.\r\n *\r\n * It can have any [[Sprite]] element as a child, from very basic shapes, to\r\n * full-fledged charts.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info\r\n * @important\r\n */\nexport class Container extends Sprite {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this._root._renderer.makeContainer()\n    });\n    Object.defineProperty(this, \"_childrenDisplay\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this._root._renderer.makeContainer()\n    });\n    /**\r\n     * List of Container's child elements.\r\n     */\n    Object.defineProperty(this, \"children\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Children(this)\n    });\n    Object.defineProperty(this, \"_percentageSizeChildren\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"_percentagePositionChildren\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"_prevWidth\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_prevHeight\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_contentWidth\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_contentHeight\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_contentMask\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_vsbd0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_vsbd1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  _afterNew() {\n    super._afterNew();\n    this._display.addChild(this._childrenDisplay);\n  }\n  _dispose() {\n    $array.eachReverse(this.allChildren(), child => {\n      child.dispose();\n    });\n    if (this.getPrivate(\"htmlElement\")) {\n      this._root._removeHTMLContent(this);\n    }\n    super._dispose();\n  }\n  _changed() {\n    super._changed();\n    if (this.isDirty(\"interactiveChildren\")) {\n      this._display.interactiveChildren = this.get(\"interactiveChildren\", false);\n    }\n    if (this.isDirty(\"layout\")) {\n      this._prevWidth = 0;\n      this._prevHeight = 0;\n      this.markDirtyBounds();\n      if (this._prevSettings.layout) {\n        this.children.each(child => {\n          child.removePrivate(\"x\");\n          child.removePrivate(\"y\");\n        });\n      }\n    }\n    if (this.isDirty(\"paddingTop\") || this.isDirty(\"paddingBottom\") || this.isDirty(\"paddingLeft\") || this.isDirty(\"paddingRight\")) {\n      this.children.each(child => {\n        child.markDirtyPosition();\n      });\n    }\n    if (this.isDirty(\"maskContent\")) {\n      const childrenDisplay = this._childrenDisplay;\n      let contentMask = this._contentMask;\n      if (this.get(\"maskContent\")) {\n        if (!contentMask) {\n          contentMask = Rectangle.new(this._root, {\n            x: -.5,\n            y: -.5,\n            width: this.width() + 1,\n            height: this.height() + 1\n          });\n          this._contentMask = contentMask;\n          childrenDisplay.addChildAt(contentMask._display, 0);\n          childrenDisplay.mask = contentMask._display;\n        }\n      } else {\n        if (contentMask) {\n          childrenDisplay.removeChild(contentMask._display);\n          childrenDisplay.mask = null;\n          contentMask.dispose();\n          this._contentMask = undefined;\n        }\n      }\n    }\n  }\n  _updateSize() {\n    super._updateSize();\n    $array.each(this._percentageSizeChildren, child => {\n      child._updateSize();\n    });\n    $array.each(this._percentagePositionChildren, child => {\n      child.markDirtyPosition();\n      child._updateSize();\n    });\n    this.updateBackground();\n  }\n  updateBackground() {\n    const background = this.get(\"background\");\n    let bounds = this._localBounds;\n    if (bounds && !this.isHidden()) {\n      let x = bounds.left;\n      let y = bounds.top;\n      let w = bounds.right - x;\n      let h = bounds.bottom - y;\n      let maxWidth = this.get(\"maxWidth\");\n      let maxHeight = this.get(\"maxHeight\");\n      if (maxHeight) {\n        if (h > maxHeight) {\n          h = maxHeight;\n        }\n      }\n      if (maxWidth) {\n        if (w > maxWidth) {\n          w = maxWidth;\n        }\n      }\n      let width = this.width();\n      let height = this.height();\n      if (background) {\n        background.setAll({\n          width: w,\n          height: h,\n          x: x,\n          y: y\n        });\n        if (this._display.interactive) {\n          background._display.interactive = true;\n        }\n      }\n      const contentMask = this._contentMask;\n      if (contentMask) {\n        contentMask.setAll({\n          width: width + 1,\n          height: height + 1\n        });\n      }\n      const verticalScrollbar = this.get(\"verticalScrollbar\");\n      if (verticalScrollbar) {\n        verticalScrollbar.set(\"height\", height);\n        verticalScrollbar.set(\"x\", width - verticalScrollbar.width() - verticalScrollbar.get(\"marginRight\", 0));\n        verticalScrollbar.set(\"end\", verticalScrollbar.get(\"start\", 0) + height / this._contentHeight);\n        const bg = verticalScrollbar.get(\"background\");\n        if (bg) {\n          bg.setAll({\n            width: verticalScrollbar.width(),\n            height: height\n          });\n        }\n        let visible = true;\n        if (this._contentHeight <= height) {\n          visible = false;\n        }\n        verticalScrollbar.setPrivate(\"visible\", visible);\n      }\n    }\n  }\n  _applyThemes() {\n    if (super._applyThemes()) {\n      this.eachChildren(child => {\n        child._applyThemes();\n      });\n      return true;\n    } else {\n      return false;\n    }\n  }\n  _applyState(name) {\n    super._applyState(name);\n    if (this.get(\"setStateOnChildren\")) {\n      this.eachChildren(child => {\n        child.states.apply(name);\n      });\n    }\n  }\n  _applyStateAnimated(name, duration) {\n    super._applyStateAnimated(name, duration);\n    if (this.get(\"setStateOnChildren\")) {\n      this.eachChildren(child => {\n        child.states.applyAnimate(name, duration);\n      });\n    }\n  }\n  /**\r\n   * Returns container's inner width (width without padding) in pixels.\r\n   *\r\n   * @return Inner width (px)\r\n   */\n  innerWidth() {\n    return this.width() - this.get(\"paddingRight\", 0) - this.get(\"paddingLeft\", 0);\n  }\n  /**\r\n   * Returns container's inner height (height without padding) in pixels.\r\n   *\r\n   * @return Inner height (px)\r\n   */\n  innerHeight() {\n    return this.height() - this.get(\"paddingTop\", 0) - this.get(\"paddingBottom\", 0);\n  }\n  _getBounds() {\n    let width = this.get(\"width\");\n    let height = this.get(\"height\");\n    let pWidth = this.getPrivate(\"width\");\n    let pHeight = this.getPrivate(\"height\");\n    let bounds = {\n      left: 0,\n      top: 0,\n      right: this.width(),\n      bottom: this.height()\n    };\n    let layout = this.get(\"layout\");\n    let horizontal = false;\n    let vertical = false;\n    if (layout instanceof HorizontalLayout || layout instanceof GridLayout) {\n      horizontal = true;\n    }\n    if (layout instanceof VerticalLayout) {\n      vertical = true;\n    }\n    if ((width != null || pWidth != null) && (height != null || pHeight != null) && !this.get(\"verticalScrollbar\")) {\n      // void\n    } else {\n      let m = Number.MAX_VALUE;\n      let l = m;\n      let r = -m;\n      let t = m;\n      let b = -m;\n      const paddingLeft = this.get(\"paddingLeft\", 0);\n      const paddingTop = this.get(\"paddingTop\", 0);\n      const paddingRight = this.get(\"paddingRight\", 0);\n      const paddingBottom = this.get(\"paddingBottom\", 0);\n      this.children.each(child => {\n        if (child.get(\"position\") != \"absolute\" && child.get(\"isMeasured\")) {\n          let childBounds = child.adjustedLocalBounds();\n          let childX = child.x();\n          let childY = child.y();\n          let cl = childX + childBounds.left;\n          let cr = childX + childBounds.right;\n          let ct = childY + childBounds.top;\n          let cb = childY + childBounds.bottom;\n          if (horizontal) {\n            cl -= child.get(\"marginLeft\", 0);\n            cr += child.get(\"marginRight\", 0);\n          }\n          if (vertical) {\n            ct -= child.get(\"marginTop\", 0);\n            cb += child.get(\"marginBottom\", 0);\n          }\n          if (cl < l) {\n            l = cl;\n          }\n          if (cr > r) {\n            r = cr;\n          }\n          if (ct < t) {\n            t = ct;\n          }\n          if (cb > b) {\n            b = cb;\n          }\n        }\n      });\n      if (l == m) {\n        l = 0;\n      }\n      if (r == -m) {\n        r = 0;\n      }\n      if (t == m) {\n        t = 0;\n      }\n      if (b == -m) {\n        b = 0;\n      }\n      bounds.left = l - paddingLeft;\n      bounds.top = t - paddingTop;\n      bounds.right = r + paddingRight;\n      bounds.bottom = b + paddingBottom;\n    }\n    this._contentWidth = bounds.right - bounds.left;\n    this._contentHeight = bounds.bottom - bounds.top;\n    if ($type.isNumber(width)) {\n      bounds.left = 0;\n      bounds.right = width;\n    }\n    if ($type.isNumber(pWidth)) {\n      bounds.left = 0;\n      bounds.right = pWidth;\n    }\n    if ($type.isNumber(height)) {\n      bounds.top = 0;\n      bounds.bottom = height;\n    }\n    if ($type.isNumber(pHeight)) {\n      bounds.top = 0;\n      bounds.bottom = pHeight;\n    }\n    this._localBounds = bounds;\n  }\n  _updateBounds() {\n    const layout = this.get(\"layout\");\n    if (layout) {\n      layout.updateContainer(this);\n    }\n    super._updateBounds();\n    this.updateBackground();\n  }\n  /**\r\n   * @ignore\r\n   */\n  markDirty() {\n    super.markDirty();\n    this._root._addDirtyParent(this);\n  }\n  _prepareChildren() {\n    const innerWidth = this.innerWidth();\n    const innerHeight = this.innerHeight();\n    if (innerWidth != this._prevWidth || innerHeight != this._prevHeight) {\n      let layout = this.get(\"layout\");\n      let horizontal = false;\n      let vertical = false;\n      if (layout) {\n        if (layout instanceof HorizontalLayout || layout instanceof GridLayout) {\n          horizontal = true;\n        }\n        if (layout instanceof VerticalLayout) {\n          vertical = true;\n        }\n      }\n      $array.each(this._percentageSizeChildren, child => {\n        if (!horizontal) {\n          let width = child.get(\"width\");\n          if (width instanceof Percent) {\n            child.setPrivate(\"width\", width.value * innerWidth);\n          }\n        }\n        if (!vertical) {\n          let height = child.get(\"height\");\n          if (height instanceof Percent) {\n            child.setPrivate(\"height\", height.value * innerHeight);\n          }\n        }\n      });\n      $array.each(this._percentagePositionChildren, child => {\n        child.markDirtyPosition();\n        child.markDirtyBounds();\n      });\n      this._prevWidth = innerWidth;\n      this._prevHeight = innerHeight;\n      this._sizeDirty = true;\n      this.updateBackground();\n    }\n    this._handleStates();\n  }\n  _updateChildren() {\n    if (this.isDirty(\"html\")) {\n      const html = this.get(\"html\");\n      if (html && html !== \"\") {\n        this._root._setHTMLContent(this, populateString(this, this.get(\"html\", \"\")));\n      } else {\n        this._root._removeHTMLContent(this);\n      }\n      this._root._positionHTMLElement(this);\n    }\n    if (this.isDirty(\"verticalScrollbar\")) {\n      const verticalScrollbar = this.get(\"verticalScrollbar\");\n      if (verticalScrollbar) {\n        verticalScrollbar._setParent(this);\n        verticalScrollbar.children.removeValue(verticalScrollbar.startGrip);\n        verticalScrollbar.children.removeValue(verticalScrollbar.endGrip);\n        this.set(\"maskContent\", true);\n        this.set(\"paddingRight\", verticalScrollbar.width() + verticalScrollbar.get(\"marginRight\", 0) + verticalScrollbar.get(\"marginLeft\", 0));\n        let background = this.get(\"background\");\n        if (!background) {\n          background = this.set(\"background\", Rectangle.new(this._root, {\n            themeTags: [\"background\"],\n            fillOpacity: 0,\n            fill: this._root.interfaceColors.get(\"alternativeBackground\")\n          }));\n        }\n        this._vsbd0 = this.events.on(\"wheel\", event => {\n          const wheelEvent = event.originalEvent;\n          // Ignore wheel event if it is happening on a non-chart element, e.g. if\n          // some page element is over the chart.\n          if ($utils.isLocalEvent(wheelEvent, this)) {\n            wheelEvent.preventDefault();\n          } else {\n            return;\n          }\n          let shiftY = wheelEvent.deltaY / 5000;\n          const start = verticalScrollbar.get(\"start\", 0);\n          const end = verticalScrollbar.get(\"end\", 1);\n          if (start + shiftY <= 0) {\n            shiftY = -start;\n          }\n          if (end + shiftY >= 1) {\n            shiftY = 1 - end;\n          }\n          if (start + shiftY >= 0 && end + shiftY <= 1) {\n            verticalScrollbar.set(\"start\", start + shiftY);\n            verticalScrollbar.set(\"end\", end + shiftY);\n          }\n        });\n        this._disposers.push(this._vsbd0);\n        this._vsbd1 = verticalScrollbar.events.on(\"rangechanged\", () => {\n          let h = this._contentHeight;\n          const childrenDisplay = this._childrenDisplay;\n          const contentMask = this._contentMask;\n          childrenDisplay.y = -verticalScrollbar.get(\"start\") * h;\n          childrenDisplay.markDirtyLayer();\n          if (contentMask) {\n            contentMask._display.y = -childrenDisplay.y;\n            childrenDisplay.mask = contentMask._display;\n          }\n        });\n        this._disposers.push(this._vsbd1);\n        this._display.addChild(verticalScrollbar._display);\n      } else {\n        const previous = this._prevSettings.verticalScrollbar;\n        if (previous) {\n          this._display.removeChild(previous._display);\n          if (this._vsbd0) {\n            this._vsbd0.dispose();\n          }\n          if (this._vsbd1) {\n            this._vsbd1.dispose();\n          }\n          const childrenDisplay = this._childrenDisplay;\n          childrenDisplay.y = 0;\n          this.setPrivate(\"height\", undefined);\n          this.set(\"maskContent\", false);\n          this.set(\"paddingRight\", undefined);\n        }\n      }\n    }\n    if (this.isDirty(\"background\")) {\n      // TODO maybe this should dispose ?\n      const previous = this._prevSettings[\"background\"];\n      if (previous) {\n        this._display.removeChild(previous._display);\n      }\n      const background = this.get(\"background\");\n      if (background instanceof Sprite) {\n        background.set(\"isMeasured\", false);\n        background._setParent(this);\n        this._display.addChildAt(background._display, 0);\n      }\n    }\n    if (this.isDirty(\"mask\")) {\n      const mask = this.get(\"mask\");\n      const previous = this._prevSettings[\"mask\"];\n      if (previous) {\n        this._display.removeChild(previous._display);\n        if (previous != mask) {\n          previous.dispose();\n        }\n      }\n      if (mask) {\n        const parent = mask.parent;\n        if (parent) {\n          parent.children.removeValue(mask);\n        }\n        mask._setParent(this);\n        this._display.addChildAt(mask._display, 0);\n        this._childrenDisplay.mask = mask._display;\n      }\n    }\n  }\n  _processTemplateField() {\n    super._processTemplateField();\n    this.children.each(child => {\n      child._processTemplateField();\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  walkChildren(f) {\n    this.children.each(child => {\n      if (child instanceof Container) {\n        child.walkChildren(f);\n      }\n      f(child);\n    });\n  }\n  eachChildren(f) {\n    const background = this.get(\"background\");\n    if (background) {\n      f(background);\n    }\n    const verticalScrollbar = this.get(\"verticalScrollbar\");\n    if (verticalScrollbar) {\n      f(verticalScrollbar);\n    }\n    const mask = this.get(\"mask\");\n    if (mask) {\n      f(mask);\n    }\n    this.children.values.forEach(child => {\n      f(child);\n    });\n  }\n  allChildren() {\n    const output = [];\n    this.eachChildren(x => {\n      output.push(x);\n    });\n    return output;\n  }\n  _setDataItem(dataItem) {\n    const updated = dataItem !== this._dataItem;\n    super._setDataItem(dataItem);\n    const html = this.get(\"html\", \"\");\n    if (html && html !== \"\" && updated) {\n      this._root._setHTMLContent(this, populateString(this, html));\n    }\n  }\n}\nObject.defineProperty(Container, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Container\"\n});\nObject.defineProperty(Container, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Sprite.classNames.concat([Container.className])\n});","map":{"version":3,"names":["Children","Percent","Sprite","Rectangle","HorizontalLayout","VerticalLayout","GridLayout","populateString","$array","$type","$utils","Container","constructor","Object","defineProperty","_root","_renderer","makeContainer","_afterNew","_display","addChild","_childrenDisplay","_dispose","eachReverse","allChildren","child","dispose","getPrivate","_removeHTMLContent","_changed","isDirty","interactiveChildren","get","_prevWidth","_prevHeight","markDirtyBounds","_prevSettings","layout","children","each","removePrivate","markDirtyPosition","childrenDisplay","contentMask","_contentMask","new","x","y","width","height","addChildAt","mask","removeChild","undefined","_updateSize","_percentageSizeChildren","_percentagePositionChildren","updateBackground","background","bounds","_localBounds","isHidden","left","top","w","right","h","bottom","maxWidth","maxHeight","setAll","interactive","verticalScrollbar","set","_contentHeight","bg","visible","setPrivate","_applyThemes","eachChildren","_applyState","name","states","apply","_applyStateAnimated","duration","applyAnimate","innerWidth","innerHeight","_getBounds","pWidth","pHeight","horizontal","vertical","m","Number","MAX_VALUE","l","r","t","b","paddingLeft","paddingTop","paddingRight","paddingBottom","childBounds","adjustedLocalBounds","childX","childY","cl","cr","ct","cb","_contentWidth","isNumber","_updateBounds","updateContainer","markDirty","_addDirtyParent","_prepareChildren","value","_sizeDirty","_handleStates","_updateChildren","html","_setHTMLContent","_positionHTMLElement","_setParent","removeValue","startGrip","endGrip","themeTags","fillOpacity","fill","interfaceColors","_vsbd0","events","on","event","wheelEvent","originalEvent","isLocalEvent","preventDefault","shiftY","deltaY","start","end","_disposers","push","_vsbd1","markDirtyLayer","previous","parent","_processTemplateField","walkChildren","f","values","forEach","output","_setDataItem","dataItem","updated","_dataItem","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\Container.ts"],"sourcesContent":["import type { Graphics } from \"./Graphics\";\nimport type { Layout } from \"./Layout\";\nimport type { IContainer } from \"./backend/Renderer\";\nimport type { IBounds } from \"../util/IBounds\";\nimport type { Scrollbar } from \"./Scrollbar\";\nimport type { DataItem, IComponentDataItem } from \"./Component\";\n\nimport { Children } from \"../util/Children\";\nimport { Percent } from \"../util/Percent\";\nimport { Sprite, ISpriteSettings, ISpritePrivate, ISpriteEvents } from \"./Sprite\";\nimport { Rectangle } from \"./Rectangle\";\nimport { HorizontalLayout } from \"./HorizontalLayout\";\nimport { VerticalLayout } from \"./VerticalLayout\";\nimport { GridLayout } from \"./GridLayout\";\nimport { populateString } from \"../util/PopulateString\";\nimport type { IDisposer } from \"../util/Disposer\";\n\nimport * as $array from \"../util/Array\";\nimport * as $type from \"../util/Type\";\nimport * as $utils from \"../util/Utils\";\n\nexport interface IContainerSettings extends ISpriteSettings {\n\n\t/**\n\t * Left padding in pixels.\n\t */\n\tpaddingLeft?: number;\n\n\t/**\n\t * Right padding in pixels.\n\t */\n\tpaddingRight?: number;\n\n\t/**\n\t * Top padding in pixels.\n\t */\n\tpaddingTop?: number;\n\n\t/**\n\t * Bottom padding in pixels.\n\t */\n\tpaddingBottom?: number;\n\n\t/**\n\t * Background element.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/containers/#Background} for more info\n\t */\n\tbackground?: Graphics;\n\n\t/**\n\t * A method to layout\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/containers/#Layout} for more info\n\t */\n\tlayout?: Layout | null;\n\n\t/**\n\t * An element to use as a container's mask (clipping region).\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/containers/#Masks} for more info\n\t */\n\tmask?: Graphics | null;\n\n\t/**\n\t * If set to `true` all content going outside the bounds of the container\n\t * will be clipped.\n\t */\n\tmaskContent?: boolean;\n\n\t/**\n\t * If set to `true` all descendants - not just direct children, but every\n\t * element in it - will become \"interactive\".\n\t */\n\tinteractiveChildren?: boolean;\n\n\t/**\n\t * If set to `true`, applying a state on a container will also apply the same\n\t * state on its children.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/containers/#States} for more info\n\t */\n\tsetStateOnChildren?: boolean;\n\n\t/**\n\t * Setting this to an instance of [[Scrollbar]] will enable vertical\n\t * scrolling of content if it does not fit into the Container.\n\t * \n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/containers/#Scrollbar} for more info\n\t */\n\tverticalScrollbar?: Scrollbar;\n\n\t/**\n\t * If set to `true` its children will be laid out in opposite order.\n\t *\n\t * @since 5.1.1\n\t */\n\treverseChildren?: boolean;\n\n\t/**\n\t * HTML content of the container.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/html-content/} for more info\n\t * @since 5.2.11\n\t */\n\thtml?: string;\n\n}\n\nexport interface IContainerEvents extends ISpriteEvents {\n}\n\nexport interface IContainerPrivate extends ISpritePrivate {\n\n\t/**\n\t * A `<div>` element used for HTML content of the `Container`.\n\t */\n\thtmlElement?: HTMLDivElement;\n\n}\n\nexport interface IContainerEvents extends ISpriteEvents {\n}\n\n/**\n * A basic element that can have child elements, maintain their layout, and\n * have a background.\n *\n * It can have any [[Sprite]] element as a child, from very basic shapes, to\n * full-fledged charts.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info\n * @important\n */\nexport class Container extends Sprite {\n\n\tdeclare public _settings: IContainerSettings;\n\tdeclare public _privateSettings: IContainerPrivate;\n\tdeclare public _events: IContainerEvents;\n\n\tpublic _display: IContainer = this._root._renderer.makeContainer();\n\n\tpublic _childrenDisplay: IContainer = this._root._renderer.makeContainer();\n\n\t/**\n\t * List of Container's child elements.\n\t */\n\tpublic children: Children<Sprite> = new Children(this);\n\n\tpublic _percentageSizeChildren: Array<Sprite> = [];\n\tpublic _percentagePositionChildren: Array<Sprite> = [];\n\n\tpublic static className: string = \"Container\";\n\tpublic static classNames: Array<string> = Sprite.classNames.concat([Container.className]);\n\n\tpublic _prevWidth: number = 0;\n\tpublic _prevHeight: number = 0;\n\n\tprotected _contentWidth: number = 0;\n\tprotected _contentHeight: number = 0;\n\n\tprotected _contentMask: Rectangle | undefined;\n\n\tprotected _vsbd0: IDisposer | undefined;\n\tprotected _vsbd1: IDisposer | undefined;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis._display.addChild(this._childrenDisplay);\n\t}\n\n\tprotected _dispose() {\n\t\t$array.eachReverse(this.allChildren(), (child) => {\n\t\t\tchild.dispose();\n\t\t});\n\n\t\tif (this.getPrivate(\"htmlElement\")) {\n\t\t\tthis._root._removeHTMLContent(this);\n\t\t}\n\n\t\tsuper._dispose();\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"interactiveChildren\")) {\n\t\t\tthis._display.interactiveChildren = this.get(\"interactiveChildren\", false);\n\t\t}\n\n\t\tif (this.isDirty(\"layout\")) {\n\t\t\tthis._prevWidth = 0;\n\t\t\tthis._prevHeight = 0;\n\t\t\tthis.markDirtyBounds();\n\t\t\tif (this._prevSettings.layout) {\n\t\t\t\tthis.children.each((child) => {\n\t\t\t\t\tchild.removePrivate(\"x\");\n\t\t\t\t\tchild.removePrivate(\"y\");\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"paddingTop\") || this.isDirty(\"paddingBottom\") || this.isDirty(\"paddingLeft\") || this.isDirty(\"paddingRight\")) {\n\t\t\tthis.children.each((child) => {\n\t\t\t\tchild.markDirtyPosition();\n\t\t\t})\n\t\t}\n\n\t\tif (this.isDirty(\"maskContent\")) {\n\n\t\t\tconst childrenDisplay = this._childrenDisplay;\n\n\t\t\tlet contentMask = this._contentMask;\n\t\t\tif (this.get(\"maskContent\")) {\n\t\t\t\tif (!contentMask) {\n\t\t\t\t\tcontentMask = Rectangle.new(this._root, {\n\t\t\t\t\t\tx: -.5,\n\t\t\t\t\t\ty: -.5,\n\t\t\t\t\t\twidth: this.width() + 1,\n\t\t\t\t\t\theight: this.height() + 1\n\t\t\t\t\t});\n\t\t\t\t\tthis._contentMask = contentMask;\n\t\t\t\t\tchildrenDisplay.addChildAt(contentMask._display, 0);\n\t\t\t\t\tchildrenDisplay.mask = contentMask._display;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (contentMask) {\n\t\t\t\t\tchildrenDisplay.removeChild(contentMask._display);\n\t\t\t\t\tchildrenDisplay.mask = null;\n\t\t\t\t\tcontentMask.dispose();\n\t\t\t\t\tthis._contentMask = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\n\t\t$array.each(this._percentageSizeChildren, (child) => {\n\t\t\tchild._updateSize();\n\t\t});\n\n\t\t$array.each(this._percentagePositionChildren, (child) => {\n\t\t\tchild.markDirtyPosition();\n\t\t\tchild._updateSize();\n\t\t});\n\n\t\tthis.updateBackground();\n\t}\n\n\tprotected updateBackground() {\n\t\tconst background = this.get(\"background\");\n\t\tlet bounds = this._localBounds;\n\n\t\tif (bounds && !this.isHidden()) {\n\t\t\tlet x = bounds.left;\n\t\t\tlet y = bounds.top;\n\t\t\tlet w = bounds.right - x;\n\t\t\tlet h = bounds.bottom - y;\n\n\t\t\tlet maxWidth = this.get(\"maxWidth\");\n\t\t\tlet maxHeight = this.get(\"maxHeight\");\n\n\t\t\tif (maxHeight) {\n\t\t\t\tif (h > maxHeight) {\n\t\t\t\t\th = maxHeight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (maxWidth) {\n\t\t\t\tif (w > maxWidth) {\n\t\t\t\t\tw = maxWidth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet width = this.width();\n\t\t\tlet height = this.height();\n\n\t\t\tif (background) {\n\t\t\t\tbackground.setAll({ width: w, height: h, x: x, y: y });\n\t\t\t\tif (this._display.interactive) {\n\t\t\t\t\tbackground._display.interactive = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst contentMask = this._contentMask;\n\t\t\tif (contentMask) {\n\t\t\t\tcontentMask.setAll({ width: width + 1, height: height + 1 });\n\t\t\t}\n\n\t\t\tconst verticalScrollbar = this.get(\"verticalScrollbar\")!;\n\t\t\tif (verticalScrollbar) {\n\t\t\t\tverticalScrollbar.set(\"height\", height);\n\t\t\t\tverticalScrollbar.set(\"x\", width - verticalScrollbar.width() - verticalScrollbar.get(\"marginRight\", 0));\n\t\t\t\tverticalScrollbar.set(\"end\", verticalScrollbar.get(\"start\", 0) + height / this._contentHeight);\n\n\t\t\t\tconst bg = verticalScrollbar.get(\"background\");\n\t\t\t\tif (bg) {\n\t\t\t\t\tbg.setAll({ width: verticalScrollbar.width(), height: height })\n\t\t\t\t}\n\n\t\t\t\tlet visible = true;\n\t\t\t\tif (this._contentHeight <= height) {\n\t\t\t\t\tvisible = false;\n\t\t\t\t}\n\t\t\t\tverticalScrollbar.setPrivate(\"visible\", visible);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _applyThemes(): boolean {\n\t\tif (super._applyThemes()) {\n\t\t\tthis.eachChildren((child) => {\n\t\t\t\tchild._applyThemes();\n\t\t\t});\n\n\t\t\treturn true;\n\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic _applyState(name: string): void {\n\t\tsuper._applyState(name);\n\n\t\tif (this.get(\"setStateOnChildren\")) {\n\t\t\tthis.eachChildren((child) => {\n\t\t\t\tchild.states.apply(name);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic _applyStateAnimated(name: string, duration?: number): void {\n\t\tsuper._applyStateAnimated(name, duration);\n\n\t\tif (this.get(\"setStateOnChildren\")) {\n\t\t\tthis.eachChildren((child) => {\n\t\t\t\tchild.states.applyAnimate(name, duration);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns container's inner width (width without padding) in pixels.\n\t *\n\t * @return Inner width (px)\n\t */\n\tpublic innerWidth(): number {\n\t\treturn this.width() - this.get(\"paddingRight\", 0) - this.get(\"paddingLeft\", 0);\n\t}\n\n\t/**\n\t * Returns container's inner height (height without padding) in pixels.\n\t *\n\t * @return Inner height (px)\n\t */\n\tpublic innerHeight(): number {\n\t\treturn this.height() - this.get(\"paddingTop\", 0) - this.get(\"paddingBottom\", 0);\n\t}\n\n\tprotected _getBounds() {\n\n\t\tlet width = this.get(\"width\");\n\t\tlet height = this.get(\"height\");\n\t\tlet pWidth = this.getPrivate(\"width\");\n\t\tlet pHeight = this.getPrivate(\"height\");\n\n\t\tlet bounds: IBounds = {\n\t\t\tleft: 0,\n\t\t\ttop: 0,\n\t\t\tright: this.width(),\n\t\t\tbottom: this.height(),\n\t\t};\n\n\t\tlet layout = this.get(\"layout\");\n\t\tlet horizontal = false;\n\t\tlet vertical = false;\n\t\tif (layout instanceof HorizontalLayout || layout instanceof GridLayout) {\n\t\t\thorizontal = true;\n\t\t}\n\n\t\tif (layout instanceof VerticalLayout) {\n\t\t\tvertical = true;\n\t\t}\n\n\t\tif ((width != null || pWidth != null) && (height != null || pHeight != null) && !this.get(\"verticalScrollbar\")) {\n\t\t\t// void\n\t\t}\n\t\telse {\n\t\t\tlet m = Number.MAX_VALUE;\n\n\t\t\tlet l = m;\n\t\t\tlet r = -m;\n\t\t\tlet t = m;\n\t\t\tlet b = -m;\n\n\t\t\tconst paddingLeft = this.get(\"paddingLeft\", 0);\n\t\t\tconst paddingTop = this.get(\"paddingTop\", 0);\n\t\t\tconst paddingRight = this.get(\"paddingRight\", 0);\n\t\t\tconst paddingBottom = this.get(\"paddingBottom\", 0);\n\n\t\t\tthis.children.each((child) => {\n\t\t\t\tif (child.get(\"position\") != \"absolute\" && child.get(\"isMeasured\")) {\n\t\t\t\t\tlet childBounds = child.adjustedLocalBounds();\n\t\t\t\t\tlet childX = child.x();\n\t\t\t\t\tlet childY = child.y();\n\t\t\t\t\tlet cl = childX + childBounds.left;\n\t\t\t\t\tlet cr = childX + childBounds.right;\n\t\t\t\t\tlet ct = childY + childBounds.top;\n\t\t\t\t\tlet cb = childY + childBounds.bottom;\n\n\t\t\t\t\tif (horizontal) {\n\t\t\t\t\t\tcl -= child.get(\"marginLeft\", 0);\n\t\t\t\t\t\tcr += child.get(\"marginRight\", 0);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (vertical) {\n\t\t\t\t\t\tct -= child.get(\"marginTop\", 0);\n\t\t\t\t\t\tcb += child.get(\"marginBottom\", 0);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cl < l) {\n\t\t\t\t\t\tl = cl;\n\t\t\t\t\t}\n\t\t\t\t\tif (cr > r) {\n\t\t\t\t\t\tr = cr;\n\t\t\t\t\t}\n\t\t\t\t\tif (ct < t) {\n\t\t\t\t\t\tt = ct;\n\t\t\t\t\t}\n\t\t\t\t\tif (cb > b) {\n\t\t\t\t\t\tb = cb;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (l == m) {\n\t\t\t\tl = 0;\n\t\t\t}\n\n\t\t\tif (r == -m) {\n\t\t\t\tr = 0;\n\t\t\t}\n\n\t\t\tif (t == m) {\n\t\t\t\tt = 0;\n\t\t\t}\n\n\t\t\tif (b == -m) {\n\t\t\t\tb = 0;\n\t\t\t}\n\n\t\t\tbounds.left = l - paddingLeft;\n\t\t\tbounds.top = t - paddingTop;\n\t\t\tbounds.right = r + paddingRight;\n\t\t\tbounds.bottom = b + paddingBottom;\n\t\t}\n\n\t\tthis._contentWidth = bounds.right - bounds.left;\n\t\tthis._contentHeight = bounds.bottom - bounds.top;\n\n\t\tif ($type.isNumber(width)) {\n\t\t\tbounds.left = 0;\n\t\t\tbounds.right = width;\n\t\t}\n\n\t\tif ($type.isNumber(pWidth)) {\n\t\t\tbounds.left = 0;\n\t\t\tbounds.right = pWidth;\n\t\t}\n\n\t\tif ($type.isNumber(height)) {\n\t\t\tbounds.top = 0;\n\t\t\tbounds.bottom = height;\n\t\t}\n\n\t\tif ($type.isNumber(pHeight)) {\n\t\t\tbounds.top = 0;\n\t\t\tbounds.bottom = pHeight;\n\t\t}\n\n\t\tthis._localBounds = bounds;\n\t}\n\n\tpublic _updateBounds() {\n\t\tconst layout = this.get(\"layout\");\n\n\t\tif (layout) {\n\t\t\tlayout.updateContainer(this);\n\t\t}\n\n\t\tsuper._updateBounds();\n\n\t\tthis.updateBackground();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirty(): void {\n\t\tsuper.markDirty();\n\t\tthis._root._addDirtyParent(this);\n\t}\n\n\tpublic _prepareChildren() {\n\t\tconst innerWidth = this.innerWidth();\n\t\tconst innerHeight = this.innerHeight();\n\n\t\tif (innerWidth != this._prevWidth || innerHeight != this._prevHeight) {\n\t\t\tlet layout = this.get(\"layout\");\n\t\t\tlet horizontal = false;\n\t\t\tlet vertical = false;\n\t\t\tif (layout) {\n\t\t\t\tif (layout instanceof HorizontalLayout || layout instanceof GridLayout) {\n\t\t\t\t\thorizontal = true;\n\t\t\t\t}\n\t\t\t\tif (layout instanceof VerticalLayout) {\n\t\t\t\t\tvertical = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$array.each(this._percentageSizeChildren, (child) => {\n\t\t\t\tif (!horizontal) {\n\t\t\t\t\tlet width = child.get(\"width\");\n\t\t\t\t\tif (width instanceof Percent) {\n\t\t\t\t\t\tchild.setPrivate(\"width\", width.value * innerWidth);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!vertical) {\n\t\t\t\t\tlet height = child.get(\"height\");\n\t\t\t\t\tif (height instanceof Percent) {\n\t\t\t\t\t\tchild.setPrivate(\"height\", height.value * innerHeight);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(this._percentagePositionChildren, (child) => {\n\t\t\t\tchild.markDirtyPosition();\n\t\t\t\tchild.markDirtyBounds();\n\t\t\t})\n\n\t\t\tthis._prevWidth = innerWidth;\n\t\t\tthis._prevHeight = innerHeight;\n\n\t\t\tthis._sizeDirty = true;\n\t\t\tthis.updateBackground();\n\t\t}\n\n\t\tthis._handleStates();\n\t}\n\n\tpublic _updateChildren() {\n\n\t\tif (this.isDirty(\"html\")) {\n\t\t\tconst html = this.get(\"html\");\n\t\t\tif (html && html !== \"\") {\n\t\t\t\tthis._root._setHTMLContent(this, populateString(this, this.get(\"html\", \"\")));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._root._removeHTMLContent(this);\n\t\t\t}\n\t\t\tthis._root._positionHTMLElement(this);\n\t\t}\n\n\t\tif (this.isDirty(\"verticalScrollbar\")) {\n\t\t\tconst verticalScrollbar = this.get(\"verticalScrollbar\")!;\n\t\t\tif (verticalScrollbar) {\n\t\t\t\tverticalScrollbar._setParent(this);\n\t\t\t\tverticalScrollbar.children.removeValue(verticalScrollbar.startGrip);\n\t\t\t\tverticalScrollbar.children.removeValue(verticalScrollbar.endGrip);\n\n\t\t\t\tthis.set(\"maskContent\", true);\n\t\t\t\tthis.set(\"paddingRight\", verticalScrollbar.width() + verticalScrollbar.get(\"marginRight\", 0) + verticalScrollbar.get(\"marginLeft\", 0));\n\n\t\t\t\tlet background = this.get(\"background\");\n\n\t\t\t\tif (!background) {\n\t\t\t\t\tbackground = this.set(\"background\", Rectangle.new(this._root, {\n\t\t\t\t\t\tthemeTags: [\"background\"],\n\t\t\t\t\t\tfillOpacity: 0,\n\t\t\t\t\t\tfill: this._root.interfaceColors.get(\"alternativeBackground\")\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\tthis._vsbd0 = this.events.on(\"wheel\", (event) => {\n\t\t\t\t\tconst wheelEvent = event.originalEvent;\n\n\t\t\t\t\t// Ignore wheel event if it is happening on a non-chart element, e.g. if\n\t\t\t\t\t// some page element is over the chart.\n\t\t\t\t\tif ($utils.isLocalEvent(wheelEvent, this)) {\n\t\t\t\t\t\twheelEvent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet shiftY = wheelEvent.deltaY / 5000;\n\t\t\t\t\tconst start = verticalScrollbar.get(\"start\", 0);\n\t\t\t\t\tconst end = verticalScrollbar.get(\"end\", 1);\n\n\t\t\t\t\tif (start + shiftY <= 0) {\n\t\t\t\t\t\tshiftY = -start;\n\t\t\t\t\t}\n\t\t\t\t\tif (end + shiftY >= 1) {\n\t\t\t\t\t\tshiftY = 1 - end;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (start + shiftY >= 0 && end + shiftY <= 1) {\n\t\t\t\t\t\tverticalScrollbar.set(\"start\", start + shiftY);\n\t\t\t\t\t\tverticalScrollbar.set(\"end\", end + shiftY);\n\t\t\t\t\t}\n\n\t\t\t\t})\n\n\t\t\t\tthis._disposers.push(this._vsbd0);\n\n\t\t\t\tthis._vsbd1 = verticalScrollbar.events.on(\"rangechanged\", () => {\n\t\t\t\t\tlet h = this._contentHeight;\n\t\t\t\t\tconst childrenDisplay = this._childrenDisplay;\n\t\t\t\t\tconst contentMask = this._contentMask;\n\n\t\t\t\t\tchildrenDisplay.y = -verticalScrollbar.get(\"start\") * h;\n\t\t\t\t\tchildrenDisplay.markDirtyLayer();\n\n\t\t\t\t\tif (contentMask) {\n\t\t\t\t\t\tcontentMask._display.y = -childrenDisplay.y;\n\t\t\t\t\t\tchildrenDisplay.mask = contentMask._display;\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tthis._disposers.push(this._vsbd1);\n\n\t\t\t\tthis._display.addChild(verticalScrollbar._display);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst previous = this._prevSettings.verticalScrollbar\n\t\t\t\tif (previous) {\n\t\t\t\t\tthis._display.removeChild(previous._display);\n\t\t\t\t\tif (this._vsbd0) {\n\t\t\t\t\t\tthis._vsbd0.dispose();\n\t\t\t\t\t}\n\t\t\t\t\tif (this._vsbd1) {\n\t\t\t\t\t\tthis._vsbd1.dispose();\n\t\t\t\t\t}\n\t\t\t\t\tconst childrenDisplay = this._childrenDisplay;\n\t\t\t\t\tchildrenDisplay.y = 0;\n\n\t\t\t\t\tthis.setPrivate(\"height\", undefined);\n\t\t\t\t\tthis.set(\"maskContent\", false);\n\t\t\t\t\tthis.set(\"paddingRight\", undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"background\")) {\n\t\t\t// TODO maybe this should dispose ?\n\t\t\tconst previous = this._prevSettings[\"background\"];\n\t\t\tif (previous) {\n\t\t\t\tthis._display.removeChild(previous._display);\n\t\t\t}\n\n\t\t\tconst background = this.get(\"background\");\n\t\t\tif (background instanceof Sprite) {\n\t\t\t\tbackground.set(\"isMeasured\", false);\n\t\t\t\tbackground._setParent(this);\n\t\t\t\tthis._display.addChildAt(background._display, 0);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"mask\")) {\n\n\t\t\tconst mask = this.get(\"mask\");\n\n\t\t\tconst previous = this._prevSettings[\"mask\"];\n\t\t\tif (previous) {\n\t\t\t\tthis._display.removeChild(previous._display);\n\t\t\t\tif (previous != mask) {\n\t\t\t\t\tprevious.dispose();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (mask) {\n\t\t\t\tconst parent = mask.parent;\n\t\t\t\tif (parent) {\n\t\t\t\t\tparent.children.removeValue(mask);\n\t\t\t\t}\n\n\t\t\t\tmask._setParent(this);\n\t\t\t\tthis._display.addChildAt(mask._display, 0);\n\t\t\t\tthis._childrenDisplay.mask = mask._display;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _processTemplateField(): void {\n\t\tsuper._processTemplateField();\n\t\tthis.children.each((child) => {\n\t\t\tchild._processTemplateField();\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic walkChildren(f: (child: Sprite) => void): void {\n\t\tthis.children.each((child) => {\n\t\t\tif (child instanceof Container) {\n\t\t\t\tchild.walkChildren(f);\n\t\t\t}\n\t\t\tf(child);\n\t\t});\n\t}\n\n\tpublic eachChildren(f: (child: Sprite) => void): void {\n\t\tconst background = this.get(\"background\");\n\t\tif (background) {\n\t\t\tf(background);\n\t\t}\n\n\t\tconst verticalScrollbar = this.get(\"verticalScrollbar\");\n\t\tif (verticalScrollbar) {\n\t\t\tf(verticalScrollbar);\n\t\t}\n\n\t\tconst mask = this.get(\"mask\");\n\t\tif (mask) {\n\t\t\tf(mask);\n\t\t}\n\n\t\tthis.children.values.forEach((child) => {\n\t\t\tf(child);\n\t\t});\n\t}\n\n\tpublic allChildren(): Array<Sprite> {\n\t\tconst output: Array<Sprite> = [];\n\n\t\tthis.eachChildren((x) => {\n\t\t\toutput.push(x);\n\t\t});\n\n\t\treturn output;\n\t}\n\n\tpublic _setDataItem(dataItem?: DataItem<IComponentDataItem>): void {\n\t\tconst updated = (dataItem !== this._dataItem);\n\t\tsuper._setDataItem(dataItem);\n\t\tconst html = this.get(\"html\", \"\");\n\t\tif (html && html !== \"\" && updated) {\n\t\t\tthis._root._setHTMLContent(this, populateString(this, html));\n\t\t}\n\t}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}