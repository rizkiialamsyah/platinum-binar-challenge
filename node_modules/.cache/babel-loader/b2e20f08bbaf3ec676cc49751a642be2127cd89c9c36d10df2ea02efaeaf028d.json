{"ast":null,"code":"import { Gradient } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $utils from \"../../util/Utils\";\n/**\r\n * Radial gradient.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\r\n */\nexport class RadialGradient extends Gradient {\n  /**\r\n   * @ignore\r\n   */\n  getFill(target) {\n    const bounds = this.getBounds(target);\n    let x = 0;\n    let y = 0;\n    let l = bounds.left || 0;\n    let r = bounds.right || 0;\n    let t = bounds.top || 0;\n    let b = bounds.bottom || 0;\n    const width = r - l;\n    const height = b - t;\n    let radius = target.get(\"radius\");\n    if ($type.isNumber(radius)) {\n      x = 0;\n      y = 0;\n    } else {\n      radius = Math.min(width, height) / 2;\n      x = width / 2;\n      y = height / 2;\n    }\n    let ux = this.get(\"x\");\n    let uy = this.get(\"y\");\n    if (ux != null) {\n      x = $utils.relativeToValue(ux, width);\n    }\n    if (uy != null) {\n      y = $utils.relativeToValue(uy, height);\n    }\n    const gradient = this._root._renderer.createRadialGradient(x, y, 0, x, y, radius);\n    const stops = this.get(\"stops\");\n    if (stops) {\n      let i = 0;\n      $array.each(stops, stop => {\n        let offset = stop.offset;\n        if (!$type.isNumber(offset)) {\n          offset = i / (stops.length - 1);\n        }\n        let opacity = stop.opacity;\n        if (!$type.isNumber(opacity)) {\n          opacity = 1;\n        }\n        let color = stop.color;\n        if (color) {\n          const lighten = stop.lighten;\n          if (lighten) {\n            color = Color.lighten(color, lighten);\n          }\n          const brighten = stop.brighten;\n          if (brighten) {\n            color = Color.brighten(color, brighten);\n          }\n          gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n        }\n        i++;\n      });\n    }\n    return gradient;\n  }\n}\nObject.defineProperty(RadialGradient, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"RadialGradient\"\n});\nObject.defineProperty(RadialGradient, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Gradient.classNames.concat([RadialGradient.className])\n});","map":{"version":3,"names":["Gradient","Color","$array","$type","$utils","RadialGradient","getFill","target","bounds","getBounds","x","y","l","left","r","right","t","top","b","bottom","width","height","radius","get","isNumber","Math","min","ux","uy","relativeToValue","gradient","_root","_renderer","createRadialGradient","stops","i","each","stop","offset","length","opacity","color","lighten","brighten","addColorStop","g","Object","defineProperty","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\gradients\\RadialGradient.ts"],"sourcesContent":["import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\nimport type { Percent } from \"../../util/Percent\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $utils from \"../../util/Utils\";\n\n\nexport interface IRadialGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient radius in pixels or percent (relative to the `target`).\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * X position.\n\t */\n\tx?: number | Percent;\n\n\t/**\n\t * Y position.\n\t */\n\ty?: number | Percent;\n\n}\n\nexport interface IRadialGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Radial gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class RadialGradient extends Gradient {\n\n\tdeclare public _settings: IRadialGradientSettings;\n\tdeclare public _privateSettings: IRadialGradientPrivate;\n\n\tpublic static className: string = \"RadialGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([RadialGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst bounds = this.getBounds(target);\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tconst width = r - l;\n\t\tconst height = b - t;\n\n\t\tlet radius = target.get(\"radius\" as any);\n\t\tif ($type.isNumber(radius)) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\t\telse {\n\t\t\tradius = Math.min(width, height) / 2;\n\t\t\tx = width / 2;\n\t\t\ty = height / 2;\n\t\t}\n\n\t\tlet ux = this.get(\"x\");\n\t\tlet uy = this.get(\"y\");\n\t\tif (ux != null) {\n\t\t\tx = $utils.relativeToValue(ux, width);\n\t\t}\n\n\t\tif (uy != null) {\n\t\t\ty = $utils.relativeToValue(uy, height);\n\t\t}\n\n\t\tconst gradient = this._root._renderer.createRadialGradient(x, y, 0, x, y, radius);\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\n\t\treturn gradient\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}