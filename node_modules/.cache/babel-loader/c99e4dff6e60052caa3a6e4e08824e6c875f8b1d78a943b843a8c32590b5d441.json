{"ast":null,"code":"import { Pattern } from \"./Pattern\";\n/**\r\n * Picture pattern.\r\n *\r\n * @since 5.2.15\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\nexport class PicturePattern extends Pattern {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_image\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  _beforeChanged() {\n    super._beforeChanged();\n    this._clear = true;\n    if (this.isDirty(\"src\")) {\n      this._load();\n    }\n  }\n  _draw() {\n    super._draw();\n    const image = this._image;\n    if (image) {\n      const patternWidth = this.get(\"width\", 100);\n      const patternHeight = this.get(\"height\", 100);\n      // Fit\n      const fit = this.get(\"fit\", \"image\");\n      let width = 0;\n      let height = 0;\n      if (fit == \"pattern\") {\n        width = patternWidth;\n        height = patternHeight;\n      } else {\n        width = image.width;\n        height = image.height;\n        if (fit == \"image\") {\n          this.set(\"width\", width);\n          this.set(\"height\", height);\n        }\n      }\n      // Position\n      const centered = this.get(\"centered\", true);\n      let x = 0;\n      let y = 0;\n      if (centered) {\n        x = patternWidth / 2 - width / 2;\n        y = patternHeight / 2 - height / 2;\n      }\n      this._display.image(image, width, height, x, y);\n    }\n  }\n  _load() {\n    const src = this.get(\"src\");\n    if (src) {\n      const image = new Image();\n      //image.crossOrigin = \"Anonymous\";\n      image.src = src;\n      image.decode().then(() => {\n        this._image = image;\n        this._draw();\n        if (this.events.isEnabled(\"loaded\")) {\n          this.events.dispatch(\"loaded\", {\n            type: \"loaded\",\n            target: this\n          });\n        }\n      }).catch(_error => {\n        // TODO: maybe raise error?\n      });\n    }\n  }\n}\nObject.defineProperty(PicturePattern, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"PicturePattern\"\n});\nObject.defineProperty(PicturePattern, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Pattern.classNames.concat([PicturePattern.className])\n});","map":{"version":3,"names":["Pattern","PicturePattern","constructor","Object","defineProperty","_beforeChanged","_clear","isDirty","_load","_draw","image","_image","patternWidth","get","patternHeight","fit","width","height","set","centered","x","y","_display","src","Image","decode","then","events","isEnabled","dispatch","type","target","catch","_error","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\patterns\\PicturePattern.ts"],"sourcesContent":["import { Pattern, IPatternSettings, IPatternPrivate, IPatternEvents } from \"./Pattern\";\n\nexport interface IPicturePatternSettings extends IPatternSettings {\n\n\t/**\n\t * A source URI of the image.\n\t *\n\t * Can be relative or absolute URL, or data-uri.\n\t */\n\tsrc?: string;\n\n\t/**\n\t * How pattern should be sized:\n\t *\n\t * * `\"image\"` (default) - pattern will be sized to actual image dimensions.\n\t * * `\"pattern\"` - image will sized to image dimensions.\n\t * * `\"none\"` - image will be placed in the pattern, regardless of either dimensions.\n\t * \n\t * @default \"image\"\n\t */\n\tfit?: \"image\" | \"pattern\" | \"none\";\n\n\t/**\n\t * Center images.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface IPicturePatternPrivate extends IPatternPrivate {\n}\n\nexport interface IPicturePatternEvents extends IPatternEvents {\n\n\t/**\n\t * Invoked when related image is loaded.\n\t */\n\tloaded: {};\n\n}\n\n/**\n * Picture pattern.\n *\n * @since 5.2.15\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class PicturePattern extends Pattern {\n\tdeclare public _settings: IPicturePatternSettings;\n\tdeclare public _privateSettings: IPicturePatternPrivate;\n\tdeclare public _events: IPicturePatternEvents;\n\n\tpublic static className: string = \"PicturePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([PicturePattern.className]);\n\n\tpublic _image: HTMLImageElement | undefined;\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tthis._clear = true;\n\n\t\tif (this.isDirty(\"src\")) {\n\t\t\tthis._load();\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst image = this._image;\n\t\tif (image) {\n\n\t\t\tconst patternWidth = this.get(\"width\", 100);\n\t\t\tconst patternHeight = this.get(\"height\", 100);\n\n\t\t\t// Fit\n\t\t\tconst fit = this.get(\"fit\", \"image\");\n\t\t\tlet width = 0;\n\t\t\tlet height = 0;\n\t\t\tif (fit == \"pattern\") {\n\t\t\t\twidth = patternWidth;\n\t\t\t\theight = patternHeight;\n\t\t\t}\n\t\t\telse {\n\t\t\t\twidth = image.width;\n\t\t\t\theight = image.height;\n\t\t\t\tif (fit == \"image\") {\n\t\t\t\t\tthis.set(\"width\", width);\n\t\t\t\t\tthis.set(\"height\", height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Position\n\t\t\tconst centered = this.get(\"centered\", true);\n\t\t\tlet x = 0;\n\t\t\tlet y = 0;\n\t\t\tif (centered) {\n\t\t\t\tx = patternWidth / 2 - width / 2;\n\t\t\t\ty = patternHeight / 2 - height / 2;\n\t\t\t}\n\t\t\tthis._display.image(image, width, height, x, y);\n\t\t}\n\n\t}\n\n\tprotected _load() {\n\t\tconst src = this.get(\"src\");\n\t\tif (src) {\n\t\t\tconst image = new Image();\n\t\t\t//image.crossOrigin = \"Anonymous\";\n\t\t\timage.src = src!;\n\t\t\timage.decode().then(() => {\n\t\t\t\tthis._image = image;\n\t\t\t\tthis._draw();\n\t\t\t\tif (this.events.isEnabled(\"loaded\")) {\n\t\t\t\t\tthis.events.dispatch(\"loaded\", { type: \"loaded\", target: this });\n\t\t\t\t}\n\t\t\t}).catch((_error: any) => {\n\t\t\t\t// TODO: maybe raise error?\n\t\t\t});\n\t\t}\n\t}\n\n}"],"mappings":"AAAA,SAASA,OAAO,QAA2D,WAAW;AA2CtF;;;;;;;AAOA,OAAM,MAAOC,cAAe,SAAQD,OAAO;EAA3CE,YAAA;;IAQCC,MAAA,CAAAC,cAAA;;;;;;EAqED;EAnEQC,cAAcA,CAAA;IACpB,KAAK,CAACA,cAAc,EAAE;IAEtB,IAAI,CAACC,MAAM,GAAG,IAAI;IAElB,IAAI,IAAI,CAACC,OAAO,CAAC,KAAK,CAAC,EAAE;MACxB,IAAI,CAACC,KAAK,EAAE;;EAEd;EAEUC,KAAKA,CAAA;IACd,KAAK,CAACA,KAAK,EAAE;IAEb,MAAMC,KAAK,GAAG,IAAI,CAACC,MAAM;IACzB,IAAID,KAAK,EAAE;MAEV,MAAME,YAAY,GAAG,IAAI,CAACC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC;MAC3C,MAAMC,aAAa,GAAG,IAAI,CAACD,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC;MAE7C;MACA,MAAME,GAAG,GAAG,IAAI,CAACF,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC;MACpC,IAAIG,KAAK,GAAG,CAAC;MACb,IAAIC,MAAM,GAAG,CAAC;MACd,IAAIF,GAAG,IAAI,SAAS,EAAE;QACrBC,KAAK,GAAGJ,YAAY;QACpBK,MAAM,GAAGH,aAAa;OACtB,MACI;QACJE,KAAK,GAAGN,KAAK,CAACM,KAAK;QACnBC,MAAM,GAAGP,KAAK,CAACO,MAAM;QACrB,IAAIF,GAAG,IAAI,OAAO,EAAE;UACnB,IAAI,CAACG,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC;UACxB,IAAI,CAACE,GAAG,CAAC,QAAQ,EAAED,MAAM,CAAC;;;MAI5B;MACA,MAAME,QAAQ,GAAG,IAAI,CAACN,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC;MAC3C,IAAIO,CAAC,GAAG,CAAC;MACT,IAAIC,CAAC,GAAG,CAAC;MACT,IAAIF,QAAQ,EAAE;QACbC,CAAC,GAAGR,YAAY,GAAG,CAAC,GAAGI,KAAK,GAAG,CAAC;QAChCK,CAAC,GAAGP,aAAa,GAAG,CAAC,GAAGG,MAAM,GAAG,CAAC;;MAEnC,IAAI,CAACK,QAAQ,CAACZ,KAAK,CAACA,KAAK,EAAEM,KAAK,EAAEC,MAAM,EAAEG,CAAC,EAAEC,CAAC,CAAC;;EAGjD;EAEUb,KAAKA,CAAA;IACd,MAAMe,GAAG,GAAG,IAAI,CAACV,GAAG,CAAC,KAAK,CAAC;IAC3B,IAAIU,GAAG,EAAE;MACR,MAAMb,KAAK,GAAG,IAAIc,KAAK,EAAE;MACzB;MACAd,KAAK,CAACa,GAAG,GAAGA,GAAI;MAChBb,KAAK,CAACe,MAAM,EAAE,CAACC,IAAI,CAAC,MAAK;QACxB,IAAI,CAACf,MAAM,GAAGD,KAAK;QACnB,IAAI,CAACD,KAAK,EAAE;QACZ,IAAI,IAAI,CAACkB,MAAM,CAACC,SAAS,CAAC,QAAQ,CAAC,EAAE;UACpC,IAAI,CAACD,MAAM,CAACE,QAAQ,CAAC,QAAQ,EAAE;YAAEC,IAAI,EAAE,QAAQ;YAAEC,MAAM,EAAE;UAAI,CAAE,CAAC;;MAElE,CAAC,CAAC,CAACC,KAAK,CAAEC,MAAW,IAAI;QACxB;MAAA,CACA,CAAC;;EAEJ;;AAtEA9B,MAAA,CAAAC,cAAA,CAAAH,cAAA;;;;SAAkC;;AAClCE,MAAA,CAAAC,cAAA,CAAAH,cAAA;;;;SAA0CD,OAAO,CAACkC,UAAU,CAACC,MAAM,CAAC,CAAClC,cAAc,CAACmC,SAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}