{"ast":null,"code":"import { Gradient } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n/**\r\n * Linear gradient.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\r\n */\nexport class LinearGradient extends Gradient {\n  /**\r\n   * @ignore\r\n   */\n  getFill(target) {\n    const rotation = this.get(\"rotation\", 0);\n    let bounds = this.getBounds(target);\n    let l = bounds.left || 0;\n    let r = bounds.right || 0;\n    let t = bounds.top || 0;\n    let b = bounds.bottom || 0;\n    let cos = $math.cos(rotation);\n    let sin = $math.sin(rotation);\n    let w = cos * (r - l);\n    let h = sin * (b - t);\n    let longer = Math.max(w, h);\n    const gradient = this._root._renderer.createLinearGradient(l, t, l + longer * cos, t + longer * sin);\n    const stops = this.get(\"stops\");\n    if (stops) {\n      let i = 0;\n      $array.each(stops, stop => {\n        let offset = stop.offset;\n        if (!$type.isNumber(offset)) {\n          offset = i / (stops.length - 1);\n        }\n        let opacity = stop.opacity;\n        if (!$type.isNumber(opacity)) {\n          opacity = 1;\n        }\n        let color = stop.color;\n        if (color) {\n          const lighten = stop.lighten;\n          if (lighten) {\n            color = Color.lighten(color, lighten);\n          }\n          const brighten = stop.brighten;\n          if (brighten) {\n            color = Color.brighten(color, brighten);\n          }\n          gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n        }\n        i++;\n      });\n    }\n    return gradient;\n  }\n}\nObject.defineProperty(LinearGradient, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"LinearGradient\"\n});\nObject.defineProperty(LinearGradient, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Gradient.classNames.concat([LinearGradient.className])\n});","map":{"version":3,"names":["Gradient","Color","$array","$type","$math","LinearGradient","getFill","target","rotation","get","bounds","getBounds","l","left","r","right","t","top","b","bottom","cos","sin","w","h","longer","Math","max","gradient","_root","_renderer","createLinearGradient","stops","i","each","stop","offset","isNumber","length","opacity","color","lighten","brighten","addColorStop","g","Object","defineProperty","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\gradients\\LinearGradient.ts"],"sourcesContent":["import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n\n\nexport interface ILinearGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient rotation, in degrees.\n\t *\n\t * @default 90\n\t */\n\trotation?: number;\n\n}\n\nexport interface ILinearGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Linear gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class LinearGradient extends Gradient {\n\n\tdeclare public _settings: ILinearGradientSettings;\n\tdeclare public _privateSettings: ILinearGradientPrivate;\n\n\tpublic static className: string = \"LinearGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([LinearGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet bounds = this.getBounds(target);\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tlet cos = $math.cos(rotation);\n\t\tlet sin = $math.sin(rotation);\n\n\t\tlet w = cos * (r - l);\n\t\tlet h = sin * (b - t);\n\n\t\tlet longer = Math.max(w, h);\n\n\t\tconst gradient = this._root._renderer.createLinearGradient(\n\t\t\tl,\n\t\t\tt,\n\t\t\tl + longer * cos,\n\t\t\tt + longer * sin\n\t\t);\n\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\t\treturn gradient;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}