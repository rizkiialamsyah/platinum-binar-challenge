{"ast":null,"code":"import { AxisRenderer } from \"./AxisRenderer\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\n/**\r\n * Used to render horizontal axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\r\n * @important\r\n */\nexport class AxisRendererX extends AxisRenderer {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"thumb\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Rectangle.new(this._root, {\n        width: p100,\n        isMeasured: false,\n        themeTags: [\"axis\", \"x\", \"thumb\"]\n      })\n    });\n  }\n  _afterNew() {\n    this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"x\"]);\n    super._afterNew();\n    this.setPrivateRaw(\"letter\", \"X\");\n    const gridTemplate = this.grid.template;\n    gridTemplate.set(\"height\", p100);\n    gridTemplate.set(\"width\", 0);\n    gridTemplate.set(\"draw\", (display, graphics) => {\n      display.moveTo(0, 0);\n      display.lineTo(0, graphics.height());\n    });\n    this.set(\"draw\", (display, graphics) => {\n      display.moveTo(0, 0);\n      display.lineTo(graphics.width(), 0);\n    });\n  }\n  _changed() {\n    super._changed();\n    const axis = this.axis;\n    axis.ghostLabel.setPrivate(\"visible\", !this.get(\"inside\"));\n    axis.ghostLabel.set(\"x\", -1000);\n    const opposite = \"opposite\";\n    const inside = \"inside\";\n    if (this.isDirty(opposite) || this.isDirty(inside)) {\n      const chart = this.chart;\n      const axisChildren = axis.children;\n      if (this.get(inside)) {\n        axis.addTag(inside);\n      } else {\n        axis.removeTag(inside);\n      }\n      if (chart) {\n        if (this.get(opposite)) {\n          const children = chart.topAxesContainer.children;\n          if (children.indexOf(axis) == -1) {\n            children.insertIndex(0, axis);\n          }\n          axis.addTag(opposite);\n          axisChildren.moveValue(this);\n        } else {\n          const children = chart.bottomAxesContainer.children;\n          if (children.indexOf(axis) == -1) {\n            children.moveValue(axis);\n          }\n          axis.removeTag(opposite);\n          axisChildren.moveValue(this, 0);\n        }\n        axis.ghostLabel._applyThemes();\n        this.labels.each(label => {\n          label._applyThemes();\n        });\n        this.root._markDirtyRedraw();\n      }\n      axis.markDirtySize();\n    }\n    this.thumb.setPrivate(\"height\", axis.labelsContainer.height());\n  }\n  _getPan(point1, point2) {\n    return (point2.x - point1.x) / this.width();\n  }\n  toAxisPosition(position) {\n    const start = this._start || 0;\n    const end = this._end || 1;\n    position -= this._ls;\n    position = position * (end - start) / this._lc;\n    if (!this.get(\"inversed\")) {\n      position = start + position;\n    } else {\n      position = end - position;\n    }\n    return position;\n  }\n  _updateLC() {\n    const axis = this.axis;\n    const parent = axis.parent;\n    if (parent) {\n      const w = parent.innerWidth();\n      this._lc = this.axisLength() / w;\n      this._ls = (axis.x() - parent.get(\"paddingLeft\", 0)) / w;\n    }\n  }\n  _updatePositions() {\n    const axis = this.axis;\n    const x = axis.x() - $utils.relativeToValue(axis.get(\"centerX\", 0), axis.width()) - axis.parent.get(\"paddingLeft\", 0);\n    axis.gridContainer.set(\"x\", x);\n    axis.topGridContainer.set(\"x\", x);\n    axis.bulletsContainer.set(\"y\", this.y());\n    const chart = axis.chart;\n    if (chart) {\n      const plotContainer = chart.plotContainer;\n      const axisHeader = axis.axisHeader;\n      let width = axis.get(\"marginLeft\", 0);\n      let x = axis.x() - width;\n      const parent = axis.parent;\n      if (parent) {\n        x -= parent.get(\"paddingLeft\", 0);\n      }\n      if (axisHeader.children.length > 0) {\n        width = axis.axisHeader.width();\n        axis.set(\"marginLeft\", width + 1);\n      } else {\n        axisHeader.set(\"width\", width);\n      }\n      axisHeader.setAll({\n        x: x,\n        y: -1,\n        height: plotContainer.height() + 2\n      });\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  processAxis() {\n    super.processAxis();\n    const axis = this.axis;\n    axis.set(\"width\", p100);\n    const verticalLayout = this._root.verticalLayout;\n    axis.set(\"layout\", verticalLayout);\n    axis.labelsContainer.set(\"width\", p100);\n    axis.axisHeader.setAll({\n      layout: verticalLayout\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  axisLength() {\n    return this.axis.width();\n  }\n  /**\r\n   * Converts axis relative position to actual coordinate in pixels.\r\n   *\r\n   * @param   position  Position\r\n   * @return            Point\r\n   */\n  positionToPoint(position) {\n    return {\n      x: this.positionToCoordinate(position),\n      y: 0\n    };\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateTick(tick, position, endPosition, count) {\n    if (tick) {\n      if (!$type.isNumber(position)) {\n        position = 0;\n      }\n      let location = 0.5;\n      if ($type.isNumber(count) && count > 1) {\n        location = tick.get(\"multiLocation\", location);\n      } else {\n        location = tick.get(\"location\", location);\n      }\n      if ($type.isNumber(endPosition) && endPosition != position) {\n        position = position + (endPosition - position) * location;\n      }\n      tick.set(\"x\", this.positionToCoordinate(position));\n      let length = tick.get(\"length\", 0);\n      const inside = tick.get(\"inside\", this.get(\"inside\", false));\n      if (this.get(\"opposite\")) {\n        tick.set(\"y\", p100);\n        if (!inside) {\n          length *= -1;\n        }\n      } else {\n        tick.set(\"y\", 0);\n        if (inside) {\n          length *= -1;\n        }\n      }\n      tick.set(\"draw\", display => {\n        display.moveTo(0, 0);\n        display.lineTo(0, length);\n      });\n      this.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateLabel(label, position, endPosition, count) {\n    if (label) {\n      let location = 0.5;\n      if ($type.isNumber(count) && count > 1) {\n        location = label.get(\"multiLocation\", location);\n      } else {\n        location = label.get(\"location\", location);\n      }\n      if (!$type.isNumber(position)) {\n        position = 0;\n      }\n      const inside = label.get(\"inside\", this.get(\"inside\", false));\n      const opposite = this.get(\"opposite\");\n      if (opposite) {\n        if (!inside) {\n          label.set(\"position\", \"relative\");\n          label.set(\"y\", p100);\n        } else {\n          label.set(\"position\", \"absolute\");\n          label.set(\"y\", 0);\n        }\n      } else {\n        if (!inside) {\n          label.set(\"y\", undefined);\n          label.set(\"position\", \"relative\");\n        } else {\n          label.set(\"y\", 0);\n          label.set(\"position\", \"absolute\");\n        }\n      }\n      if ($type.isNumber(endPosition) && endPosition != position) {\n        position = position + (endPosition - position) * location;\n      }\n      label.set(\"x\", this.positionToCoordinate(position));\n      this.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateGrid(grid, position, endPosition) {\n    if (grid) {\n      if (!$type.isNumber(position)) {\n        position = 0;\n      }\n      let location = grid.get(\"location\", 0.5);\n      if ($type.isNumber(endPosition) && endPosition != position) {\n        position = position + (endPosition - position) * location;\n      }\n      grid.set(\"x\", this.positionToCoordinate(position));\n      this.toggleVisibility(grid, position, 0, 1);\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateBullet(bullet, position, endPosition) {\n    if (bullet) {\n      const sprite = bullet.get(\"sprite\");\n      if (sprite) {\n        if (!$type.isNumber(position)) {\n          position = 0;\n        }\n        let location = bullet.get(\"location\", 0.5);\n        if ($type.isNumber(endPosition) && endPosition != position) {\n          position = position + (endPosition - position) * location;\n        }\n        let bulletPosition = this.axis.roundAxisPosition(position, location);\n        let previousBullet = this.axis._bullets[bulletPosition];\n        let d = -1;\n        if (this.get(\"opposite\")) {\n          d = 1;\n        }\n        if (bullet.get(\"stacked\")) {\n          if (previousBullet) {\n            let previousSprite = previousBullet.get(\"sprite\");\n            if (previousSprite) {\n              sprite.set(\"y\", previousSprite.y() + previousSprite.height() * d);\n            }\n          } else {\n            sprite.set(\"y\", 0);\n          }\n        }\n        this.axis._bullets[bulletPosition] = bullet;\n        sprite.set(\"x\", this.positionToCoordinate(position));\n        this.toggleVisibility(sprite, position, 0, 1);\n      }\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateFill(fill, position, endPosition) {\n    if (fill) {\n      if (!$type.isNumber(position)) {\n        position = 0;\n      }\n      if (!$type.isNumber(endPosition)) {\n        endPosition = 1;\n      }\n      let x0 = this.positionToCoordinate(position);\n      let x1 = this.positionToCoordinate(endPosition);\n      this.fillDrawMethod(fill, x0, x1);\n    }\n  }\n  fillDrawMethod(fill, x0, x1) {\n    fill.set(\"draw\", display => {\n      //display.drawRect(x0, 0, x1 - x0, this.axis!.gridContainer.height());\n      // using for holes, so can not be rectangle\n      const h = this.axis.gridContainer.height();\n      const w = this.width();\n      if (x1 < x0) {\n        [x1, x0] = [x0, x1];\n      }\n      if (x0 > w || x1 < 0) {\n        return;\n      }\n      /*\r\n      const limit = 10000;\r\n        x0 = Math.max(-limit, x0);\r\n      x1 = Math.min(limit, x1);\r\n      */\n      display.moveTo(x0, 0);\n      display.lineTo(x1, 0);\n      display.lineTo(x1, h);\n      display.lineTo(x0, h);\n      display.lineTo(x0, 0);\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  positionTooltip(tooltip, position) {\n    this._positionTooltip(tooltip, {\n      x: this.positionToCoordinate(position),\n      y: 0\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateTooltipBounds(tooltip) {\n    const inside = this.get(\"inside\");\n    const num = 100000;\n    let global = this._display.toGlobal({\n      x: 0,\n      y: 0\n    });\n    let x = global.x;\n    let y = 0;\n    let w = this.axisLength();\n    let h = num;\n    let pointerOrientation = \"up\";\n    if (this.get(\"opposite\")) {\n      if (inside) {\n        pointerOrientation = \"up\";\n        y = global.y;\n        h = num;\n      } else {\n        pointerOrientation = \"down\";\n        y = global.y - num;\n        h = num;\n      }\n    } else {\n      if (inside) {\n        pointerOrientation = \"down\";\n        y = global.y - num;\n        h = num;\n      } else {\n        pointerOrientation = \"up\";\n        y = global.y;\n        h = num;\n      }\n    }\n    const bounds = {\n      left: x,\n      right: x + w,\n      top: y,\n      bottom: y + h\n    };\n    const oldBounds = tooltip.get(\"bounds\");\n    if (!$utils.sameBounds(bounds, oldBounds)) {\n      tooltip.set(\"bounds\", bounds);\n      tooltip.set(\"pointerOrientation\", pointerOrientation);\n    }\n  }\n}\nObject.defineProperty(AxisRendererX, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"AxisRendererX\"\n});\nObject.defineProperty(AxisRendererX, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: AxisRenderer.classNames.concat([AxisRendererX.className])\n});","map":{"version":3,"names":["AxisRenderer","p100","$type","$utils","Rectangle","AxisRendererX","constructor","Object","defineProperty","new","_root","width","isMeasured","themeTags","_afterNew","_settings","mergeTags","setPrivateRaw","gridTemplate","grid","template","set","display","graphics","moveTo","lineTo","height","_changed","axis","ghostLabel","setPrivate","get","opposite","inside","isDirty","chart","axisChildren","children","addTag","removeTag","topAxesContainer","indexOf","insertIndex","moveValue","bottomAxesContainer","_applyThemes","labels","each","label","root","_markDirtyRedraw","markDirtySize","thumb","labelsContainer","_getPan","point1","point2","x","toAxisPosition","position","start","_start","end","_end","_ls","_lc","_updateLC","parent","w","innerWidth","axisLength","_updatePositions","relativeToValue","gridContainer","topGridContainer","bulletsContainer","y","plotContainer","axisHeader","length","setAll","processAxis","verticalLayout","layout","positionToPoint","positionToCoordinate","updateTick","tick","endPosition","count","isNumber","location","toggleVisibility","updateLabel","undefined","updateGrid","updateBullet","bullet","sprite","bulletPosition","roundAxisPosition","previousBullet","_bullets","d","previousSprite","updateFill","fill","x0","x1","fillDrawMethod","h","positionTooltip","tooltip","_positionTooltip","updateTooltipBounds","num","global","_display","toGlobal","pointerOrientation","bounds","left","right","top","bottom","oldBounds","sameBounds","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\charts\\xy\\axes\\AxisRendererX.ts"],"sourcesContent":["import { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"./AxisRenderer\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport type { IPoint } from \"../../../core/util/IPoint\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport type { AxisLabel } from \"./AxisLabel\";\nimport type { Grid } from \"./Grid\";\nimport type { AxisTick } from \"./AxisTick\";\nimport type { Graphics } from \"../../../core/render/Graphics\";\nimport type { Tooltip } from \"../../../core/render/Tooltip\";\nimport type { Template } from \"../../../core/util/Template\";\nimport type { AxisBullet } from \"./AxisBullet\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\n\n\nexport interface IAxisRendererXSettings extends IAxisRendererSettings {\n\n\t/**\n\t * If set to `true` the axis will be drawn on the opposite side of the plot\n\t * area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_position} for more info\n\t * @default false\n\t */\n\topposite?: boolean;\n\n\t/**\n\t * If set to `true`, all axis elements (ticks, labels) will be drawn inside\n\t * plot area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Labels_ticks_inside_plot_area} for more info\n\t * @default false\n\t */\n\tinside?: boolean;\n}\n\nexport interface IAxisRendererXPrivate extends IAxisRendererPrivate {\n}\n\n/**\n * Used to render horizontal axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\n * @important\n */\nexport class AxisRendererX extends AxisRenderer {\n\n\tpublic static className: string = \"AxisRendererX\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererX.className]);\n\n\tdeclare public _settings: IAxisRendererXSettings;\n\tdeclare public _privateSettings: IAxisRendererXPrivate;\n\n\tdeclare public readonly labelTemplate: Template<AxisLabel>;\n\n\tpublic thumb: Rectangle = Rectangle.new(this._root, { width: p100, isMeasured: false, themeTags: [\"axis\", \"x\", \"thumb\"] });\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"x\"]);\n\n\t\tsuper._afterNew();\n\t\tthis.setPrivateRaw(\"letter\", \"X\");\n\n\t\tconst gridTemplate = this.grid.template;\n\t\tgridTemplate.set(\"height\", p100);\n\t\tgridTemplate.set(\"width\", 0);\n\t\tgridTemplate.set(\"draw\", (display, graphics) => {\n\t\t\tdisplay.moveTo(0, 0);\n\t\t\tdisplay.lineTo(0, graphics.height());\n\t\t});\n\n\t\tthis.set(\"draw\", (display, graphics) => {\n\t\t\tdisplay.moveTo(0, 0);\n\t\t\tdisplay.lineTo(graphics.width(), 0);\n\t\t});\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tconst axis = this.axis;\n\t\taxis.ghostLabel.setPrivate(\"visible\", !this.get(\"inside\"));\n\t\taxis.ghostLabel.set(\"x\", -1000);\n\n\t\tconst opposite = \"opposite\"\n\t\tconst inside = \"inside\";\n\n\t\tif (this.isDirty(opposite) || this.isDirty(inside)) {\n\t\t\tconst chart = this.chart;\n\t\t\tconst axisChildren = axis.children;\n\n\t\t\tif (this.get(inside)) {\n\t\t\t\taxis.addTag(inside);\n\t\t\t}\n\t\t\telse {\n\t\t\t\taxis.removeTag(inside);\n\t\t\t}\n\n\t\t\tif (chart) {\n\t\t\t\tif (this.get(opposite)) {\n\t\t\t\t\tconst children = chart.topAxesContainer.children;\n\t\t\t\t\tif (children.indexOf(axis) == -1) {\n\t\t\t\t\t\tchildren.insertIndex(0, axis);\n\t\t\t\t\t}\n\t\t\t\t\taxis.addTag(opposite);\n\t\t\t\t\taxisChildren.moveValue(this);\n\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst children = chart.bottomAxesContainer.children;\n\t\t\t\t\tif (children.indexOf(axis) == -1) {\n\t\t\t\t\t\tchildren.moveValue(axis);\n\t\t\t\t\t}\n\t\t\t\t\taxis.removeTag(opposite);\n\n\t\t\t\t\taxisChildren.moveValue(this, 0);\n\n\t\t\t\t}\n\n\t\t\t\taxis.ghostLabel._applyThemes();\n\t\t\t\tthis.labels.each((label) => {\n\t\t\t\t\tlabel._applyThemes();\n\t\t\t\t})\n\t\t\t\tthis.root._markDirtyRedraw();\n\t\t\t}\n\t\t\taxis.markDirtySize();\n\t\t}\n\n\t\tthis.thumb.setPrivate(\"height\", axis.labelsContainer.height());\n\t}\n\n\n\tprotected _getPan(point1: IPoint, point2: IPoint): number {\n\t\treturn (point2.x - point1.x) / this.width();\n\t}\n\n\n\tpublic toAxisPosition(position: number): number {\n\t\tconst start = this._start || 0;\n\t\tconst end = this._end || 1;\n\n\t\tposition -= this._ls;\n\n\t\tposition = position * (end - start) / this._lc;\n\t\tif (!this.get(\"inversed\")) {\n\t\t\tposition = start + position;\n\t\t}\n\t\telse {\n\t\t\tposition = end - position;\n\t\t}\n\n\t\treturn position;\n\t}\n\n\n\tpublic _updateLC() {\n\t\tconst axis = this.axis;\n\t\tconst parent = axis.parent;\n\t\tif (parent) {\n\t\t\tconst w = parent.innerWidth();\n\t\t\tthis._lc = this.axisLength() / w;\n\t\t\tthis._ls = (axis.x() - parent.get(\"paddingLeft\", 0)) / w;\n\t\t}\n\t}\n\n\tpublic _updatePositions() {\n\t\tconst axis = this.axis;\n\t\tconst x = axis.x() - $utils.relativeToValue(axis.get(\"centerX\", 0), axis.width()) - axis.parent!.get(\"paddingLeft\", 0);\n\t\taxis.gridContainer.set(\"x\", x);\n\t\taxis.topGridContainer.set(\"x\", x);\n\t\taxis.bulletsContainer.set(\"y\", this.y());\n\n\t\tconst chart = axis.chart;\n\t\tif (chart) {\n\t\t\tconst plotContainer = chart.plotContainer;\n\t\t\tconst axisHeader = axis.axisHeader;\n\t\t\tlet width = axis.get(\"marginLeft\", 0);\n\n\t\t\tlet x = axis.x() - width;\n\n\t\t\tconst parent = axis.parent;\n\t\t\tif (parent) {\n\t\t\t\tx -= parent.get(\"paddingLeft\", 0);\n\t\t\t}\n\n\t\t\tif (axisHeader.children.length > 0) {\n\t\t\t\twidth = axis.axisHeader.width();\n\t\t\t\taxis.set(\"marginLeft\", width + 1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\taxisHeader.set(\"width\", width);\n\t\t\t}\n\t\t\taxisHeader.setAll({ x: x, y: -1, height: plotContainer.height() + 2 });\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis() {\n\t\tsuper.processAxis();\n\t\tconst axis = this.axis;\n\t\taxis.set(\"width\", p100);\n\t\tconst verticalLayout = this._root.verticalLayout;\n\t\taxis.set(\"layout\", verticalLayout);\n\t\taxis.labelsContainer.set(\"width\", p100);\n\t\taxis.axisHeader.setAll({ layout: verticalLayout });\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic axisLength(): number {\n\t\treturn this.axis.width();\n\t}\n\n\t/**\n\t * Converts axis relative position to actual coordinate in pixels.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number): IPoint {\n\t\treturn { x: this.positionToCoordinate(position), y: 0 };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location)\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\ttick.set(\"x\", this.positionToCoordinate(position));\n\n\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\tconst inside = tick.get(\"inside\", this.get(\"inside\", false));\n\n\t\t\tif (this.get(\"opposite\")) {\n\t\t\t\ttick.set(\"y\", p100);\n\t\t\t\tif (!inside) {\n\t\t\t\t\tlength *= -1\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttick.set(\"y\", 0);\n\t\t\t\tif (inside) {\n\t\t\t\t\tlength *= -1\n\t\t\t\t}\n\t\t\t}\n\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(0, 0);\n\t\t\t\tdisplay.lineTo(0, length);\n\t\t\t})\n\n\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabel, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location)\n\t\t\t}\n\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tconst inside = label.get(\"inside\", this.get(\"inside\", false));\n\n\t\t\tconst opposite = this.get(\"opposite\");\n\t\t\tif (opposite) {\n\t\t\t\tif (!inside) {\n\t\t\t\t\tlabel.set(\"position\", \"relative\");\n\t\t\t\t\tlabel.set(\"y\", p100);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlabel.set(\"position\", \"absolute\");\n\t\t\t\t\tlabel.set(\"y\", 0)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!inside) {\n\t\t\t\t\tlabel.set(\"y\", undefined);\n\t\t\t\t\tlabel.set(\"position\", \"relative\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlabel.set(\"y\", 0)\n\t\t\t\t\tlabel.set(\"position\", \"absolute\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlabel.set(\"x\", this.positionToCoordinate(position));\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tgrid.set(\"x\", this.positionToCoordinate(position));\n\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\tif (sprite) {\n\t\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\n\t\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\t\t\t\tlet bulletPosition = this.axis.roundAxisPosition(position, location);\n\t\t\t\tlet previousBullet = this.axis._bullets[bulletPosition];\n\t\t\t\tlet d = -1;\n\t\t\t\tif(this.get(\"opposite\")){\n\t\t\t\t\td = 1;\n\t\t\t\t}\n\n\t\t\t\tif (bullet.get(\"stacked\")) {\n\t\t\t\t\tif (previousBullet) {\n\t\t\t\t\t\tlet previousSprite = previousBullet.get(\"sprite\");\n\t\t\t\t\t\tif (previousSprite) {\n\t\t\t\t\t\t\tsprite.set(\"y\", previousSprite.y() + previousSprite.height() * d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsprite.set(\"y\", 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.axis._bullets[bulletPosition] = bullet;\n\t\t\t\tsprite.set(\"x\", this.positionToCoordinate(position));\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Graphics, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (!$type.isNumber(endPosition)) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tlet x0 = this.positionToCoordinate(position);\n\t\t\tlet x1 = this.positionToCoordinate(endPosition);\n\n\t\t\tthis.fillDrawMethod(fill, x0, x1);\n\t\t}\n\t}\n\n\tprotected fillDrawMethod(fill: Graphics, x0: number, x1: number) {\n\t\tfill.set(\"draw\", (display) => {\n\t\t\t//display.drawRect(x0, 0, x1 - x0, this.axis!.gridContainer.height());\n\t\t\t// using for holes, so can not be rectangle\n\t\t\tconst h = this.axis!.gridContainer.height();\n\t\t\tconst w = this.width();\n\n\t\t\tif (x1 < x0) {\n\t\t\t\t[x1, x0] = [x0, x1];\n\t\t\t}\n\t\t\tif (x0 > w || x1 < 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/*\n\t\t\tconst limit = 10000;\n\n\t\t\tx0 = Math.max(-limit, x0);\n\t\t\tx1 = Math.min(limit, x1);\n\t\t\t*/\n\n\t\t\tdisplay.moveTo(x0, 0);\n\t\t\tdisplay.lineTo(x1, 0);\n\t\t\tdisplay.lineTo(x1, h);\n\t\t\tdisplay.lineTo(x0, h);\n\t\t\tdisplay.lineTo(x0, 0);\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tthis._positionTooltip(tooltip, { x: this.positionToCoordinate(position), y: 0 })\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(tooltip: Tooltip) {\n\t\tconst inside = this.get(\"inside\");\n\t\tconst num = 100000;\n\n\t\tlet global = this._display.toGlobal({ x: 0, y: 0 });\n\t\tlet x = global.x;\n\t\tlet y = 0;\n\t\tlet w = this.axisLength();\n\t\tlet h = num;\n\n\t\tlet pointerOrientation: \"up\" | \"down\" = \"up\";\n\n\t\tif (this.get(\"opposite\")) {\n\t\t\tif (inside) {\n\t\t\t\tpointerOrientation = \"up\";\n\t\t\t\ty = global.y;\n\t\t\t\th = num;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpointerOrientation = \"down\";\n\t\t\t\ty = global.y - num;\n\t\t\t\th = num;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (inside) {\n\t\t\t\tpointerOrientation = \"down\";\n\t\t\t\ty = global.y - num;\n\t\t\t\th = num;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpointerOrientation = \"up\";\n\t\t\t\ty = global.y;\n\t\t\t\th = num;\n\t\t\t}\n\t\t}\n\n\t\tconst bounds = { left: x, right: x + w, top: y, bottom: y + h };\n\t\tconst oldBounds = tooltip.get(\"bounds\");\n\n\t\tif (!$utils.sameBounds(bounds, oldBounds)) {\n\t\t\ttooltip.set(\"bounds\", bounds);\n\t\t\ttooltip.set(\"pointerOrientation\", pointerOrientation);\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}