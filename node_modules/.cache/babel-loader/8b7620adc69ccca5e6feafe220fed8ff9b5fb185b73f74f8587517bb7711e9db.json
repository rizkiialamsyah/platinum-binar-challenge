{"ast":null,"code":"import { Entity } from \"./Entity\";\nimport { Color } from \"./Color\";\nimport * as $type from \"./Type\";\nimport * as $object from \"./Object\";\nimport * as $array from \"./Array\";\n/**\r\n * A tool that can process the data before it is being used in charts.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data} for more info\r\n * @important\r\n */\nexport class DataProcessor extends Entity {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_checkDates\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_checkNumbers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_checkColors\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_checkEmpty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_checkDeep\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n  }\n  _afterNew() {\n    super._afterNew();\n    this._checkFeatures();\n    this.on(\"dateFields\", () => this._checkFeatures());\n    this.on(\"dateFormat\", () => this._checkFeatures());\n    this.on(\"numericFields\", () => this._checkFeatures());\n    this.on(\"colorFields\", () => this._checkFeatures());\n    this.on(\"emptyAs\", () => this._checkFeatures());\n  }\n  _checkFeatures() {\n    if (this.isDirty(\"dateFields\") || this.isDirty(\"dateFormat\")) {\n      this._checkDates = this.get(\"dateFields\") && this.get(\"dateFields\").length > 0;\n    }\n    if (this.isDirty(\"numericFields\")) {\n      this._checkNumbers = this.get(\"numericFields\") && this.get(\"numericFields\").length > 0;\n    }\n    if (this.isDirty(\"colorFields\")) {\n      this._checkColors = this.get(\"colorFields\") && this.get(\"colorFields\").length > 0;\n    }\n    if (this.isDirty(\"emptyAs\")) {\n      this._checkEmpty = this.get(\"emptyAs\") != null;\n    }\n    this._checkDeepFeatures();\n  }\n  _checkDeepFeatures() {\n    const deepFields = [];\n    $array.each([\"dateFields\", \"numericFields\", \"colorFields\"], where => {\n      $array.each(this.get(where, []), field => {\n        const steps = field.split(\".\");\n        steps.pop();\n        while (steps.length > 0) {\n          deepFields.push(steps.join(\".\"));\n          steps.pop();\n        }\n      });\n    });\n    this._checkDeep = deepFields.length > 0;\n    this.setPrivate(\"deepFields\", deepFields);\n  }\n  /**\r\n   * Processess entire array of data.\r\n   *\r\n   * NOTE: calling this will modify original array!\r\n   */\n  processMany(data) {\n    if ($type.isArray(data) && (this._checkDates || this._checkNumbers || this._checkColors || this._checkEmpty)) {\n      $array.each(data, row => {\n        this.processRow(row);\n      });\n    }\n  }\n  /**\r\n   * Processes a row (object) of data.\r\n   *\r\n   * NOTE: calling this will modify values of the original object!\r\n   */\n  processRow(row) {\n    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    $object.each(row, (key, _value) => {\n      const lookupKey = prefix + key;\n      if (this._checkEmpty) {\n        row[key] = this._maybeToEmpty(row[key]);\n      }\n      if (this._checkNumbers) {\n        row[key] = this._maybeToNumber(lookupKey, row[key]);\n      }\n      if (this._checkDates) {\n        row[key] = this._maybeToDate(lookupKey, row[key]);\n      }\n      if (this._checkColors) {\n        row[key] = this._maybeToColor(lookupKey, row[key]);\n      }\n      if (this._checkDeep && this.getPrivate(\"deepFields\", []).indexOf(lookupKey) !== -1 && $type.isObject(row[key])) {\n        this.processRow(row[key], lookupKey + \".\");\n      }\n    });\n  }\n  _maybeToNumber(field, value) {\n    if (this.get(\"numericFields\").indexOf(field) !== -1) {\n      return $type.toNumber(value);\n    }\n    return value;\n  }\n  _maybeToDate(field, value) {\n    if (this.get(\"dateFields\").indexOf(field) !== -1) {\n      return this._root.dateFormatter.parse(value, this.get(\"dateFormat\", \"\")).getTime();\n    }\n    return value;\n  }\n  _maybeToEmpty(value) {\n    if ((value == null || value == \"\") && this.get(\"emptyAs\") != null) {\n      return this.get(\"emptyAs\");\n    }\n    return value;\n  }\n  _maybeToColor(field, value) {\n    if (this.get(\"colorFields\").indexOf(field) !== -1) {\n      return Color.fromAny(value);\n    }\n    return value;\n  }\n}","map":{"version":3,"names":["Entity","Color","$type","$object","$array","DataProcessor","constructor","Object","defineProperty","_afterNew","_checkFeatures","on","isDirty","_checkDates","get","length","_checkNumbers","_checkColors","_checkEmpty","_checkDeepFeatures","deepFields","each","where","field","steps","split","pop","push","join","_checkDeep","setPrivate","processMany","data","isArray","row","processRow","prefix","arguments","undefined","key","_value","lookupKey","_maybeToEmpty","_maybeToNumber","_maybeToDate","_maybeToColor","getPrivate","indexOf","isObject","value","toNumber","_root","dateFormatter","parse","getTime","fromAny"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\util\\DataProcessor.ts"],"sourcesContent":["import { Entity, IEntitySettings, IEntityPrivate, IEntityEvents } from \"./Entity\"\nimport { Color } from \"./Color\"\nimport * as $type from \"./Type\"\nimport * as $object from \"./Object\"\nimport * as $array from \"./Array\"\n\n\nexport interface IDataProcessorSettings extends IEntitySettings {\n\n\t/**\n\t * Date format used for parsing string-based dates.\n\t */\n\tdateFormat?: string;\n\n\t/**\n\t * A list of fields in data that need to be converted to tiemstamps.\n\t */\n\tdateFields?: string[];\n\n\t/**\n\t * A list of fields in data that need to be converted to numbers.\n\t */\n\tnumericFields?: string[];\n\n\t/**\n\t * A list of fields in data that need to be converted to [[Color]] objects.\n\t */\n\tcolorFields?: string[];\n\n\t/**\n\t * Replace empty values with this.\n\t */\n\temptyAs?: any;\n\n}\n\nexport interface IDataProcessorPrivate extends IEntityPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tdeepFields?: string[];\n}\n\nexport interface IDataProcessorEvents extends IEntityEvents {\n}\n\n/**\n * A tool that can process the data before it is being used in charts.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data} for more info\n * @important\n */\nexport class DataProcessor extends Entity {\n\tdeclare public _settings: IDataProcessorSettings;\n\tdeclare public _privateSettings: IDataProcessorPrivate;\n\n\tprotected _checkDates: boolean = false;\n\tprotected _checkNumbers: boolean = false;\n\tprotected _checkColors: boolean = false;\n\tprotected _checkEmpty: boolean = false;\n\tprotected _checkDeep: boolean = false;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis._checkFeatures();\n\t\tthis.on(\"dateFields\", () => this._checkFeatures());\n\t\tthis.on(\"dateFormat\", () => this._checkFeatures());\n\t\tthis.on(\"numericFields\", () => this._checkFeatures());\n\t\tthis.on(\"colorFields\", () => this._checkFeatures());\n\t\tthis.on(\"emptyAs\", () => this._checkFeatures());\n\t}\n\n\tprotected _checkFeatures(): void {\n\t\tif (this.isDirty(\"dateFields\") || this.isDirty(\"dateFormat\")) {\n\t\t\tthis._checkDates = this.get(\"dateFields\") && (this.get(\"dateFields\")!.length > 0);\n\t\t}\n\t\tif (this.isDirty(\"numericFields\")) {\n\t\t\tthis._checkNumbers = this.get(\"numericFields\") && (this.get(\"numericFields\")!.length > 0);\n\t\t}\n\t\tif (this.isDirty(\"colorFields\")) {\n\t\t\tthis._checkColors = this.get(\"colorFields\") && (this.get(\"colorFields\")!.length > 0);\n\t\t}\n\t\tif (this.isDirty(\"emptyAs\")) {\n\t\t\tthis._checkEmpty = this.get(\"emptyAs\") != null;\n\t\t}\n\t\tthis._checkDeepFeatures();\n\t}\n\n\tprotected _checkDeepFeatures(): void {\n\t\tconst deepFields: string[] = [];\n\t\t$array.each([\"dateFields\", \"numericFields\", \"colorFields\"], (where: any) => {\n\t\t\t$array.each(this.get(where, []), (field) => {\n\t\t\t\tconst steps = (<string>field).split(\".\");\n\t\t\t\tsteps.pop();\n\t\t\t\twhile (steps.length > 0) {\n\t\t\t\t\tdeepFields.push(steps.join(\".\"));\n\t\t\t\t\tsteps.pop();\n\t\t\t\t}\n\t\t\t});\n\t\t})\n\t\tthis._checkDeep = deepFields.length > 0;\n\t\tthis.setPrivate(\"deepFields\", deepFields);\n\t}\n\n\t/**\n\t * Processess entire array of data.\n\t *\n\t * NOTE: calling this will modify original array!\n\t */\n\tpublic processMany(data: { [index: string]: any }[]): void {\n\t\tif ($type.isArray(data) && (this._checkDates || this._checkNumbers || this._checkColors || this._checkEmpty)) {\n\t\t\t$array.each(data, (row) => {\n\t\t\t\tthis.processRow(row);\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Processes a row (object) of data.\n\t * \n\t * NOTE: calling this will modify values of the original object!\n\t */\n\tpublic processRow(row: { [index: string]: any }, prefix: string = \"\"): void {\n\t\t$object.each(row, (key: any, _value) => {\n\t\t\tconst lookupKey: string = prefix + key;\n\t\t\tif (this._checkEmpty) {\n\t\t\t\trow[key] = this._maybeToEmpty(row[key]);\n\t\t\t}\n\t\t\tif (this._checkNumbers) {\n\t\t\t\trow[key] = this._maybeToNumber(lookupKey, row[key]);\n\t\t\t}\n\t\t\tif (this._checkDates) {\n\t\t\t\trow[key] = this._maybeToDate(lookupKey, row[key]);\n\t\t\t}\n\t\t\tif (this._checkColors) {\n\t\t\t\trow[key] = this._maybeToColor(lookupKey, row[key]);\n\t\t\t}\n\t\t\tif (this._checkDeep && (<any>this).getPrivate(\"deepFields\", []).indexOf(lookupKey) !== -1 && $type.isObject(row[key])) {\n\t\t\t\tthis.processRow(row[key], lookupKey + \".\");\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _maybeToNumber(field: string, value: any): any {\n\t\tif (this.get(\"numericFields\")!.indexOf(field) !== -1) {\n\t\t\treturn $type.toNumber(value);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprotected _maybeToDate(field: string, value: any): any {\n\t\tif (this.get(\"dateFields\")!.indexOf(field) !== -1) {\n\t\t\treturn this._root.dateFormatter.parse(value, this.get(\"dateFormat\", \"\")).getTime();\n\t\t}\n\t\treturn value;\n\t}\n\n\tprotected _maybeToEmpty(value: any): any {\n\t\tif ((value == null || value == \"\") && this.get(\"emptyAs\") != null) {\n\t\t\treturn this.get(\"emptyAs\");\n\t\t}\n\t\treturn value;\n\t}\n\n\tprotected _maybeToColor(field: string, value: any): any {\n\t\tif (this.get(\"colorFields\")!.indexOf(field) !== -1) {\n\t\t\treturn Color.fromAny(value);\n\t\t}\n\t\treturn value;\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}