{"ast":null,"code":"import { Pattern } from \"./Pattern\";\nimport * as $math from \"../../util/Math\";\n/**\r\n * Rectangle pattern.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\nexport class RectanglePattern extends Pattern {\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isDirty(\"gap\")) {\n      this._clear = true;\n    }\n  }\n  _draw() {\n    super._draw();\n    const checkered = this.get(\"checkered\", false);\n    const centered = this.get(\"centered\", true);\n    const gap = this.get(\"gap\", 0);\n    const rotation = this.get(\"rotation\", 0);\n    let w = this.get(\"width\", 100);\n    let h = this.get(\"height\", 100);\n    let rectW = this.get(\"maxWidth\", 5);\n    let rectH = this.get(\"maxHeight\", 5);\n    let cellW = rectW + gap;\n    let cellH = rectH + gap;\n    let cols = Math.round(w / cellW);\n    let rows = Math.round(h / cellH);\n    cellW = w / cols;\n    cellH = h / rows;\n    if (rotation != 0) {\n      // @todo this is probably not right\n      this._display.x = cellW / 2 * $math.cos(rotation);\n      this._display.y = -cellH / 2 * $math.sin(rotation);\n    }\n    for (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n      for (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n        if (!checkered || (r & 1) != 1 && (c & 1) != 1 || (r & 1) == 1 && (c & 1) == 1) {\n          let x = c * cellW;\n          let y = r * cellH;\n          if (centered) {\n            x += (cellW - rectW) / 2;\n            y += (cellH - rectH) / 2;\n          }\n          this._display.drawRect(x, y, rectW, rectH);\n        }\n      }\n    }\n    if (checkered) {\n      w = w / 2 - gap * 2;\n      h = h / 2 - gap * 2;\n    } else {\n      w -= gap;\n      h -= gap;\n    }\n    const color = this.get(\"color\");\n    const colorOpacity = this.get(\"colorOpacity\");\n    if (color || colorOpacity) {\n      // this._display.lineStyle(strokeWidth, stroke, colorOpacity);\n      // this._display.endStroke();\n      this._display.beginFill(color, colorOpacity);\n      this._display.endFill();\n    }\n  }\n}\nObject.defineProperty(RectanglePattern, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"RectanglePattern\"\n});\nObject.defineProperty(RectanglePattern, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Pattern.classNames.concat([RectanglePattern.className])\n});","map":{"version":3,"names":["Pattern","$math","RectanglePattern","_beforeChanged","isDirty","_clear","_draw","checkered","get","centered","gap","rotation","w","h","rectW","rectH","cellW","cellH","cols","Math","round","rows","_display","x","cos","y","sin","r","c","drawRect","color","colorOpacity","beginFill","endFill","Object","defineProperty","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\patterns\\RectanglePattern.ts"],"sourcesContent":["import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\nimport * as $math from \"../../util/Math\";\n\nexport interface IRectanglePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between rectangles, in pixels.\n\t *\n\t * @default 6\n\t */\n\tgap?: number;\n\n\t/**\n\t * Maximum width of the rectangle, in pixels.\n\t *\n\t * @default 5\n\t */\n\tmaxWidth?: number;\n\n\t/**\n\t * Maximum height of the rectangle, in pixels.\n\t *\n\t * @default 5\n\t */\n\tmaxHeight?: number;\n\n\t/**\n\t * If set to `true`, will place every second rectangle, creating checkered\n\t * pattern.\n\t *\n\t * @default false\n\t */\n\tcheckered?: boolean;\n\n\t/**\n\t * Center rectangles.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface IRectanglePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Rectangle pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class RectanglePattern extends Pattern {\n\tdeclare public _settings: IRectanglePatternSettings;\n\tdeclare public _privateSettings: IRectanglePatternPrivate;\n\n\tpublic static className: string = \"RectanglePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([RectanglePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst checkered = this.get(\"checkered\", false);\n\t\tconst centered = this.get(\"centered\", true);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet w = this.get(\"width\", 100);\n\t\tlet h = this.get(\"height\", 100);\n\t\tlet rectW = this.get(\"maxWidth\", 5);\n\t\tlet rectH = this.get(\"maxHeight\", 5);\n\n\n\t\tlet cellW = rectW + gap;\n\t\tlet cellH = rectH + gap;\n\n\t\tlet cols = Math.round(w / cellW);\n\t\tlet rows = Math.round(h / cellH);\n\n\t\tcellW = w / cols;\n\t\tcellH = h / rows;\n\n\t\tif (rotation != 0) {\n\t\t\t// @todo this is probably not right\n\t\t\tthis._display.x = cellW / 2 * $math.cos(rotation);\n\t\t\tthis._display.y = -cellH / 2 * $math.sin(rotation);\n\t\t}\n\n\t\tfor (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t\tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t\t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t\t\t\tlet x = c * cellW;\n\t\t\t\t\tlet y = r * cellH;\n\t\t\t\t\tif (centered) {\n\t\t\t\t\t\tx += (cellW - rectW) / 2;\n\t\t\t\t\t\ty += (cellH - rectH) / 2;\n\t\t\t\t\t}\n\t\t\t\t\tthis._display.drawRect(x, y, rectW, rectH);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (checkered) {\n\t\t\tw = w / 2 - gap * 2;\n\t\t\th = h / 2 - gap * 2;\n\t\t}\n\t\telse {\n\t\t\tw -= gap;\n\t\t\th -= gap;\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\t// this._display.lineStyle(strokeWidth, stroke, colorOpacity);\n\t\t\t// this._display.endStroke();\n\t\t\tthis._display.beginFill(color, colorOpacity);\n\t\t\tthis._display.endFill();\n\t\t}\n\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}