{"ast":null,"code":"import { Series } from \"./Series\";\nimport { Container } from \"../../core/render/Container\";\nimport { Label } from \"../../core/render/Label\";\nimport { RoundedRectangle } from \"../../core/render/RoundedRectangle\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport * as $utils from \"../../core/util/Utils\";\n/**\r\n * A universal legend control.\r\n *\r\n * @important\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/} for more info\r\n */\nexport class Legend extends Series {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * List of all [[Container]] elements for legend items.\r\n     *\r\n     * @default new ListTemplate<Container>\r\n     */\n    Object.defineProperty(this, \"itemContainers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), () => Container._new(this._root, {\n        themeTags: $utils.mergeTags(this.itemContainers.template.get(\"themeTags\", []), [\"legend\", \"item\"]),\n        themeTagsSelf: $utils.mergeTags(this.itemContainers.template.get(\"themeTagsSelf\", []), [\"itemcontainer\"]),\n        background: RoundedRectangle.new(this._root, {\n          themeTags: $utils.mergeTags(this.itemContainers.template.get(\"themeTags\", []), [\"legend\", \"item\", \"background\"]),\n          themeTagsSelf: $utils.mergeTags(this.itemContainers.template.get(\"themeTagsSelf\", []), [\"itemcontainer\"])\n        })\n      }, [this.itemContainers.template]))\n    });\n    /**\r\n     * List of legend marker elements.\r\n     *\r\n     * @default new ListTemplate<Container>\r\n     */\n    Object.defineProperty(this, \"markers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), () => Container._new(this._root, {\n        themeTags: $utils.mergeTags(this.markers.template.get(\"themeTags\", []), [\"legend\", \"marker\"])\n      }, [this.markers.template]))\n    });\n    /**\r\n     * List of legend label elements.\r\n     *\r\n     * @default new ListTemplate<Label>\r\n     */\n    Object.defineProperty(this, \"labels\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), () => Label._new(this._root, {\n        themeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"legend\", \"label\"])\n      }, [this.labels.template]))\n    });\n    /**\r\n     * List of legend value label elements.\r\n     *\r\n     * @default new ListTemplate<label>\r\n     */\n    Object.defineProperty(this, \"valueLabels\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), () => Label._new(this._root, {\n        themeTags: $utils.mergeTags(this.valueLabels.template.get(\"themeTags\", []), [\"legend\", \"label\", \"value\"])\n      }, [this.valueLabels.template]))\n    });\n    /**\r\n     * List of rectangle elements used for default legend markers.\r\n     *\r\n     * @default new ListTemplate<RoundedRectangle>\r\n     */\n    Object.defineProperty(this, \"markerRectangles\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), () => RoundedRectangle._new(this._root, {\n        themeTags: $utils.mergeTags(this.markerRectangles.template.get(\"themeTags\", []), [\"legend\", \"marker\", \"rectangle\"])\n      }, [this.markerRectangles.template]))\n    });\n  }\n  _afterNew() {\n    this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"legend\"]);\n    this.fields.push(\"name\", \"stroke\", \"fill\");\n    super._afterNew();\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeItemContainer(dataItem) {\n    const itemContainer = this.children.push(this.itemContainers.make());\n    itemContainer._setDataItem(dataItem);\n    this.itemContainers.push(itemContainer);\n    itemContainer.states.create(\"disabled\", {});\n    return itemContainer;\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeMarker() {\n    const marker = this.markers.make();\n    this.markers.push(marker);\n    marker.states.create(\"disabled\", {});\n    return marker;\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeLabel() {\n    const label = this.labels.make();\n    label.states.create(\"disabled\", {});\n    return label;\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeValueLabel() {\n    const valueLabel = this.valueLabels.make();\n    valueLabel.states.create(\"disabled\", {});\n    return valueLabel;\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeMarkerRectangle() {\n    const markerRectangle = this.markerRectangles.make();\n    markerRectangle.states.create(\"disabled\", {});\n    return markerRectangle;\n  }\n  processDataItem(dataItem) {\n    super.processDataItem(dataItem);\n    const itemContainer = this.makeItemContainer(dataItem);\n    const nameField = this.get(\"nameField\");\n    const fillField = this.get(\"fillField\");\n    const strokeField = this.get(\"strokeField\");\n    if (itemContainer) {\n      const clickTarget = this.get(\"clickTarget\", \"itemContainer\");\n      const item = dataItem.dataContext;\n      if (item && item.set) {\n        item.set(\"legendDataItem\", dataItem);\n      }\n      itemContainer._setDataItem(dataItem);\n      dataItem.set(\"itemContainer\", itemContainer);\n      const marker = this.makeMarker();\n      if (marker) {\n        itemContainer.children.push(marker);\n        marker._setDataItem(dataItem);\n        dataItem.set(\"marker\", marker);\n        const useDefaultMarker = this.get(\"useDefaultMarker\");\n        const markerRectangle = marker.children.push(this.makeMarkerRectangle());\n        let fill = dataItem.get(\"fill\");\n        let stroke = dataItem.get(\"stroke\");\n        dataItem.set(\"markerRectangle\", markerRectangle);\n        if (item && item.get) {\n          fill = item.get(fillField, fill);\n          stroke = item.get(strokeField, stroke);\n        }\n        if (!stroke) {\n          stroke = fill;\n        }\n        if (!useDefaultMarker) {\n          if (item && item.createLegendMarker) {\n            item.createLegendMarker();\n          }\n        } else {\n          if (item.on) {\n            item.on(fillField, () => {\n              markerRectangle.set(\"fill\", item.get(fillField));\n            });\n            item.on(strokeField, () => {\n              markerRectangle.set(\"stroke\", item.get(strokeField));\n            });\n          }\n        }\n        markerRectangle.setAll({\n          fill,\n          stroke\n        });\n        // this solves if template field is set on slice\n        const component = item.component;\n        if (component && component.updateLegendMarker) {\n          component.updateLegendMarker(item);\n        }\n      }\n      const label = this.makeLabel();\n      if (label) {\n        itemContainer.children.push(label);\n        label._setDataItem(dataItem);\n        dataItem.set(\"label\", label);\n        label.text.on(\"text\", () => {\n          itemContainer.set(\"ariaLabel\", label.text._getText() + (this.get(\"clickTarget\") !== \"none\" ? \"; \" + this._t(\"Press ENTER to toggle\") : \"\"));\n        });\n        if (item && item.get) {\n          dataItem.set(\"name\", item.get(nameField));\n        }\n        let name = dataItem.get(\"name\");\n        if (name) {\n          label.set(\"text\", name);\n        }\n      }\n      const valueLabel = this.makeValueLabel();\n      if (valueLabel) {\n        itemContainer.children.push(valueLabel);\n        valueLabel._setDataItem(dataItem);\n        dataItem.set(\"valueLabel\", valueLabel);\n      }\n      if (item && item.show) {\n        this._disposers.push(item.on(\"visible\", visible => {\n          itemContainer.set(\"disabled\", !visible);\n        }));\n        if (!item.get(\"visible\")) {\n          itemContainer.set(\"disabled\", true);\n        }\n        if (clickTarget != \"none\") {\n          let clickContainer = itemContainer;\n          if (clickTarget == \"marker\") {\n            clickContainer = marker;\n          }\n          this._addClickEvents(clickContainer, item, dataItem);\n        }\n      }\n      // Sort children\n      this.children.values.sort((a, b) => {\n        const targetA = a.dataItem.dataContext;\n        const targetB = b.dataItem.dataContext;\n        if (targetA && targetB) {\n          const indexA = this.data.indexOf(targetA);\n          const indexB = this.data.indexOf(targetB);\n          if (indexA > indexB) {\n            return 1;\n          } else if (indexA < indexB) {\n            return -1;\n          }\n        }\n        return 0;\n      });\n      if (item && item.updateLegendValue) {\n        item.updateLegendValue();\n      }\n    }\n  }\n  _addClickEvents(container, item, dataItem) {\n    container.set(\"cursorOverStyle\", \"pointer\");\n    container.events.on(\"pointerover\", () => {\n      const component = item.component;\n      if (component && component.hoverDataItem) {\n        component.hoverDataItem(item);\n      }\n    });\n    container.events.on(\"pointerout\", () => {\n      const component = item.component;\n      if (component && component.hoverDataItem) {\n        component.unhoverDataItem(item);\n      }\n    });\n    container.events.on(\"click\", () => {\n      const labelText = dataItem.get(\"label\").text._getText();\n      if (item.show && item.isHidden && (item.isHidden() || item.get(\"visible\") === false)) {\n        item.show();\n        container.set(\"disabled\", false);\n        this._root.readerAlert(this._t(\"%1 shown\", this._root.locale, labelText));\n      } else if (item.hide) {\n        item.hide();\n        container.set(\"disabled\", true);\n        this._root.readerAlert(this._t(\"%1 hidden\", this._root.locale, labelText));\n      }\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  disposeDataItem(dataItem) {\n    super.disposeDataItem(dataItem);\n    const dataContext = dataItem.dataContext;\n    if (dataContext && dataContext.get) {\n      const di = dataContext.get(\"legendDataItem\");\n      if (di == dataItem) {\n        dataContext.set(\"legendDataItem\", undefined);\n      }\n    }\n    let itemContainer = dataItem.get(\"itemContainer\");\n    if (itemContainer) {\n      this.itemContainers.removeValue(itemContainer);\n      itemContainer.dispose();\n    }\n    let marker = dataItem.get(\"marker\");\n    if (marker) {\n      this.markers.removeValue(marker);\n      marker.dispose();\n    }\n    let markerRectangle = dataItem.get(\"markerRectangle\");\n    if (markerRectangle) {\n      this.markerRectangles.removeValue(markerRectangle);\n      markerRectangle.dispose();\n    }\n    let label = dataItem.get(\"label\");\n    if (label) {\n      this.labels.removeValue(label);\n      label.dispose();\n    }\n    let valueLabel = dataItem.get(\"valueLabel\");\n    if (valueLabel) {\n      this.valueLabels.removeValue(valueLabel);\n      valueLabel.dispose();\n    }\n  }\n}\nObject.defineProperty(Legend, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Legend\"\n});\nObject.defineProperty(Legend, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Series.classNames.concat([Legend.className])\n});","map":{"version":3,"names":["Series","Container","Label","RoundedRectangle","Template","ListTemplate","$utils","Legend","constructor","Object","defineProperty","new","_new","_root","themeTags","mergeTags","itemContainers","template","get","themeTagsSelf","background","markers","labels","valueLabels","markerRectangles","_afterNew","_settings","fields","push","makeItemContainer","dataItem","itemContainer","children","make","_setDataItem","states","create","makeMarker","marker","makeLabel","label","makeValueLabel","valueLabel","makeMarkerRectangle","markerRectangle","processDataItem","nameField","fillField","strokeField","clickTarget","item","dataContext","set","useDefaultMarker","fill","stroke","createLegendMarker","on","setAll","component","updateLegendMarker","text","_getText","_t","name","show","_disposers","visible","clickContainer","_addClickEvents","values","sort","a","b","targetA","targetB","indexA","data","indexOf","indexB","updateLegendValue","container","events","hoverDataItem","unhoverDataItem","labelText","isHidden","readerAlert","locale","hide","disposeDataItem","di","undefined","removeValue","dispose","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\Legend.ts"],"sourcesContent":["import type { DataItem } from \"../../core/render/Component\";\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate, ISeriesEvents } from \"./Series\";\nimport { Container } from \"../../core/render/Container\";\nimport { Label } from \"../../core/render/Label\";\nimport { RoundedRectangle } from \"../../core/render/RoundedRectangle\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport type { Entity, IEntitySettings } from \"../../core/util/Entity\";\nimport type { Color } from \"../../core/util/Color\";\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface ILegendDataItem extends ISeriesDataItem {\n\n\t/**\n\t * [[Container]] element holding all other legend item elements, labels,\n\t * markers, etc.\n\t */\n\titemContainer: Container;\n\n\t/**\n\t * Marker element.\n\t */\n\tmarker: Container;\n\n\t/**\n\t * Marker rectangle element.\n\t */\n\tmarkerRectangle: RoundedRectangle;\n\n\t/**\n\t * Label element.\n\t */\n\tlabel: Label;\n\n\t/**\n\t * Value label element.\n\t */\n\tvalueLabel: Label;\n\n\t/**\n\t * Marker fill color.\n\t */\n\tfill?: Color;\n\n\t/**\n\t * Marker stroke (outline) color.\n\t */\n\tstroke?: Color;\n\n\t/**\n\t * Name of the legend item.\n\t */\n\tname?: string;\n\n}\n\nexport interface ILegendItemSettings extends IEntitySettings {\n\tvisible?: boolean;\n}\n\n/**\n * @ignore\n */\nexport interface ILegendItem extends Entity {\n\t_settings: ILegendItemSettings;\n\tisHidden?: () => boolean;\n\tshow?: () => void;\n\thide?: () => void;\n\tcreateLegendMarker?: () => {}\n\tcomponent?: Series;\n\tupdateLegendValue?: () => {}\n\t// how to define that properties of dataItem should have legendDataItem?\n}\n\n//type ILegendDataItemSettings = { [K in keyof ILegendDataItem]?: string; };\n\nexport interface ILegendSettings extends ISeriesSettings {\n\n\t/**\n\t * If set to `true` the legend will not try to mimic appearance of the actual\n\t * item but rather show default square marker.\n\t *\n\t * @default false\n\t */\n\tuseDefaultMarker?: boolean;\n\n\t/**\n\t * A key to look up in data for a name of the data item.\n\t *\n\t */\n\tnameField?: string;\n\n\t/**\n\t * A key to look up in data for a fill of the data item.\n\t *\n\t */\n\tfillField?: string;\n\n\t/**\n\t * A key to look up in data for a stroke of the data item.\n\t *\n\t */\n\tstrokeField?: string;\n\n\t/**\n\t * Which legend item element will be clickable to toggle related chart item:\n\t * * `\"itemContainer\"` - the whole legend item (default).\n\t * * `\"marker\"` - legend item marker.\n\t * * `\"none\"` - disables toggling of legend item.\n\t *\n\t * @default \"itemContainer\"\n\t * @since 5.0.13\n\t */\n\tclickTarget?: \"itemContainer\" | \"marker\" | \"none\"\n\n}\n\nexport interface ILegendPrivate extends ISeriesPrivate {\n}\n\nexport interface ILegendEvents extends ISeriesEvents {\n\n}\n\n/**\n * A universal legend control.\n *\n * @important\n * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/} for more info\n */\nexport class Legend extends Series {\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"legend\"]);\n\t\tthis.fields.push(\"name\", \"stroke\", \"fill\");\n\t\tsuper._afterNew();\n\t}\n\n\tpublic static className: string = \"Legend\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([Legend.className]);\n\n\tdeclare public _settings: ILegendSettings;\n\tdeclare public _privateSettings: ILegendPrivate;\n\tdeclare public _dataItemSettings: ILegendDataItem;\n\tdeclare public _events: ILegendEvents;\n\n\n\t/**\n\t * List of all [[Container]] elements for legend items.\n\t *\n\t * @default new ListTemplate<Container>\n\t */\n\tpublic readonly itemContainers: ListTemplate<Container> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Container._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.itemContainers.template.get(\"themeTags\", []), [\"legend\", \"item\"]),\n\t\t\tthemeTagsSelf: $utils.mergeTags(this.itemContainers.template.get(\"themeTagsSelf\", []), [\"itemcontainer\"]),\n\t\t\tbackground: RoundedRectangle.new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.itemContainers.template.get(\"themeTags\", []), [\"legend\", \"item\", \"background\"]),\n\t\t\t\tthemeTagsSelf: $utils.mergeTags(this.itemContainers.template.get(\"themeTagsSelf\", []), [\"itemcontainer\"])\n\t\t\t})\n\t\t}, [this.itemContainers.template])\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeItemContainer(dataItem: DataItem<this[\"_dataItemSettings\"]>): Container {\n\t\tconst itemContainer = this.children.push(this.itemContainers.make());\n\t\titemContainer._setDataItem(dataItem);\n\t\tthis.itemContainers.push(itemContainer);\n\t\titemContainer.states.create(\"disabled\", {});\n\t\treturn itemContainer;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMarker(): Container {\n\t\tconst marker = this.markers.make();\n\t\tthis.markers.push(marker);\n\t\tmarker.states.create(\"disabled\", {});\n\t\treturn marker;\n\t}\n\n\t/**\n\t * List of legend marker elements.\n\t *\n\t * @default new ListTemplate<Container>\n\t */\n\tpublic readonly markers: ListTemplate<Container> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Container._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.markers.template.get(\"themeTags\", []), [\"legend\", \"marker\"])\n\t\t}, [this.markers.template])\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLabel(): Label {\n\t\tconst label = this.labels.make();\n\t\tlabel.states.create(\"disabled\", {});\n\t\treturn label;\n\t}\n\n\t/**\n\t * List of legend label elements.\n\t *\n\t * @default new ListTemplate<Label>\n\t */\n\tpublic readonly labels: ListTemplate<Label> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Label._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"legend\", \"label\"])\n\t\t}, [this.labels.template])\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeValueLabel(): Label {\n\t\tconst valueLabel = this.valueLabels.make();\n\t\tvalueLabel.states.create(\"disabled\", {});\n\t\treturn valueLabel;\n\t}\n\n\t/**\n\t * List of legend value label elements.\n\t *\n\t * @default new ListTemplate<label>\n\t */\n\tpublic readonly valueLabels: ListTemplate<Label> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Label._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.valueLabels.template.get(\"themeTags\", []), [\"legend\", \"label\", \"value\"])\n\t\t}, [this.valueLabels.template])\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMarkerRectangle(): RoundedRectangle {\n\t\tconst markerRectangle = this.markerRectangles.make();\n\t\tmarkerRectangle.states.create(\"disabled\", {});\n\t\treturn markerRectangle;\n\t}\n\n\t/**\n\t * List of rectangle elements used for default legend markers.\n\t *\n\t * @default new ListTemplate<RoundedRectangle>\n\t */\n\tpublic readonly markerRectangles: ListTemplate<RoundedRectangle> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => RoundedRectangle._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.markerRectangles.template.get(\"themeTags\", []), [\"legend\", \"marker\", \"rectangle\"])\n\t\t}, [this.markerRectangles.template])\n\t);\n\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst itemContainer = this.makeItemContainer(dataItem);\n\n\t\tconst nameField = this.get(\"nameField\");\n\t\tconst fillField = this.get(\"fillField\");\n\t\tconst strokeField = this.get(\"strokeField\");\n\n\t\tif (itemContainer) {\n\t\t\tconst clickTarget = this.get(\"clickTarget\", \"itemContainer\");\n\n\t\t\tconst item = dataItem.dataContext as ILegendItem;\n\n\t\t\tif (item && item.set) {\n\t\t\t\titem.set(<any>\"legendDataItem\", dataItem);\n\t\t\t}\n\n\t\t\titemContainer._setDataItem(dataItem);\n\t\t\tdataItem.set(\"itemContainer\", itemContainer);\n\n\t\t\tconst marker = this.makeMarker();\n\t\t\tif (marker) {\n\t\t\t\titemContainer.children.push(marker);\n\t\t\t\tmarker._setDataItem(dataItem);\n\t\t\t\tdataItem.set(\"marker\", marker);\n\n\t\t\t\tconst useDefaultMarker = this.get(\"useDefaultMarker\");\n\n\t\t\t\tconst markerRectangle = marker.children.push(this.makeMarkerRectangle());\n\n\t\t\t\tlet fill = dataItem.get(\"fill\");\n\t\t\t\tlet stroke = dataItem.get(\"stroke\");\n\n\t\t\t\tdataItem.set(\"markerRectangle\", markerRectangle);\n\n\t\t\t\tif (item && item.get) {\n\t\t\t\t\tfill = item.get(fillField as any, fill);\n\t\t\t\t\tstroke = item.get(strokeField as any, stroke);\n\t\t\t\t}\n\n\t\t\t\tif (!stroke) {\n\t\t\t\t\tstroke = fill;\n\t\t\t\t}\n\n\t\t\t\tif (!useDefaultMarker) {\n\t\t\t\t\tif (item && item.createLegendMarker) {\n\t\t\t\t\t\titem.createLegendMarker();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (item.on) {\n\t\t\t\t\t\titem.on(fillField as any, () => {\n\t\t\t\t\t\t\tmarkerRectangle.set(\"fill\", item.get(fillField as any));\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\titem.on(strokeField as any, () => {\n\t\t\t\t\t\t\tmarkerRectangle.set(\"stroke\", item.get(strokeField as any));\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmarkerRectangle.setAll({ fill, stroke });\n\n\t\t\t\t// this solves if template field is set on slice\n\t\t\t\tconst component = item.component;\n\t\t\t\tif (component && component.updateLegendMarker) {\n\t\t\t\t\tcomponent.updateLegendMarker(item as any);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst label = this.makeLabel();\n\n\t\t\tif (label) {\n\t\t\t\titemContainer.children.push(label);\n\t\t\t\tlabel._setDataItem(dataItem);\n\t\t\t\tdataItem.set(\"label\", label);\n\n\t\t\t\tlabel.text.on(\"text\", () => {\n\t\t\t\t\titemContainer.set(\"ariaLabel\", label.text._getText() + (this.get(\"clickTarget\") !== \"none\" ? \"; \" + this._t(\"Press ENTER to toggle\") : \"\"));\n\t\t\t\t});\n\n\t\t\t\tif (item && item.get) {\n\t\t\t\t\tdataItem.set(\"name\", item.get(nameField as any) as string);\n\t\t\t\t}\n\n\t\t\t\tlet name = dataItem.get(\"name\");\n\n\t\t\t\tif (name) {\n\t\t\t\t\tlabel.set(\"text\", name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst valueLabel = this.makeValueLabel();\n\t\t\tif (valueLabel) {\n\t\t\t\titemContainer.children.push(valueLabel);\n\t\t\t\tvalueLabel._setDataItem(dataItem);\n\t\t\t\tdataItem.set(\"valueLabel\", valueLabel);\n\t\t\t}\n\n\t\t\tif (item && item.show) {\n\n\t\t\t\tthis._disposers.push(item.on(\"visible\", (visible) => {\n\t\t\t\t\titemContainer.set(\"disabled\", !visible)\n\t\t\t\t}));\n\n\t\t\t\tif (!item.get(\"visible\")) {\n\t\t\t\t\titemContainer.set(\"disabled\", true);\n\t\t\t\t}\n\n\t\t\t\tif (clickTarget != \"none\") {\n\t\t\t\t\tlet clickContainer = itemContainer;\n\t\t\t\t\tif (clickTarget == \"marker\") {\n\t\t\t\t\t\tclickContainer = marker;\n\t\t\t\t\t}\n\t\t\t\t\tthis._addClickEvents(clickContainer, item, dataItem)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Sort children\n\t\t\tthis.children.values.sort((a, b) => {\n\t\t\t\tconst targetA = a.dataItem!.dataContext;\n\t\t\t\tconst targetB = b.dataItem!.dataContext;\n\t\t\t\tif (targetA && targetB) {\n\t\t\t\t\tconst indexA = this.data.indexOf(targetA);\n\t\t\t\t\tconst indexB = this.data.indexOf(targetB);\n\t\t\t\t\tif (indexA > indexB) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (indexA < indexB) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\n\t\t\tif (item && item.updateLegendValue) {\n\t\t\t\titem.updateLegendValue();\n\t\t\t}\n\t\t}\n\n\t}\n\n\n\tprotected _addClickEvents(container: Container, item: ILegendItem, dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tcontainer.set(\"cursorOverStyle\", \"pointer\");\n\t\tcontainer.events.on(\"pointerover\", () => {\n\t\t\tconst component = item.component;\n\t\t\tif (component && component.hoverDataItem) {\n\t\t\t\tcomponent.hoverDataItem(item as any)\n\t\t\t}\n\t\t})\n\n\t\tcontainer.events.on(\"pointerout\", () => {\n\t\t\tconst component = item.component;\n\t\t\tif (component && component.hoverDataItem) {\n\t\t\t\tcomponent.unhoverDataItem(item as any)\n\t\t\t}\n\t\t})\n\n\t\tcontainer.events.on(\"click\", () => {\n\t\t\tconst labelText = dataItem.get(\"label\").text._getText();\n\n\t\t\tif (item.show && item.isHidden && (item.isHidden() || item.get(\"visible\") === false)) {\n\t\t\t\titem.show();\n\t\t\t\tcontainer.set(\"disabled\", false);\n\t\t\t\tthis._root.readerAlert(this._t(\"%1 shown\", this._root.locale, labelText));\n\t\t\t}\n\t\t\telse if (item.hide) {\n\t\t\t\titem.hide();\n\t\t\t\tcontainer.set(\"disabled\", true);\n\t\t\t\tthis._root.readerAlert(this._t(\"%1 hidden\", this._root.locale, labelText));\n\t\t\t}\n\t\t})\n\t}\n\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t\tsuper.disposeDataItem(dataItem);\n\n\t\tconst dataContext = dataItem.dataContext as any;\n\t\tif (dataContext && dataContext.get) {\n\t\t\tconst di = dataContext.get(\"legendDataItem\");\n\t\t\tif (di == dataItem) {\n\t\t\t\tdataContext.set(\"legendDataItem\", undefined);\n\t\t\t}\n\t\t}\n\n\n\t\tlet itemContainer = dataItem.get(\"itemContainer\");\n\t\tif (itemContainer) {\n\t\t\tthis.itemContainers.removeValue(itemContainer);\n\t\t\titemContainer.dispose();\n\t\t}\n\n\t\tlet marker = dataItem.get(\"marker\");\n\t\tif (marker) {\n\t\t\tthis.markers.removeValue(marker);\n\t\t\tmarker.dispose();\n\t\t}\n\n\t\tlet markerRectangle = dataItem.get(\"markerRectangle\");\n\t\tif (markerRectangle) {\n\t\t\tthis.markerRectangles.removeValue(markerRectangle);\n\t\t\tmarkerRectangle.dispose();\n\t\t}\n\n\t\tlet label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tthis.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\n\t\tlet valueLabel = dataItem.get(\"valueLabel\");\n\t\tif (valueLabel) {\n\t\t\tthis.valueLabels.removeValue(valueLabel);\n\t\t\tvalueLabel.dispose();\n\t\t}\n\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}