{"ast":null,"code":"import { List } from \"./List\";\nimport * as $array from \"./Array\";\n/**\r\n * A version of [[List]] to hold children of the [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info\r\n */\nexport class Children extends List {\n  constructor(container) {\n    super();\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_container\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._container = container;\n    this._events = this.events.onAll(change => {\n      if (change.type === \"clear\") {\n        $array.each(change.oldValues, x => {\n          this._onRemoved(x);\n        });\n      } else if (change.type === \"push\") {\n        this._onInserted(change.newValue);\n      } else if (change.type === \"setIndex\") {\n        this._onRemoved(change.oldValue);\n        this._onInserted(change.newValue, change.index);\n      } else if (change.type === \"insertIndex\") {\n        this._onInserted(change.newValue, change.index);\n      } else if (change.type === \"removeIndex\") {\n        this._onRemoved(change.oldValue);\n      } else if (change.type === \"moveIndex\") {\n        this._onRemoved(change.value);\n        this._onInserted(change.value, change.newIndex);\n      } else {\n        throw new Error(\"Unknown IListEvent type\");\n      }\n    });\n  }\n  _onInserted(child, index) {\n    child._setParent(this._container, true);\n    const childrenDisplay = this._container._childrenDisplay;\n    if (index === undefined) {\n      childrenDisplay.addChild(child._display);\n    } else {\n      childrenDisplay.addChildAt(child._display, index);\n    }\n  }\n  _onRemoved(child) {\n    this._container._childrenDisplay.removeChild(child._display);\n    this._container.markDirtyBounds();\n    this._container.markDirty();\n  }\n  /**\r\n   * Returns `true` if obejct is disposed.\r\n   */\n  isDisposed() {\n    return this._disposed;\n  }\n  /**\r\n   * Permanently dispose this object.\r\n   */\n  dispose() {\n    if (!this._disposed) {\n      this._disposed = true;\n      this._events.dispose();\n      $array.each(this.values, child => {\n        child.dispose();\n      });\n    }\n  }\n}","map":{"version":3,"names":["List","$array","Children","constructor","container","Object","defineProperty","_container","_events","events","onAll","change","type","each","oldValues","x","_onRemoved","_onInserted","newValue","oldValue","index","value","newIndex","Error","child","_setParent","childrenDisplay","_childrenDisplay","undefined","addChild","_display","addChildAt","removeChild","markDirtyBounds","markDirty","isDisposed","_disposed","dispose","values"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\util\\Children.ts"],"sourcesContent":["import { List } from \"./List\";\nimport type { IDisposer } from \"./Disposer\";\nimport type { Container } from \"../render/Container\";\nimport type { Sprite } from \"../render/Sprite\";\nimport * as $array from \"./Array\";\n\n/**\n * A version of [[List]] to hold children of the [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info\n */\nexport class Children<A extends Sprite> extends List<A> implements IDisposer {\n\tprivate _disposed: boolean = false;\n\tprivate _container: Container;\n\tprivate _events: IDisposer;\n\n\tpublic constructor(container: Container) {\n\t\tsuper();\n\n\t\tthis._container = container;\n\n\t\tthis._events = this.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\t$array.each(change.oldValues, (x) => {\n\t\t\t\t\tthis._onRemoved(x);\n\t\t\t\t});\n\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tthis._onInserted(change.newValue);\n\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tthis._onRemoved(change.oldValue);\n\t\t\t\tthis._onInserted(change.newValue, change.index);\n\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tthis._onInserted(change.newValue, change.index);\n\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis._onRemoved(change.oldValue);\n\n\t\t\t} else if (change.type === \"moveIndex\") {\n\t\t\t\tthis._onRemoved(change.value);\n\t\t\t\tthis._onInserted(change.value, change.newIndex);\n\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _onInserted(child: A, index?: number) {\n\t\tchild._setParent(this._container, true);\n\t\tconst childrenDisplay = this._container._childrenDisplay;\n\t\tif (index === undefined) {\n\t\t\tchildrenDisplay.addChild(child._display);\n\n\t\t} else {\n\t\t\tchildrenDisplay.addChildAt(child._display, index);\n\t\t}\n\t}\n\n\tprotected _onRemoved(child: A) {\n\t\tthis._container._childrenDisplay.removeChild(child._display);\n\t\tthis._container.markDirtyBounds();\n\t\tthis._container.markDirty();\n\t}\n\n\t/**\n\t * Returns `true` if obejct is disposed.\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Permanently dispose this object.\n\t */\n\tpublic dispose() {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\n\t\t\tthis._events.dispose();\n\n\t\t\t$array.each(this.values, (child) => {\n\t\t\t\tchild.dispose();\n\t\t\t});\n\t\t}\n\t}\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,QAAQ;AAI7B,OAAO,KAAKC,MAAM,MAAM,SAAS;AAEjC;;;;;AAKA,OAAM,MAAOC,QAA2B,SAAQF,IAAO;EAKtDG,YAAmBC,SAAoB;IACtC,KAAK,EAAE;IALRC,MAAA,CAAAC,cAAA;;;;aAA6B;;IAC7BD,MAAA,CAAAC,cAAA;;;;;;IACAD,MAAA,CAAAC,cAAA;;;;;;IAKC,IAAI,CAACC,UAAU,GAAGH,SAAS;IAE3B,IAAI,CAACI,OAAO,GAAG,IAAI,CAACC,MAAM,CAACC,KAAK,CAAEC,MAAM,IAAI;MAC3C,IAAIA,MAAM,CAACC,IAAI,KAAK,OAAO,EAAE;QAC5BX,MAAM,CAACY,IAAI,CAACF,MAAM,CAACG,SAAS,EAAGC,CAAC,IAAI;UACnC,IAAI,CAACC,UAAU,CAACD,CAAC,CAAC;QACnB,CAAC,CAAC;OAEF,MAAM,IAAIJ,MAAM,CAACC,IAAI,KAAK,MAAM,EAAE;QAClC,IAAI,CAACK,WAAW,CAACN,MAAM,CAACO,QAAQ,CAAC;OAEjC,MAAM,IAAIP,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;QACtC,IAAI,CAACI,UAAU,CAACL,MAAM,CAACQ,QAAQ,CAAC;QAChC,IAAI,CAACF,WAAW,CAACN,MAAM,CAACO,QAAQ,EAAEP,MAAM,CAACS,KAAK,CAAC;OAE/C,MAAM,IAAIT,MAAM,CAACC,IAAI,KAAK,aAAa,EAAE;QACzC,IAAI,CAACK,WAAW,CAACN,MAAM,CAACO,QAAQ,EAAEP,MAAM,CAACS,KAAK,CAAC;OAE/C,MAAM,IAAIT,MAAM,CAACC,IAAI,KAAK,aAAa,EAAE;QACzC,IAAI,CAACI,UAAU,CAACL,MAAM,CAACQ,QAAQ,CAAC;OAEhC,MAAM,IAAIR,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;QACvC,IAAI,CAACI,UAAU,CAACL,MAAM,CAACU,KAAK,CAAC;QAC7B,IAAI,CAACJ,WAAW,CAACN,MAAM,CAACU,KAAK,EAAEV,MAAM,CAACW,QAAQ,CAAC;OAE/C,MAAM;QACN,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;;IAE5C,CAAC,CAAC;EACH;EAEUN,WAAWA,CAACO,KAAQ,EAAEJ,KAAc;IAC7CI,KAAK,CAACC,UAAU,CAAC,IAAI,CAAClB,UAAU,EAAE,IAAI,CAAC;IACvC,MAAMmB,eAAe,GAAG,IAAI,CAACnB,UAAU,CAACoB,gBAAgB;IACxD,IAAIP,KAAK,KAAKQ,SAAS,EAAE;MACxBF,eAAe,CAACG,QAAQ,CAACL,KAAK,CAACM,QAAQ,CAAC;KAExC,MAAM;MACNJ,eAAe,CAACK,UAAU,CAACP,KAAK,CAACM,QAAQ,EAAEV,KAAK,CAAC;;EAEnD;EAEUJ,UAAUA,CAACQ,KAAQ;IAC5B,IAAI,CAACjB,UAAU,CAACoB,gBAAgB,CAACK,WAAW,CAACR,KAAK,CAACM,QAAQ,CAAC;IAC5D,IAAI,CAACvB,UAAU,CAAC0B,eAAe,EAAE;IACjC,IAAI,CAAC1B,UAAU,CAAC2B,SAAS,EAAE;EAC5B;EAEA;;;EAGOC,UAAUA,CAAA;IAChB,OAAO,IAAI,CAACC,SAAS;EACtB;EAEA;;;EAGOC,OAAOA,CAAA;IACb,IAAI,CAAC,IAAI,CAACD,SAAS,EAAE;MACpB,IAAI,CAACA,SAAS,GAAG,IAAI;MAErB,IAAI,CAAC5B,OAAO,CAAC6B,OAAO,EAAE;MAEtBpC,MAAM,CAACY,IAAI,CAAC,IAAI,CAACyB,MAAM,EAAGd,KAAK,IAAI;QAClCA,KAAK,CAACa,OAAO,EAAE;MAChB,CAAC,CAAC;;EAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}