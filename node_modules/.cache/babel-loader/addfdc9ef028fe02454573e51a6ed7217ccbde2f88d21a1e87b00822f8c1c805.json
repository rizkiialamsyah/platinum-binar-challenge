{"ast":null,"code":"import { Template } from \"./util/Template\";\nimport * as $order from \"./util/Order\";\nimport * as $array from \"./util/Array\";\n/**\r\n * A base class for an amCharts theme.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info\r\n * @important\r\n */\nexport class Theme {\n  constructor(root, isReal) {\n    Object.defineProperty(this, \"_root\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_rules\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._root = root;\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   root      Root element\r\n   * @param   settings  Settings\r\n   * @param   template  Template\r\n   * @return            Instantiated object\r\n   */\n  static new(root) {\n    const x = new this(root, true);\n    x.setupDefaultRules();\n    return x;\n  }\n  setupDefaultRules() {}\n  /**\r\n   * Looks up the rules for a specific theme class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\r\n   * @param   themeClass Theme class\r\n   * @return             Array<IRule<A>>\r\n   */\n  _lookupRules(themeClass) {\n    return this._rules[themeClass];\n  }\n  /**\r\n   * Creates a [[Template]] for specific theme class and tags.\r\n   *\r\n   * NOTE: the difference from `rule()` is that `ruleRaw()` does not do any\r\n   * type checks.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\r\n   * @param   themeClass Theme class\r\n   * @param   themeTags  Theme tags\r\n   * @return             Template\r\n   */\n  ruleRaw(themeClass) {\n    let themeTags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let rules = this._rules[themeClass];\n    if (!rules) {\n      rules = this._rules[themeClass] = [];\n    }\n    themeTags.sort($order.compare);\n    const {\n      index,\n      found\n    } = $array.getSortedIndex(rules, x => {\n      const order = $order.compare(x.tags.length, themeTags.length);\n      if (order === 0) {\n        return $order.compareArray(x.tags, themeTags, $order.compare);\n      } else {\n        return order;\n      }\n    });\n    if (found) {\n      return rules[index].template;\n    } else {\n      const template = Template.new({});\n      rules.splice(index, 0, {\n        tags: themeTags,\n        template\n      });\n      return template;\n    }\n  }\n  /**\r\n   * Creates a [[Template]] for specific theme class and tags.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\r\n   * @param   themeClass Theme class\r\n   * @param   themeTags  Theme tags\r\n   * @return             Template\r\n   */\n  rule(themeClass) {\n    let themeTags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return this.ruleRaw(themeClass, themeTags);\n  }\n}","map":{"version":3,"names":["Template","$order","$array","Theme","constructor","root","isReal","Object","defineProperty","_root","Error","new","x","setupDefaultRules","_lookupRules","themeClass","_rules","ruleRaw","themeTags","arguments","length","undefined","rules","sort","compare","index","found","getSortedIndex","order","tags","compareArray","template","splice","rule"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\Theme.ts"],"sourcesContent":["import type { Entity } from \"./util/Entity\";\nimport { Template } from \"./util/Template\";\nimport type { Root } from \"./Root\";\nimport type { IClasses } from \"./Classes\";\nimport * as $order from \"./util/Order\";\nimport * as $array from \"./util/Array\";\n\nexport interface IRule<A extends Entity> {\n\ttags: Array<string>;\n\ttemplate: Template<A>;\n}\n\n/**\n * A base class for an amCharts theme.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info\n * @important\n */\nexport class Theme {\n\n\tprotected _root!: Root;\n\n\t/**\n\t * Use this method to create an instance of this class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n\t * @param   root      Root element\n\t * @param   settings  Settings\n\t * @param   template  Template\n\t * @return            Instantiated object\n\t */\n\tstatic new<T extends typeof Theme>(this: T, root: Root): InstanceType<T> {\n\t\tconst x = (new this(root, true)) as InstanceType<T>;\n\t\tx.setupDefaultRules();\n\t\treturn x;\n\t}\n\n\tconstructor(root: Root, isReal:boolean) {\n\t\tthis._root = root;\n\t\tif (!isReal) {\n\t\t\tthrow new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n\t\t}\n\t}\n\n\tprotected setupDefaultRules(): void {}\n\n\tprotected _rules: { [type: string]: Array<IRule<Entity>>; } = {};\n\n\t/**\n\t * Looks up the rules for a specific theme class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\n\t * @param   themeClass Theme class\n\t * @return             Array<IRule<A>>\n\t */\n\tpublic _lookupRules<A extends Entity>(themeClass: string): Array<IRule<A>> | undefined {\n\t\treturn this._rules[themeClass] as unknown as Array<IRule<A>> | undefined;\n\t}\n\n\t/**\n\t * Creates a [[Template]] for specific theme class and tags.\n\t *\n\t * NOTE: the difference from `rule()` is that `ruleRaw()` does not do any\n\t * type checks.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\n\t * @param   themeClass Theme class\n\t * @param   themeTags  Theme tags\n\t * @return             Template\n\t */\n\tpublic ruleRaw<A extends Entity>(themeClass: string, themeTags: Array<string> = []): Template<A> {\n\t\tlet rules = this._rules[themeClass];\n\n\t\tif (!rules) {\n\t\t\trules = this._rules[themeClass] = [];\n\t\t}\n\n\t\tthemeTags.sort($order.compare);\n\n\t\tconst { index, found } = $array.getSortedIndex(rules, (x) => {\n\t\t\tconst order = $order.compare(x.tags.length, themeTags.length);\n\n\t\t\tif (order === 0) {\n\t\t\t\treturn $order.compareArray(x.tags, themeTags, $order.compare);\n\n\t\t\t} else {\n\t\t\t\treturn order;\n\t\t\t}\n\t\t});\n\n\t\tif (found) {\n\t\t\treturn rules[index].template as Template<A>;\n\n\t\t} else {\n\t\t\tconst template = Template.new<A>({});\n\n\t\t\trules.splice(index, 0, {\n\t\t\t\ttags: themeTags,\n\t\t\t\ttemplate,\n\t\t\t});\n\n\t\t\treturn template;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a [[Template]] for specific theme class and tags.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\n\t * @param   themeClass Theme class\n\t * @param   themeTags  Theme tags\n\t * @return             Template\n\t */\n\tpublic rule<K extends keyof IClasses>(themeClass: K, themeTags: Array<string> = []): Template<IClasses[K]> {\n\t\treturn this.ruleRaw(themeClass, themeTags) as Template<IClasses[K]>;\n\t}\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,iBAAiB;AAG1C,OAAO,KAAKC,MAAM,MAAM,cAAc;AACtC,OAAO,KAAKC,MAAM,MAAM,cAAc;AAOtC;;;;;;AAMA,OAAM,MAAOC,KAAK;EAmBjBC,YAAYC,IAAU,EAAEC,MAAc;IAjBtCC,MAAA,CAAAC,cAAA;;;;;;IA0BAD,MAAA,CAAAC,cAAA;;;;aAA8D;;IAR7D,IAAI,CAACC,KAAK,GAAGJ,IAAI;IACjB,IAAI,CAACC,MAAM,EAAE;MACZ,MAAM,IAAII,KAAK,CAAC,yDAAyD,CAAC;;EAE5E;EApBA;;;;;;;;;EASA,OAAOC,GAAGA,CAAkCN,IAAU;IACrD,MAAMO,CAAC,GAAI,IAAI,IAAI,CAACP,IAAI,EAAE,IAAI,CAAqB;IACnDO,CAAC,CAACC,iBAAiB,EAAE;IACrB,OAAOD,CAAC;EACT;EASUC,iBAAiBA,CAAA,GAAU;EAIrC;;;;;;;EAOOC,YAAYA,CAAmBC,UAAkB;IACvD,OAAO,IAAI,CAACC,MAAM,CAACD,UAAU,CAA2C;EACzE;EAEA;;;;;;;;;;;EAWOE,OAAOA,CAAmBF,UAAkB,EAA+B;IAAA,IAA7BG,SAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;IACjF,IAAIG,KAAK,GAAG,IAAI,CAACN,MAAM,CAACD,UAAU,CAAC;IAEnC,IAAI,CAACO,KAAK,EAAE;MACXA,KAAK,GAAG,IAAI,CAACN,MAAM,CAACD,UAAU,CAAC,GAAG,EAAE;;IAGrCG,SAAS,CAACK,IAAI,CAACtB,MAAM,CAACuB,OAAO,CAAC;IAE9B,MAAM;MAAEC,KAAK;MAAEC;IAAK,CAAE,GAAGxB,MAAM,CAACyB,cAAc,CAACL,KAAK,EAAGV,CAAC,IAAI;MAC3D,MAAMgB,KAAK,GAAG3B,MAAM,CAACuB,OAAO,CAACZ,CAAC,CAACiB,IAAI,CAACT,MAAM,EAAEF,SAAS,CAACE,MAAM,CAAC;MAE7D,IAAIQ,KAAK,KAAK,CAAC,EAAE;QAChB,OAAO3B,MAAM,CAAC6B,YAAY,CAAClB,CAAC,CAACiB,IAAI,EAAEX,SAAS,EAAEjB,MAAM,CAACuB,OAAO,CAAC;OAE7D,MAAM;QACN,OAAOI,KAAK;;IAEd,CAAC,CAAC;IAEF,IAAIF,KAAK,EAAE;MACV,OAAOJ,KAAK,CAACG,KAAK,CAAC,CAACM,QAAuB;KAE3C,MAAM;MACN,MAAMA,QAAQ,GAAG/B,QAAQ,CAACW,GAAG,CAAI,EAAE,CAAC;MAEpCW,KAAK,CAACU,MAAM,CAACP,KAAK,EAAE,CAAC,EAAE;QACtBI,IAAI,EAAEX,SAAS;QACfa;OACA,CAAC;MAEF,OAAOA,QAAQ;;EAEjB;EAEA;;;;;;;;EAQOE,IAAIA,CAA2BlB,UAAa,EAA+B;IAAA,IAA7BG,SAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;IACjF,OAAO,IAAI,CAACF,OAAO,CAACF,UAAU,EAAEG,SAAS,CAA0B;EACpE"},"metadata":{},"sourceType":"module","externalDependencies":[]}