{"ast":null,"code":"import { Graphics } from \"./Graphics\";\nimport * as $utils from \"../../core/util/Utils\";\n/**\r\n * Draws a Star.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\nexport class Star extends Graphics {\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"spikes\")) {\n      this._clear = true;\n    }\n  }\n  _changed() {\n    super._changed();\n    if (this._clear) {\n      const display = this._display;\n      const r = this.get(\"radius\", 0);\n      const ir = $utils.relativeToValue(this.get(\"innerRadius\", 0), r);\n      const spikes = this.get(\"spikes\", 0);\n      const step = Math.PI / spikes;\n      let angle = Math.PI / 2 * 3;\n      display.moveTo(0, -r);\n      for (let i = 0; i < spikes; i++) {\n        display.lineTo(Math.cos(angle) * r, Math.sin(angle) * r);\n        angle += step;\n        display.lineTo(Math.cos(angle) * ir, Math.sin(angle) * ir);\n        angle += step;\n      }\n      display.lineTo(0, -r);\n      display.closePath();\n    }\n  }\n}\nObject.defineProperty(Star, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Star\"\n});\nObject.defineProperty(Star, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Graphics.classNames.concat([Star.className])\n});","map":{"version":3,"names":["Graphics","$utils","Star","_beforeChanged","isDirty","_clear","_changed","display","_display","r","get","ir","relativeToValue","spikes","step","Math","PI","angle","moveTo","i","lineTo","cos","sin","closePath","Object","defineProperty","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\Star.ts"],"sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\r\nimport type { Percent } from \"../../core/util/Percent\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\n\r\nexport interface IStarSettings extends IGraphicsSettings {\r\n\r\n\t/**\r\n\t * Star's radius in pixels.\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Star's inner radius in pixels.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Number of spikes\r\n\t */\r\n\tspikes?: number;\r\n\r\n}\r\n\r\nexport interface IStarPrivate extends IGraphicsPrivate {\r\n}\r\n\r\n/**\r\n * Draws a Star.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\r\nexport class Star extends Graphics {\r\n\r\n\tdeclare public _settings: IStarSettings;\r\n\tdeclare public _privateSettings: IStarPrivate;\r\n\r\n\tpublic static className: string = \"Star\";\r\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Star.className]);\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\r\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"spikes\")) {\r\n\t\t\tthis._clear = true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clear) {\r\n\t\t\tconst display = this._display;\r\n\t\t\tconst r = this.get(\"radius\", 0);\r\n\t\t\tconst ir = $utils.relativeToValue(this.get(\"innerRadius\", 0), r);\r\n\t\t\tconst spikes = this.get(\"spikes\", 0);\r\n\t\t\tconst step = Math.PI / spikes;\r\n\t\t\tlet angle = Math.PI / 2 * 3;\r\n\r\n\t\t\tdisplay.moveTo(0, - r)\r\n\r\n\t\t\tfor (let i = 0; i < spikes; i++) {\r\n\t\t\t\tdisplay.lineTo(Math.cos(angle) * r, Math.sin(angle) * r)\r\n\t\t\t\tangle += step\r\n\r\n\t\t\t\tdisplay.lineTo(Math.cos(angle) * ir, Math.sin(angle) * ir)\r\n\t\t\t\tangle += step\r\n\t\t\t}\r\n\t\t\tdisplay.lineTo(0, -r)\r\n\t\t\tdisplay.closePath();\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAA6C,YAAY;AAE1E,OAAO,KAAKC,MAAM,MAAM,uBAAuB;AAwB/C;;;;;;AAMA,OAAM,MAAOC,IAAK,SAAQF,QAAQ;EAQ1BG,cAAcA,CAAA;IACpB,KAAK,CAACA,cAAc,EAAE;IAEtB,IAAI,IAAI,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAACA,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAACA,OAAO,CAAC,QAAQ,CAAC,EAAE;MACpF,IAAI,CAACC,MAAM,GAAG,IAAI;;EAEpB;EAEOC,QAAQA,CAAA;IACd,KAAK,CAACA,QAAQ,EAAE;IAEhB,IAAI,IAAI,CAACD,MAAM,EAAE;MAChB,MAAME,OAAO,GAAG,IAAI,CAACC,QAAQ;MAC7B,MAAMC,CAAC,GAAG,IAAI,CAACC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;MAC/B,MAAMC,EAAE,GAAGV,MAAM,CAACW,eAAe,CAAC,IAAI,CAACF,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,EAAED,CAAC,CAAC;MAChE,MAAMI,MAAM,GAAG,IAAI,CAACH,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;MACpC,MAAMI,IAAI,GAAGC,IAAI,CAACC,EAAE,GAAGH,MAAM;MAC7B,IAAII,KAAK,GAAGF,IAAI,CAACC,EAAE,GAAG,CAAC,GAAG,CAAC;MAE3BT,OAAO,CAACW,MAAM,CAAC,CAAC,EAAE,CAAET,CAAC,CAAC;MAEtB,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,EAAEM,CAAC,EAAE,EAAE;QAChCZ,OAAO,CAACa,MAAM,CAACL,IAAI,CAACM,GAAG,CAACJ,KAAK,CAAC,GAAGR,CAAC,EAAEM,IAAI,CAACO,GAAG,CAACL,KAAK,CAAC,GAAGR,CAAC,CAAC;QACxDQ,KAAK,IAAIH,IAAI;QAEbP,OAAO,CAACa,MAAM,CAACL,IAAI,CAACM,GAAG,CAACJ,KAAK,CAAC,GAAGN,EAAE,EAAEI,IAAI,CAACO,GAAG,CAACL,KAAK,CAAC,GAAGN,EAAE,CAAC;QAC1DM,KAAK,IAAIH,IAAI;;MAEdP,OAAO,CAACa,MAAM,CAAC,CAAC,EAAE,CAACX,CAAC,CAAC;MACrBF,OAAO,CAACgB,SAAS,EAAE;;EAErB;;AAlCAC,MAAA,CAAAC,cAAA,CAAAvB,IAAA;;;;SAAkC;;AAClCsB,MAAA,CAAAC,cAAA,CAAAvB,IAAA;;;;SAA0CF,QAAQ,CAAC0B,UAAU,CAACC,MAAM,CAAC,CAACzB,IAAI,CAAC0B,SAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}