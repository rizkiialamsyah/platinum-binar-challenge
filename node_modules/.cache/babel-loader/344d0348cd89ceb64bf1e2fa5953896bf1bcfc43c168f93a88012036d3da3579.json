{"ast":null,"code":"import { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\n/**\r\n * A horizontal children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\nexport class HorizontalLayout extends Layout {\n  /**\r\n   * @ignore\r\n   */\n  updateContainer(container) {\n    let paddingLeft = container.get(\"paddingLeft\", 0);\n    let availableWidth = container.innerWidth();\n    let totalPercent = 0;\n    eachChildren(container, child => {\n      if (child.isVisible()) {\n        if (child.get(\"position\") == \"relative\") {\n          let childWidth = child.get(\"width\");\n          if (childWidth instanceof Percent) {\n            totalPercent += childWidth.value;\n            let w = availableWidth * childWidth.value;\n            let minWidth = child.get(\"minWidth\", child.getPrivate(\"minWidth\", -Infinity));\n            if (minWidth > w) {\n              availableWidth -= minWidth;\n              totalPercent -= childWidth.value;\n            }\n            let maxWidth = child.get(\"maxWidth\", child.getPrivate(\"maxWidth\", Infinity));\n            if (w > maxWidth) {\n              availableWidth -= maxWidth;\n              totalPercent -= childWidth.value;\n            }\n          } else {\n            if (!$type.isNumber(childWidth)) {\n              childWidth = child.width();\n            }\n            availableWidth -= childWidth + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0);\n          }\n        }\n      }\n    });\n    if (availableWidth <= 0 || availableWidth == Infinity) {\n      availableWidth = .1;\n    }\n    //if (availableWidth > 0) {\n    eachChildren(container, child => {\n      if (child.isVisible()) {\n        if (child.get(\"position\") == \"relative\") {\n          let childWidth = child.get(\"width\");\n          if (childWidth instanceof Percent) {\n            let privateWidth = availableWidth * childWidth.value / totalPercent - child.get(\"marginLeft\", 0) - child.get(\"marginRight\", 0);\n            let minWidth = child.get(\"minWidth\", child.getPrivate(\"minWidth\", -Infinity));\n            let maxWidth = child.get(\"maxWidth\", child.getPrivate(\"maxWidth\", Infinity));\n            privateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);\n            child.setPrivate(\"width\", privateWidth);\n          }\n        }\n      }\n    });\n    //}\n    let prevX = paddingLeft;\n    eachChildren(container, child => {\n      if (child.get(\"position\") == \"relative\") {\n        if (child.isVisible()) {\n          let bounds = child.adjustedLocalBounds();\n          let marginLeft = child.get(\"marginLeft\", 0);\n          let marginRight = child.get(\"marginRight\", 0);\n          let maxWidth = child.get(\"maxWidth\");\n          let left = bounds.left;\n          let right = bounds.right;\n          if (maxWidth) {\n            if (right - left > maxWidth) {\n              right = left + maxWidth;\n            }\n          }\n          let x = prevX + marginLeft - left;\n          child.setPrivate(\"x\", x);\n          prevX = x + right + marginRight;\n        } else {\n          child.setPrivate(\"x\", undefined);\n        }\n      }\n    });\n  }\n}\nObject.defineProperty(HorizontalLayout, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"HorizontalLayout\"\n});\nObject.defineProperty(HorizontalLayout, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Layout.classNames.concat([HorizontalLayout.className])\n});","map":{"version":3,"names":["Layout","eachChildren","$type","Percent","HorizontalLayout","updateContainer","container","paddingLeft","get","availableWidth","innerWidth","totalPercent","child","isVisible","childWidth","value","w","minWidth","getPrivate","Infinity","maxWidth","isNumber","width","privateWidth","Math","min","max","setPrivate","prevX","bounds","adjustedLocalBounds","marginLeft","marginRight","left","right","x","undefined","Object","defineProperty","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\HorizontalLayout.ts"],"sourcesContent":["import { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { Container } from \"./Container\";\n\n/**\n * A horizontal children layout for [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\n */\nexport class HorizontalLayout extends Layout {\n\n\tpublic static className: string = \"HorizontalLayout\";\n\tpublic static classNames: Array<string> = Layout.classNames.concat([HorizontalLayout.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateContainer(container: Container): void {\n\n\t\tlet paddingLeft = container.get(\"paddingLeft\", 0);\n\n\t\tlet availableWidth = container.innerWidth();\n\n\t\tlet totalPercent = 0;\n\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.isVisible()) {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childWidth = child.get(\"width\");\n\t\t\t\t\tif (childWidth instanceof Percent) {\n\t\t\t\t\t\ttotalPercent += childWidth.value;\n\n\t\t\t\t\t\tlet w = availableWidth * childWidth.value;\n\t\t\t\t\t\tlet minWidth = child.get(\"minWidth\", child.getPrivate(\"minWidth\", -Infinity));\n\t\t\t\t\t\tif (minWidth > w) {\n\t\t\t\t\t\t\tavailableWidth -= minWidth;\n\t\t\t\t\t\t\ttotalPercent -= childWidth.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet maxWidth = child.get(\"maxWidth\", child.getPrivate(\"maxWidth\", Infinity));\n\t\t\t\t\t\tif (w > maxWidth) {\n\t\t\t\t\t\t\tavailableWidth -= maxWidth;\n\t\t\t\t\t\t\ttotalPercent -= childWidth.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!$type.isNumber(childWidth)) {\n\t\t\t\t\t\t\tchildWidth = child.width();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tavailableWidth -= childWidth + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (availableWidth <= 0 || availableWidth == Infinity) {\n\t\t\tavailableWidth = .1;\n\t\t}\n\n\t\t//if (availableWidth > 0) {\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.isVisible()) {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childWidth = child.get(\"width\");\n\t\t\t\t\tif (childWidth instanceof Percent) {\n\t\t\t\t\t\tlet privateWidth = availableWidth * childWidth.value / totalPercent - child.get(\"marginLeft\", 0) - child.get(\"marginRight\", 0);\n\t\t\t\t\t\tlet minWidth = child.get(\"minWidth\", child.getPrivate(\"minWidth\", -Infinity));\n\t\t\t\t\t\tlet maxWidth = child.get(\"maxWidth\", child.getPrivate(\"maxWidth\", Infinity));\n\t\t\t\t\t\tprivateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);\n\n\t\t\t\t\t\tchild.setPrivate(\"width\", privateWidth);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t//}\n\n\t\tlet prevX = paddingLeft;\n\n\t\teachChildren(container, (child) => {\n\n\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\tif (child.isVisible()) {\n\t\t\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\t\t\tlet marginLeft = child.get(\"marginLeft\", 0);\n\t\t\t\t\tlet marginRight = child.get(\"marginRight\", 0);\n\n\t\t\t\t\tlet maxWidth = child.get(\"maxWidth\");\n\n\t\t\t\t\tlet left = bounds.left;\n\t\t\t\t\tlet right = bounds.right;\n\t\t\t\t\tif (maxWidth) {\n\t\t\t\t\t\tif (right - left > maxWidth) {\n\t\t\t\t\t\t\tright = left + maxWidth\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet x = prevX + marginLeft - left;\n\t\t\t\t\tchild.setPrivate(\"x\", x);\n\t\t\t\t\tprevX = x + right + marginRight;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tchild.setPrivate(\"x\", undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}