{"ast":null,"code":"import { Text } from \"../render/Text\";\nimport { p50, p100 } from \"../util/Percent\";\nimport { Container } from \"./Container\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\n/**\r\n * Creates a label with support for in-line styling and data bindings.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/labels/} for more info\r\n */\nexport class Label extends Container {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_text\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_textKeys\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"text\", \"fill\", \"fillOpacity\", \"textAlign\", \"fontFamily\", \"fontSize\", \"fontStyle\", \"fontWeight\", \"fontStyle\", \"fontVariant\", \"textDecoration\", \"shadowColor\", \"shadowBlur\", \"shadowOffsetX\", \"shadowOffsetY\", \"shadowOpacity\",\n      // \"leading\",\n      // \"letterSpacing\",\n      \"lineHeight\", \"baselineRatio\",\n      //\"padding\",\n      // \"stroke\",\n      // \"strokeThickness\",\n      // \"trim\",\n      // \"wordWrap\",\n      \"direction\", \"textBaseline\", \"oversizedBehavior\", \"breakWords\", \"ellipsis\", \"minScale\", \"populateText\", \"role\", \"ignoreFormatting\"]\n    });\n  }\n  /**\r\n   * @ignore Text is not to be used directly\r\n   */\n  get text() {\n    return this._text;\n  }\n  _afterNew() {\n    super._afterNew();\n    this._makeText();\n    $array.each(this._textKeys, property => {\n      const propValue = this.get(property);\n      if (propValue != undefined) {\n        this._text.set(property, propValue);\n      }\n    });\n    if (this.get(\"html\", \"\") !== \"\") {\n      this._text.set(\"text\", \"\");\n    }\n    this.onPrivate(\"maxWidth\", () => {\n      this._setMaxDimentions();\n    });\n    this.onPrivate(\"maxHeight\", () => {\n      this._setMaxDimentions();\n    });\n  }\n  _makeText() {\n    this._text = this.children.push(Text.new(this._root, {}));\n  }\n  _updateChildren() {\n    super._updateChildren();\n    $array.each(this._textKeys, property => {\n      this._text.set(property, this.get(property));\n    });\n    if (this.isDirty(\"maxWidth\")) {\n      this._setMaxDimentions();\n    }\n    if (this.isDirty(\"maxHeight\")) {\n      this._setMaxDimentions();\n    }\n    if (this.isDirty(\"rotation\")) {\n      this._setMaxDimentions();\n    }\n    // Do not show regular text if HTML is used\n    if (this.get(\"html\", \"\") !== \"\") {\n      this._text.set(\"text\", \"\");\n    } else {\n      this._text.set(\"text\", this.get(\"text\"));\n    }\n    if (this.isDirty(\"textAlign\") || this.isDirty(\"width\")) {\n      const textAlign = this.get(\"textAlign\");\n      let x;\n      if (this.get(\"width\") != null) {\n        if (textAlign == \"right\") {\n          x = p100;\n        } else if (textAlign == \"center\") {\n          x = p50;\n        } else {\n          x = 0;\n        }\n      } else {\n        if (textAlign == \"left\" || textAlign == \"start\") {\n          x = this.get(\"paddingLeft\");\n        } else if (textAlign == \"right\" || textAlign == \"end\") {\n          x = -this.get(\"paddingRight\");\n        }\n      }\n      this.text.set(\"x\", x);\n    }\n  }\n  _setMaxDimentions() {\n    const rotation = this.get(\"rotation\");\n    const vertical = rotation == 90 || rotation == 270 || rotation == -90;\n    const maxWidth = this.get(\"maxWidth\", this.getPrivate(\"maxWidth\", Infinity));\n    if ($type.isNumber(maxWidth)) {\n      this.text.set(vertical ? \"maxHeight\" : \"maxWidth\", maxWidth - this.get(\"paddingLeft\", 0) - this.get(\"paddingRight\", 0));\n    } else {\n      this.text.set(vertical ? \"maxHeight\" : \"maxWidth\", undefined);\n    }\n    const maxHeight = this.get(\"maxHeight\", this.getPrivate(\"maxHeight\", Infinity));\n    if ($type.isNumber(maxHeight)) {\n      this.text.set(vertical ? \"maxWidth\" : \"maxHeight\", maxHeight - this.get(\"paddingTop\", 0) - this.get(\"paddingBottom\", 0));\n    } else {\n      this.text.set(vertical ? \"maxWidth\" : \"maxHeight\", undefined);\n    }\n  }\n  _setDataItem(dataItem) {\n    super._setDataItem(dataItem);\n    this._markDirtyKey(\"text\");\n    if (this.text.get(\"populateText\")) {\n      this.text.markDirtyText();\n    }\n  }\n  /**\r\n   * Returns text with populated placeholders and formatting if `populateText` is\r\n   * set to `true`.\r\n   *\r\n   * @return Populated text\r\n   */\n  getText() {\n    return this._text._getText();\n  }\n}\nObject.defineProperty(Label, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Label\"\n});\nObject.defineProperty(Label, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Container.classNames.concat([Label.className])\n});","map":{"version":3,"names":["Text","p50","p100","Container","$array","$type","Label","constructor","Object","defineProperty","text","_text","_afterNew","_makeText","each","_textKeys","property","propValue","get","undefined","set","onPrivate","_setMaxDimentions","children","push","new","_root","_updateChildren","isDirty","textAlign","x","rotation","vertical","maxWidth","getPrivate","Infinity","isNumber","maxHeight","_setDataItem","dataItem","_markDirtyKey","markDirtyText","getText","_getText","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\Label.ts"],"sourcesContent":["import type { Color } from \"../util/Color\";\nimport type { Percent } from \"../util/Percent\";\nimport type { DataItem, IComponentDataItem } from \"./Component\";\n\nimport { Text } from \"../render/Text\";\nimport { p50, p100 } from \"../util/Percent\";\nimport { Container, IContainerPrivate, IContainerSettings } from \"./Container\";\n\nimport * as  $array from \"../../core/util/Array\";\nimport * as  $type from \"../../core/util/Type\";\n\n\nexport interface ILabelSettings extends IContainerSettings {\n\n\t/**\n\t * Labels' text.\n\t */\n\ttext?: string;\n\n\t/**\n\t * Text color.\n\t */\n\tfill?: Color;\n\n\t/**\n\t * Text opacity.\n\t *\n\t * @default 1\n\t * @ince 5.2.39\n\t */\n\tfillOpacity?: number;\n\n\t/**\n\t * Alignment.\n\t */\n\ttextAlign?: \"start\" | \"end\" | \"left\" | \"right\" | \"center\";\n\n\t/**\n\t * Font family to use for the label.\n\t *\n\t * Multiple fonts can be separated by commas.\n\t */\n\tfontFamily?: string;\n\n\t/**\n\t * Font size in misc any supported CSS format (pixel, point, em, etc.).\n\t */\n\tfontSize?: string | number;\n\n\t/**\n\t * Font weight.\n\t */\n\tfontWeight?: \"normal\" | \"bold\" | \"bolder\" | \"lighter\" | \"100\" | \"200\" | \"300\" | \"400\" | \"500\" | \"600\" | \"700\" | \"800\" | \"900\";\n\n\t/**\n\t * Font style.\n\t */\n\tfontStyle?: \"normal\" | \"italic\" | \"oblique\";\n\n\t/**\n\t * Font variant.\n\t */\n\tfontVariant?: \"normal\" | \"small-caps\";\n\n\t/**\n\t * Text decoration.\n\t *\n\t * Supported options `\"underline\"`, `\"line-through\"`.\n\t *\n\t * @since 5.0.15\n\t */\n\ttextDecoration?: \"underline\" | \"line-through\";\n\n\t/**\n\t * Line height in percent or absolute pixels.\n\t */\n\tlineHeight?: Percent | number;\n\n\t/**\n\t * How mouch of the height should be considered to go below baseline.\n\t *\n\t * @default 0.19\n\t */\n\tbaselineRatio?: number;\n\n\t/**\n\t * Opacity of the label.\n\t *\n\t * 0 - fully transparent; 1 - fully opaque.\n\t */\n\topacity?: number;\n\n\t/**\n\t * Text direction.\n\t *\n\t * @default \"ltr\"\n\t */\n\tdirection?: \"ltr\" | \"rtl\";\n\n\t/**\n\t * A base line to use when aligning text chunks vertically.\n\t */\n\ttextBaseline?: \"top\" | \"hanging\" | \"middle\" | \"alphabetic\" | \"ideographic\" | \"bottom\";\n\n\t/**\n\t * How to handle labels that do not fit into its designated space.\n\t *\n\t * LIMITATIONS: on circular labels, the only values supported are `\"hide\"` and\n\t * `\"truncate\"`. The latter will ignore `breakWords` setting.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/labels/#Oversized_text} for more info\n\t */\n\toversizedBehavior?: \"none\" | \"hide\" | \"fit\" | \"wrap\" | \"wrap-no-break\" | \"truncate\";\n\n\t/**\n\t * Whether words can be broken when truncating or wrapping text.\n\t *\n\t * @default false\n\t */\n\tbreakWords?: boolean;\n\n\t/**\n\t * Ellipsis characters to use when truncating text.\n\t *\n\t * Will use Unicode ellipsis symbol (`\"…\"`) by default, which might not be\n\t * available in all fonts. If ellipsis looks broken, use different\n\t * characters. E.g.:\n\t *\n\t * ```TypeScript\n\t * label.set(\"ellipsis\", \"...\");\n\t * ```\n\t * ```JavaScript\n\t * label.set(\"ellipsis\", \"...\");\n\t * ```\n\t *\n\t *\n\t * @default \"…\"\n\t */\n\tellipsis?: string;\n\n\t/**\n\t * Minimum relative scale allowed for label when scaling down\n\t * when `oversizedBehavior` is set to `\"fit\"`.\n\t *\n\t * If fitting the label would require it to scale beyond `minScale` it would\n\t * be hidden instead.\n\t */\n\tminScale?: number;\n\n\t/**\n\t * If set to `true` the label will parse `text` for data placeholders and\n\t * will try to populate them with actual data.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/labels/#Data_placeholders} for more info\n\t */\n\tpopulateText?: boolean;\n\n\t/**\n\t * If set to `true`, will ignore in-line formatting blocks and will display\n\t * text exactly as it is.\n\t *\n\t * @default false\n\t */\n\tignoreFormatting?: boolean;\n\n\t/**\n\t * Color of the element's shadow.\n\t *\n\t * For this to work at least one of the following needs to be set as well:\n\t * `shadowBlur`, `shadowOffsetX`, `shadowOffsetY`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowColor?: Color | null;\n\n\t/**\n\t * Blurriness of the the shadow.\n\t *\n\t * The bigger the number, the more blurry shadow will be.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowBlur?: number;\n\n\t/**\n\t * Horizontal shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetX?: number;\n\n\t/**\n\t * Vertical shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetY?: number;\n\n\t/**\n\t * Opacity of the shadow (0-1).\n\t *\n\t * If not set, will use the same as `fillOpacity` of the element.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOpacity?: number;\n\n\t// The following migh be supported some day:\n\t// padding?: number;\n\t// stroke?: number;\n\t// strokeThickness?: number;\n\t// trim?: number;\n\t// wordWrap?: boolean;\n\t// leading?: number;\n\t// letterSpacing?: number;\n}\n\nexport interface ILabelPrivate extends IContainerPrivate {\n}\n\n/**\n * Creates a label with support for in-line styling and data bindings.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/labels/} for more info\n */\nexport class Label extends Container {\n\n\tdeclare public _settings: ILabelSettings;\n\tdeclare public _privateSettings: ILabelPrivate;\n\n\tprotected _text!: Text;\n\n\tprotected _textKeys: Array<string> = [\n\t\t\"text\",\n\t\t\"fill\",\n\t\t\"fillOpacity\",\n\t\t\"textAlign\",\n\t\t\"fontFamily\",\n\t\t\"fontSize\",\n\t\t\"fontStyle\",\n\t\t\"fontWeight\",\n\t\t\"fontStyle\",\n\t\t\"fontVariant\",\n\t\t\"textDecoration\",\n\t\t\"shadowColor\",\n\t\t\"shadowBlur\",\n\t\t\"shadowOffsetX\",\n\t\t\"shadowOffsetY\",\n\t\t\"shadowOpacity\",\n\t\t// \"leading\",\n\t\t// \"letterSpacing\",\n\t\t\"lineHeight\",\n\t\t\"baselineRatio\",\n\t\t//\"padding\",\n\t\t// \"stroke\",\n\t\t// \"strokeThickness\",\n\t\t// \"trim\",\n\t\t// \"wordWrap\",\n\t\t\"direction\",\n\t\t\"textBaseline\",\n\t\t\"oversizedBehavior\",\n\t\t\"breakWords\",\n\t\t\"ellipsis\",\n\t\t\"minScale\",\n\t\t\"populateText\",\n\t\t\"role\",\n\t\t\"ignoreFormatting\"\n\t];\n\n\tpublic static className: string = \"Label\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([Label.className]);\n\n\t/**\n\t * @ignore Text is not to be used directly\n\t */\n\tpublic get text(): Text {\n\t\treturn this._text;\n\t}\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis._makeText();\n\n\t\t$array.each(this._textKeys, (property) => {\n\t\t\tconst propValue = this.get(property as any);\n\t\t\tif (propValue != undefined) {\n\t\t\t\tthis._text.set(property as any, propValue);\n\t\t\t}\n\t\t});\n\n\t\tif (this.get(\"html\", \"\") !== \"\") {\n\t\t\tthis._text.set(\"text\", \"\");\n\t\t}\n\n\t\tthis.onPrivate(\"maxWidth\", () => {\n\t\t\tthis._setMaxDimentions();\n\t\t});\n\n\t\tthis.onPrivate(\"maxHeight\", () => {\n\t\t\tthis._setMaxDimentions();\n\t\t});\n\t}\n\n\tpublic _makeText() {\n\t\tthis._text = this.children.push(Text.new(this._root, {}));\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\t$array.each(this._textKeys, (property) => {\n\t\t\tthis._text.set(property as any, this.get(property as any));\n\t\t})\n\n\t\tif (this.isDirty(\"maxWidth\")) {\n\t\t\tthis._setMaxDimentions();\n\t\t}\n\n\t\tif (this.isDirty(\"maxHeight\")) {\n\t\t\tthis._setMaxDimentions();\n\t\t}\n\n\t\tif (this.isDirty(\"rotation\")) {\n\t\t\tthis._setMaxDimentions();\n\t\t}\n\n\t\t// Do not show regular text if HTML is used\n\t\tif (this.get(\"html\", \"\") !== \"\") {\n\t\t\tthis._text.set(\"text\", \"\");\n\t\t}\n\t\telse {\n\t\t\tthis._text.set(\"text\", this.get(\"text\"));\n\t\t}\n\n\t\tif (this.isDirty(\"textAlign\") || this.isDirty(\"width\")) {\n\t\t\tconst textAlign = this.get(\"textAlign\");\n\t\t\tlet x: number | Percent | undefined;\n\t\t\tif (this.get(\"width\") != null) {\n\t\t\t\tif (textAlign == \"right\") {\n\t\t\t\t\tx = p100;\n\t\t\t\t}\n\t\t\t\telse if (textAlign == \"center\") {\n\t\t\t\t\tx = p50;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tx = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (textAlign == \"left\" || textAlign == \"start\") {\n\t\t\t\t\tx = this.get(\"paddingLeft\");\n\t\t\t\t}\n\t\t\t\telse if (textAlign == \"right\" || textAlign == \"end\") {\n\t\t\t\t\tx = -this.get(\"paddingRight\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.text.set(\"x\", x);\n\t\t}\n\t}\n\n\tprotected _setMaxDimentions() {\n\t\tconst rotation = this.get(\"rotation\");\n\t\tconst vertical = rotation == 90 || rotation == 270 || rotation == -90;\n\n\t\tconst maxWidth = this.get(\"maxWidth\", this.getPrivate(\"maxWidth\", Infinity));\n\t\tif ($type.isNumber(maxWidth)) {\n\t\t\tthis.text.set(vertical ? \"maxHeight\" : \"maxWidth\", maxWidth - this.get(\"paddingLeft\", 0) - this.get(\"paddingRight\", 0));\n\t\t}\n\t\telse {\n\t\t\tthis.text.set(vertical ? \"maxHeight\" : \"maxWidth\", undefined);\n\t\t}\n\n\t\tconst maxHeight = this.get(\"maxHeight\", this.getPrivate(\"maxHeight\", Infinity));\n\t\tif ($type.isNumber(maxHeight)) {\n\t\t\tthis.text.set(vertical ? \"maxWidth\" : \"maxHeight\", maxHeight - this.get(\"paddingTop\", 0) - this.get(\"paddingBottom\", 0));\n\t\t}\n\t\telse {\n\t\t\tthis.text.set(vertical ? \"maxWidth\" : \"maxHeight\", undefined);\n\t\t}\n\t}\n\n\tpublic _setDataItem(dataItem?: DataItem<IComponentDataItem>): void {\n\t\tsuper._setDataItem(dataItem);\n\t\tthis._markDirtyKey(\"text\")\n\t\tif (this.text.get(\"populateText\")) {\n\t\t\tthis.text.markDirtyText();\n\t\t}\n\t}\n\n\t/**\n\t * Returns text with populated placeholders and formatting if `populateText` is\n\t * set to `true`.\n\t *\n\t * @return Populated text\n\t */\n\tpublic getText(): string {\n\t\treturn this._text._getText();\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}