{"ast":null,"code":"import { Entity } from \"./Entity\";\nimport { TextFormatter } from \"./TextFormatter\";\nimport * as $object from \"./Object\";\nimport * as $utils from \"./Utils\";\nimport * as $type from \"./Type\";\n/**\r\n * A class used to format numberic values as time duration.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/} for more info\r\n */\nexport class DurationFormatter extends Entity {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * Collection of aliases for units.\r\n     */\n    Object.defineProperty(this, \"_unitAliases\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {\n        \"Y\": \"y\",\n        \"D\": \"d\",\n        \"H\": \"h\",\n        \"K\": \"h\",\n        \"k\": \"h\",\n        \"n\": \"S\"\n      }\n    });\n  }\n  _setDefaults() {\n    const dmillisecond = \"_duration_millisecond\";\n    const dsecond = \"_duration_second\";\n    const dminute = \"_duration_minute\";\n    const dhour = \"_duration_hour\";\n    const dday = \"_duration_day\";\n    const dweek = \"_duration_week\";\n    const dmonth = \"_duration_month\";\n    const dyear = \"_duration_year\";\n    const asecond = \"_second\";\n    const aminute = \"_minute\";\n    const ahour = \"_hour\";\n    const aday = \"_day\";\n    const aweek = \"_week\";\n    const amonth = \"_week\";\n    const ayear = \"_year\";\n    // Defaults\n    this._setDefault(\"negativeBase\", 0);\n    this._setDefault(\"baseUnit\", \"second\");\n    this._setDefault(\"durationFormats\", {\n      \"millisecond\": {\n        \"millisecond\": this._t(dmillisecond),\n        \"second\": this._t(dmillisecond + asecond),\n        \"minute\": this._t(dmillisecond + aminute),\n        \"hour\": this._t(dmillisecond + ahour),\n        \"day\": this._t(dmillisecond + aday),\n        \"week\": this._t(dmillisecond + aweek),\n        \"month\": this._t(dmillisecond + amonth),\n        \"year\": this._t(dmillisecond + ayear)\n      },\n      \"second\": {\n        \"second\": this._t(dsecond),\n        \"minute\": this._t(dsecond + aminute),\n        \"hour\": this._t(dsecond + ahour),\n        \"day\": this._t(dsecond + aday),\n        \"week\": this._t(dsecond + aweek),\n        \"month\": this._t(dsecond + amonth),\n        \"year\": this._t(dsecond + ayear)\n      },\n      \"minute\": {\n        \"minute\": this._t(dminute),\n        \"hour\": this._t(dminute + ahour),\n        \"day\": this._t(dminute + aday),\n        \"week\": this._t(dminute + aweek),\n        \"month\": this._t(dminute + amonth),\n        \"year\": this._t(dminute + ayear)\n      },\n      \"hour\": {\n        \"hour\": this._t(dhour),\n        \"day\": this._t(dhour + aday),\n        \"week\": this._t(dhour + aweek),\n        \"month\": this._t(dhour + amonth),\n        \"year\": this._t(dhour + ayear)\n      },\n      \"day\": {\n        \"day\": this._t(dday),\n        \"week\": this._t(dday + aweek),\n        \"month\": this._t(dday + amonth),\n        \"year\": this._t(dday + ayear)\n      },\n      \"week\": {\n        \"week\": this._t(dweek),\n        \"month\": this._t(dweek + amonth),\n        \"year\": this._t(dweek + ayear)\n      },\n      \"month\": {\n        \"month\": this._t(dmonth),\n        \"year\": this._t(dmonth + ayear)\n      },\n      \"year\": {\n        \"year\": this._t(dyear)\n      }\n    });\n    super._setDefaults();\n  }\n  _beforeChanged() {\n    super._beforeChanged();\n  }\n  /**\r\n   * Formats the number as duration.\r\n   *\r\n   * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n   * 16 minutes and 40 seconds.\r\n   *\r\n   * @param value   Value to format\r\n   * @param format  Format to apply\r\n   * @param base    Override base unit\r\n   * @return Formatted number\r\n   */\n  format(value, format, base) {\n    // no base unit?\n    let baseUnit = base || this.get(\"baseUnit\");\n    // no format passed in or empty\n    if (typeof format === \"undefined\" || format === \"\") {\n      if (this.get(\"durationFormat\") != null) {\n        format = this.get(\"durationFormat\");\n      } else {\n        format = this.getFormat($type.toNumber(value), undefined, baseUnit);\n      }\n    }\n    // Clean format\n    format = $utils.cleanFormat(format);\n    // get format info (it will also deal with parser caching)\n    let info = this.parseFormat(format, baseUnit);\n    // cast to number just in case\n    // TODO: maybe use better casting\n    let source = Number(value);\n    // format and replace the number\n    let details;\n    if (source > this.get(\"negativeBase\")) {\n      details = info.positive;\n    } else if (source < this.get(\"negativeBase\")) {\n      details = info.negative;\n    } else {\n      details = info.zero;\n    }\n    // Format\n    let formatted = this.applyFormat(source, details);\n    // Apply color?\n    if (details.color !== \"\") {\n      formatted = \"[\" + details.color + \"]\" + formatted + \"[/]\";\n    }\n    return formatted;\n  }\n  /**\r\n   * Parses supplied format into structured object which can be used to format\r\n   * the number.\r\n   *\r\n   * @param format  Format string, i.e. \"#,###.00\"\r\n   * @param base    Override base unit\r\n   * @return Parsed information\r\n   */\n  parseFormat(format, base) {\n    // Check cache\n    // TODO\n    // let cached = this.getCache(format);\n    // if (cached != null) {\n    // \treturn cached;\n    // }\n    // no base unit?\n    let baseUnit = base || this.get(\"baseUnit\");\n    // Initialize duration parsing info\n    let info = {\n      \"positive\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      },\n      \"negative\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      },\n      \"zero\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      }\n    };\n    // Escape double vertical bars (that mean display one vertical bar)\n    format = format.replace(\"||\", $type.PLACEHOLDER2);\n    // Split it up and deal with different formats\n    let parts = format.split(\"|\");\n    info.positive.source = parts[0];\n    if (typeof parts[2] === \"undefined\") {\n      info.zero = info.positive;\n    } else {\n      info.zero.source = parts[2];\n    }\n    if (typeof parts[1] === \"undefined\") {\n      info.negative = info.positive;\n    } else {\n      info.negative.source = parts[1];\n    }\n    // Parse each\n    $object.each(info, (_part, item) => {\n      // Already parsed\n      if (item.parsed) {\n        return;\n      }\n      // Check cached\n      // TODO\n      // if (typeof this.getCache(item.source) !== \"undefined\") {\n      // \tinfo[part] = this.getCache(item.source);\n      // \treturn;\n      // }\n      // Begin parsing\n      let partFormat = item.source;\n      // Check for [] directives\n      let dirs = [];\n      dirs = item.source.match(/^\\[([^\\]]*)\\]/);\n      if (dirs && dirs.length && dirs[0] !== \"\") {\n        partFormat = item.source.substr(dirs[0].length);\n        item.color = dirs[1];\n      }\n      // Let TextFormatter split into chunks\n      let chunks = TextFormatter.chunk(partFormat, true);\n      for (let i = 0; i < chunks.length; i++) {\n        let chunk = chunks[i];\n        // replace back double vertical bar\n        chunk.text = chunk.text.replace($type.PLACEHOLDER2, \"|\");\n        if (chunk.type === \"value\") {\n          // Just \"Duration\"?\n          // if (chunk.text.toLowerCase() === \"duration\") {\n          // \tchunk.text = durationFormat;\n          // }\n          // Check for \"a\" (absolute) modifier\n          if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\n            item.absolute = true;\n            chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\n          }\n          // Find all possible parts\n          let matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\n          if (matches) {\n            // Populate template\n            for (let x = 0; x < matches.length; x++) {\n              // Is it an alias?\n              if (matches[x] == null) {\n                matches[x] = this._unitAliases[matches[x]];\n              }\n              item.parts.push(matches[x]);\n              chunk.text = chunk.text.replace(matches[x], $type.PLACEHOLDER);\n            }\n          }\n        }\n        // Apply to template\n        item.template += chunk.text;\n      }\n      // Apply style formatting\n      //item.template = TextFormatter.format(item.template, this.outputFormat);\n      // Save cache\n      // TODO\n      //this.setCache(item.source, item);\n      // Mark this as parsed\n      item.parsed = true;\n    });\n    // Save cache (the whole thing)\n    // TODO\n    //this.setCache(format, info);\n    return info;\n  }\n  /**\r\n   * Applies parsed format to a numeric value.\r\n   *\r\n   * @param value    Value\r\n   * @param details  Parsed format as returned by {parseFormat}\r\n   * @return Formatted duration\r\n   */\n  applyFormat(value, details) {\n    // Use absolute values\n    let negative = !details.absolute && value < this.get(\"negativeBase\");\n    value = Math.abs(value);\n    // Recalculate to milliseconds\n    let tstamp = this.toTimeStamp(value, details.baseUnit);\n    // Init return value\n    let res = details.template;\n    // Iterate through duration parts\n    for (let i = 0, len = details.parts.length; i < len; i++) {\n      // Gather the part\n      let part = details.parts[i];\n      let unit = this._toTimeUnit(part.substr(0, 1));\n      let digits = part.length;\n      // Calculate current unit value\n      let ints = Math.floor(tstamp / this._getUnitValue(unit));\n      res = res.replace($type.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\n      // Reduce timestamp\n      tstamp -= ints * this._getUnitValue(unit);\n    }\n    // Reapply negative sign\n    if (negative) {\n      res = \"-\" + res;\n    }\n    return res;\n  }\n  /**\r\n   * Converts numeric value to timestamp in milliseconds.\r\n   *\r\n   * @param value     A source value\r\n   * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n   * @return Value representation as a timestamp in milliseconds\r\n   */\n  toTimeStamp(value, baseUnit) {\n    return value * this._getUnitValue(baseUnit);\n  }\n  _toTimeUnit(code) {\n    switch (code) {\n      case \"S\":\n        return \"millisecond\";\n      case \"s\":\n        return \"second\";\n      case \"m\":\n        return \"minute\";\n      case \"h\":\n        return \"hour\";\n      case \"d\":\n        return \"day\";\n      case \"w\":\n        return \"week\";\n      case \"M\":\n        return \"month\";\n      case \"y\":\n        return \"year\";\n    }\n    ;\n  }\n  /**\r\n   * Returns appropriate default format for the value.\r\n   *\r\n   * If `maxValue` is sepcified, it will use that value to determine the time\r\n   * unit for the format.\r\n   *\r\n   * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n   * will get `\"10\"`.\r\n   *\r\n   * However, you might want it to be formatted in the context of bigger scale,\r\n   * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n   * values, including small ones will use format with minutes, e.g.:\r\n   * `00:10`, `00:50`, `12: 30`, etc.\r\n   *\r\n   * @param value     Value to format\r\n   * @param maxValue  Maximum value to be used to determine format\r\n   * @param baseUnit  Base unit of the value\r\n   * @return Format\r\n   */\n  getFormat(value, maxValue, baseUnit) {\n    // Is format override set?\n    if (this.get(\"durationFormat\") != null) {\n      return this.get(\"durationFormat\");\n    }\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.get(\"baseUnit\");\n    }\n    if (maxValue != null && value != maxValue) {\n      value = Math.abs(value);\n      maxValue = Math.abs(maxValue);\n      let maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit);\n      //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\n      //console.log(maxUnit, diffUnit);\n      return this.get(\"durationFormats\")[baseUnit][maxUnit];\n    } else {\n      let unit = this.getValueUnit(value, baseUnit);\n      return this.get(\"durationFormats\")[baseUnit][unit];\n    }\n  }\n  /**\r\n   * Returns value's closest denominator time unit, e.g 100 seconds is\r\n   * `\"minute\"`, while 59 seconds would still be `second`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Denominator\r\n   */\n  getValueUnit(value, baseUnit) {\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.get(\"baseUnit\");\n    }\n    // Convert to milliseconds\n    let currentUnit;\n    let ms = this.getMilliseconds(value, baseUnit);\n    $object.eachContinue(this._getUnitValues(), (key, val) => {\n      if (key == baseUnit || currentUnit) {\n        let num = ms / val;\n        if (num <= 1) {\n          if (!currentUnit) {\n            currentUnit = key;\n          }\n          return false;\n        }\n        currentUnit = key;\n      }\n      return true;\n    });\n    return currentUnit;\n  }\n  /**\r\n   * Converts value to milliseconds according to `baseUnit`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Value in milliseconds\r\n   */\n  getMilliseconds(value, baseUnit) {\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.get(\"baseUnit\");\n    }\n    return value * this._getUnitValue(baseUnit);\n  }\n  _getUnitValue(timeUnit) {\n    return this._getUnitValues()[timeUnit];\n  }\n  _getUnitValues() {\n    return {\n      \"millisecond\": 1,\n      \"second\": 1000,\n      \"minute\": 60000,\n      \"hour\": 3600000,\n      \"day\": 86400000,\n      \"week\": 604800000,\n      \"month\": 2592000000,\n      \"year\": 31536000000\n    };\n  }\n}","map":{"version":3,"names":["Entity","TextFormatter","$object","$utils","$type","DurationFormatter","constructor","Object","defineProperty","_setDefaults","dmillisecond","dsecond","dminute","dhour","dday","dweek","dmonth","dyear","asecond","aminute","ahour","aday","aweek","amonth","ayear","_setDefault","_t","_beforeChanged","format","value","base","baseUnit","get","getFormat","toNumber","undefined","cleanFormat","info","parseFormat","source","Number","details","positive","negative","zero","formatted","applyFormat","color","replace","PLACEHOLDER2","parts","split","each","_part","item","parsed","partFormat","dirs","match","length","substr","chunks","chunk","i","text","type","absolute","matches","x","_unitAliases","push","PLACEHOLDER","template","Math","abs","tstamp","toTimeStamp","res","len","part","unit","_toTimeUnit","digits","ints","floor","_getUnitValue","padString","code","maxValue","maxUnit","getValueUnit","max","currentUnit","ms","getMilliseconds","eachContinue","_getUnitValues","key","val","num","timeUnit"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\util\\DurationFormatter.ts"],"sourcesContent":["import type { TimeUnit } from \"./Time\";\r\n\r\nimport { Entity, IEntitySettings, IEntityPrivate } from \"./Entity\"\r\nimport { TextFormatter } from \"./TextFormatter\";\r\n\r\nimport * as $object from \"./Object\";\r\nimport * as $utils from \"./Utils\";\r\nimport * as $type from \"./Type\";\r\n\r\n\r\nexport interface IDurationFormatterSettings extends IEntitySettings {\r\n\r\n\t/**\r\n\t * A universal duration format to use wherever number needs to be formatted\r\n\t * as a duration.\r\n\t */\r\n\tdurationFormat?: string;\r\n\r\n\t/**\r\n\t * A base value. Any number below it will be considered \"negative\".\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tnegativeBase?: number;\r\n\r\n\t/**\r\n\t * Identifies what values are used in duration.\r\n\t *\r\n\t * Available options: `\"millisecond\"`, `\"second\"` (default), `\"minute\"`, `\"hour\"`, `\"day\"`, `\"week\"`, `\"month\"`, and `\"year\"`.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/#Base_unit} for more info\r\n\t * @default \"second\"\r\n\t */\r\n\tbaseUnit?: TimeUnit;\r\n\r\n\t/**\r\n\t * Time unit dependent duration formats.\r\n\t *\r\n\t * Used be [[DurationAxis]].\r\n\t */\r\n\tdurationFormats?: Partial<Record<TimeUnit, Partial<Record<TimeUnit, string>>>>;\r\n\r\n\t/**\r\n\t * An array of data fields that hold duration values and should be formatted\r\n\t * with a [[DurationFormatter]].\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/data-placeholders/#Formatting_placeholders} for more info\r\n\t */\r\n\tdurationFields?: string[];\r\n\r\n}\r\n\r\nexport interface IDurationFormatterPrivate extends IEntityPrivate {\r\n}\r\n\r\n/**\r\n * A class used to format numberic values as time duration.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/} for more info\r\n */\r\nexport class DurationFormatter extends Entity {\r\n\tdeclare public _settings: IDurationFormatterSettings;\r\n\tdeclare public _privateSettings: IDurationFormatterPrivate;\r\n\r\n\tprotected _setDefaults() {\r\n\t\tconst dmillisecond = \"_duration_millisecond\";\r\n\t\tconst dsecond = \"_duration_second\";\r\n\t\tconst dminute = \"_duration_minute\";\r\n\t\tconst dhour = \"_duration_hour\";\r\n\t\tconst dday = \"_duration_day\";\r\n\t\tconst dweek = \"_duration_week\";\r\n\t\tconst dmonth = \"_duration_month\";\r\n\t\tconst dyear = \"_duration_year\";\r\n\r\n\t\tconst asecond = \"_second\";\r\n\t\tconst aminute = \"_minute\";\r\n\t\tconst ahour = \"_hour\";\r\n\t\tconst aday = \"_day\";\r\n\t\tconst aweek = \"_week\";\r\n\t\tconst amonth = \"_week\";\r\n\t\tconst ayear = \"_year\";\r\n\r\n\t\t// Defaults\r\n\t\tthis._setDefault(\"negativeBase\", 0);\r\n\t\tthis._setDefault(\"baseUnit\", \"second\");\r\n\t\tthis._setDefault(\"durationFormats\", {\r\n\t\t\t\"millisecond\": {\r\n\t\t\t\t\"millisecond\": this._t(dmillisecond),\r\n\t\t\t\t\"second\": this._t((dmillisecond + asecond) as any),\r\n\t\t\t\t\"minute\": this._t((dmillisecond + aminute) as any),\r\n\t\t\t\t\"hour\": this._t((dmillisecond + ahour) as any),\r\n\t\t\t\t\"day\": this._t((dmillisecond + aday) as any),\r\n\t\t\t\t\"week\": this._t((dmillisecond + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dmillisecond + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dmillisecond + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"second\": {\r\n\t\t\t\t\"second\": this._t((dsecond) as any),\r\n\t\t\t\t\"minute\": this._t((dsecond + aminute) as any),\r\n\t\t\t\t\"hour\": this._t((dsecond + ahour) as any),\r\n\t\t\t\t\"day\": this._t((dsecond + aday) as any),\r\n\t\t\t\t\"week\": this._t((dsecond + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dsecond + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dsecond + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"minute\": {\r\n\t\t\t\t\"minute\": this._t((dminute) as any),\r\n\t\t\t\t\"hour\": this._t((dminute + ahour) as any),\r\n\t\t\t\t\"day\": this._t((dminute + aday) as any),\r\n\t\t\t\t\"week\": this._t((dminute + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dminute + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dminute + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"hour\": {\r\n\t\t\t\t\"hour\": this._t((dhour) as any),\r\n\t\t\t\t\"day\": this._t((dhour + aday) as any),\r\n\t\t\t\t\"week\": this._t((dhour + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dhour + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dhour + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"day\": {\r\n\t\t\t\t\"day\": this._t((dday) as any),\r\n\t\t\t\t\"week\": this._t((dday + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dday + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dday + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"week\": {\r\n\t\t\t\t\"week\": this._t((dweek) as any),\r\n\t\t\t\t\"month\": this._t((dweek + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dweek + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"month\": {\r\n\t\t\t\t\"month\": this._t((dmonth) as any),\r\n\t\t\t\t\"year\": this._t((dmonth + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"year\": {\r\n\t\t\t\t\"year\": this._t(dyear)\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsuper._setDefaults();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Collection of aliases for units.\r\n\t */\r\n\tprotected _unitAliases: { [index: string]: string } = {\r\n\t\t\"Y\": \"y\",\r\n\t\t\"D\": \"d\",\r\n\t\t\"H\": \"h\",\r\n\t\t\"K\": \"h\",\r\n\t\t\"k\": \"h\",\r\n\t\t\"n\": \"S\"\r\n\t};\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the number as duration.\r\n\t *\r\n\t * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n\t * 16 minutes and 40 seconds.\r\n\t *\r\n\t * @param value   Value to format\r\n\t * @param format  Format to apply\r\n\t * @param base    Override base unit\r\n\t * @return Formatted number\r\n\t */\r\n\tpublic format(value: number | string, format?: string, base?: TimeUnit): string {\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this.get(\"baseUnit\");\r\n\r\n\t\t// no format passed in or empty\r\n\t\tif (typeof format === \"undefined\" || format === \"\") {\r\n\t\t\tif (this.get(\"durationFormat\") != null) {\r\n\t\t\t\tformat = this.get(\"durationFormat\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tformat = this.getFormat($type.toNumber(value), undefined, baseUnit);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Clean format\r\n\t\tformat = $utils.cleanFormat(format!);\r\n\r\n\t\t// get format info (it will also deal with parser caching)\r\n\t\tlet info = this.parseFormat(format, baseUnit);\r\n\r\n\t\t// cast to number just in case\r\n\t\t// TODO: maybe use better casting\r\n\t\tlet source: number = Number(value);\r\n\r\n\t\t// format and replace the number\r\n\t\tlet details;\r\n\t\tif (source > this.get(\"negativeBase\")) {\r\n\t\t\tdetails = info.positive;\r\n\t\t}\r\n\t\telse if (source < this.get(\"negativeBase\")) {\r\n\t\t\tdetails = info.negative;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdetails = info.zero;\r\n\t\t}\r\n\r\n\r\n\t\t// Format\r\n\t\tlet formatted = this.applyFormat(source, details);\r\n\r\n\t\t// Apply color?\r\n\t\tif (details.color !== \"\") {\r\n\t\t\tformatted = \"[\" + details.color + \"]\" + formatted + \"[/]\";\r\n\t\t}\r\n\r\n\t\treturn formatted;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses supplied format into structured object which can be used to format\r\n\t * the number.\r\n\t *\r\n\t * @param format  Format string, i.e. \"#,###.00\"\r\n\t * @param base    Override base unit\r\n\t * @return Parsed information\r\n\t */\r\n\tprotected parseFormat(format: string, base?: TimeUnit): any {\r\n\r\n\t\t// Check cache\r\n\t\t// TODO\r\n\t\t// let cached = this.getCache(format);\r\n\t\t// if (cached != null) {\r\n\t\t// \treturn cached;\r\n\t\t// }\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this.get(\"baseUnit\");\r\n\r\n\t\t// Initialize duration parsing info\r\n\t\tlet info = {\r\n\t\t\t\"positive\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"negative\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"zero\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Escape double vertical bars (that mean display one vertical bar)\r\n\t\tformat = format.replace(\"||\", $type.PLACEHOLDER2);\r\n\r\n\t\t// Split it up and deal with different formats\r\n\t\tlet parts = format.split(\"|\");\r\n\t\tinfo.positive.source = parts[0];\r\n\r\n\t\tif (typeof parts[2] === \"undefined\") {\r\n\t\t\tinfo.zero = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.zero.source = parts[2];\r\n\t\t}\r\n\r\n\t\tif (typeof parts[1] === \"undefined\") {\r\n\t\t\tinfo.negative = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.negative.source = parts[1];\r\n\t\t}\r\n\r\n\t\t// Parse each\r\n\t\t$object.each(info, (_part, item) => {\r\n\t\t\t// Already parsed\r\n\t\t\tif (item.parsed) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Check cached\r\n\t\t\t// TODO\r\n\t\t\t// if (typeof this.getCache(item.source) !== \"undefined\") {\r\n\t\t\t// \tinfo[part] = this.getCache(item.source);\r\n\t\t\t// \treturn;\r\n\t\t\t// }\r\n\r\n\t\t\t// Begin parsing\r\n\t\t\tlet partFormat: string = item.source;\r\n\r\n\t\t\t// Check for [] directives\r\n\t\t\tlet dirs: string[] | null = [];\r\n\t\t\tdirs = item.source.match(/^\\[([^\\]]*)\\]/);\r\n\t\t\tif (dirs && dirs.length && dirs[0] !== \"\") {\r\n\t\t\t\tpartFormat = item.source.substr(dirs[0].length);\r\n\t\t\t\titem.color = dirs[1];\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Let TextFormatter split into chunks\r\n\t\t\tlet chunks = TextFormatter.chunk(partFormat, true);\r\n\t\t\tfor (let i: number = 0; i < chunks.length; i++) {\r\n\t\t\t\tlet chunk = chunks[i];\r\n\r\n\t\t\t\t// replace back double vertical bar\r\n\t\t\t\tchunk.text = chunk.text.replace($type.PLACEHOLDER2, \"|\");\r\n\r\n\t\t\t\tif (chunk.type === \"value\") {\r\n\r\n\t\t\t\t\t// Just \"Duration\"?\r\n\t\t\t\t\t// if (chunk.text.toLowerCase() === \"duration\") {\r\n\t\t\t\t\t// \tchunk.text = durationFormat;\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// Check for \"a\" (absolute) modifier\r\n\t\t\t\t\tif (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\r\n\t\t\t\t\t\titem.absolute = true;\r\n\t\t\t\t\t\tchunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Find all possible parts\r\n\t\t\t\t\tlet matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\r\n\r\n\t\t\t\t\tif (matches) {\r\n\t\t\t\t\t\t// Populate template\r\n\t\t\t\t\t\tfor (let x = 0; x < matches.length; x++) {\r\n\t\t\t\t\t\t\t// Is it an alias?\r\n\t\t\t\t\t\t\tif (matches[x] == null) {\r\n\t\t\t\t\t\t\t\tmatches[x] = this._unitAliases[matches[x]];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\titem.parts.push(matches[x]);\r\n\t\t\t\t\t\t\tchunk.text = chunk.text.replace(matches[x], $type.PLACEHOLDER);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply to template\r\n\t\t\t\titem.template += chunk.text;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply style formatting\r\n\t\t\t//item.template = TextFormatter.format(item.template, this.outputFormat);\r\n\r\n\t\t\t// Save cache\r\n\t\t\t// TODO\r\n\t\t\t//this.setCache(item.source, item);\r\n\r\n\t\t\t// Mark this as parsed\r\n\t\t\titem.parsed = true;\r\n\t\t});\r\n\r\n\t\t// Save cache (the whole thing)\r\n\t\t// TODO\r\n\t\t//this.setCache(format, info);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies parsed format to a numeric value.\r\n\t *\r\n\t * @param value    Value\r\n\t * @param details  Parsed format as returned by {parseFormat}\r\n\t * @return Formatted duration\r\n\t */\r\n\tprotected applyFormat(value: number, details: any): string {\r\n\r\n\t\t// Use absolute values\r\n\t\tlet negative = !details.absolute && (value < this.get(\"negativeBase\"));\r\n\t\tvalue = Math.abs(value);\r\n\r\n\t\t// Recalculate to milliseconds\r\n\t\tlet tstamp = this.toTimeStamp(value, details.baseUnit);\r\n\r\n\t\t// Init return value\r\n\t\tlet res = details.template;\r\n\r\n\t\t// Iterate through duration parts\r\n\t\tfor (let i = 0, len = details.parts.length; i < len; i++) {\r\n\r\n\t\t\t// Gather the part\r\n\t\t\tlet part = details.parts[i];\r\n\t\t\tlet unit = this._toTimeUnit(part.substr(0, 1));\r\n\t\t\tlet digits = part.length;\r\n\r\n\t\t\t// Calculate current unit value\r\n\t\t\tlet ints = Math.floor(tstamp / this._getUnitValue(unit!));\r\n\t\t\tres = res.replace($type.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\r\n\r\n\t\t\t// Reduce timestamp\r\n\t\t\ttstamp -= ints * this._getUnitValue(unit!);\r\n\t\t}\r\n\r\n\t\t// Reapply negative sign\r\n\t\tif (negative) {\r\n\t\t\tres = \"-\" + res;\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts numeric value to timestamp in milliseconds.\r\n\t *\r\n\t * @param value     A source value\r\n\t * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n\t * @return Value representation as a timestamp in milliseconds\r\n\t */\r\n\tpublic toTimeStamp(value: number, baseUnit: TimeUnit): number {\r\n\t\treturn value * this._getUnitValue(baseUnit);\r\n\t}\r\n\r\n\tprotected _toTimeUnit(code: string): TimeUnit | undefined {\r\n\t\tswitch (code) {\r\n\t\t\tcase \"S\":\r\n\t\t\t\treturn \"millisecond\";\r\n\t\t\tcase \"s\":\r\n\t\t\t\treturn \"second\";\r\n\t\t\tcase \"m\":\r\n\t\t\t\treturn \"minute\";\r\n\t\t\tcase \"h\":\r\n\t\t\t\treturn \"hour\";\r\n\t\t\tcase \"d\":\r\n\t\t\t\treturn \"day\";\r\n\t\t\tcase \"w\":\r\n\t\t\t\treturn \"week\";\r\n\t\t\tcase \"M\":\r\n\t\t\t\treturn \"month\";\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn \"year\";\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns appropriate default format for the value.\r\n\t *\r\n\t * If `maxValue` is sepcified, it will use that value to determine the time\r\n\t * unit for the format.\r\n\t *\r\n\t * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n\t * will get `\"10\"`.\r\n\t *\r\n\t * However, you might want it to be formatted in the context of bigger scale,\r\n\t * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n\t * values, including small ones will use format with minutes, e.g.:\r\n\t * `00:10`, `00:50`, `12: 30`, etc.\r\n\t *\r\n\t * @param value     Value to format\r\n\t * @param maxValue  Maximum value to be used to determine format\r\n\t * @param baseUnit  Base unit of the value\r\n\t * @return Format\r\n\t */\r\n\tpublic getFormat(value: number, maxValue?: number, baseUnit?: TimeUnit): string {\r\n\r\n\t\t// Is format override set?\r\n\t\tif (this.get(\"durationFormat\") != null) {\r\n\t\t\treturn this.get(\"durationFormat\")!;\r\n\t\t}\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.get(\"baseUnit\");\r\n\t\t}\r\n\r\n\t\tif (maxValue != null && value != maxValue) {\r\n\t\t\tvalue = Math.abs(value);\r\n\t\t\tmaxValue = Math.abs(maxValue);\r\n\t\t\tlet maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit);\r\n\t\t\t//let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\r\n\t\t\t//console.log(maxUnit, diffUnit);\r\n\t\t\treturn (<any>this.get(\"durationFormats\"))[baseUnit!][maxUnit!];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet unit = this.getValueUnit(value, baseUnit);\r\n\t\t\treturn (<any>this.get(\"durationFormats\"))[baseUnit!][unit!];\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value's closest denominator time unit, e.g 100 seconds is\r\n\t * `\"minute\"`, while 59 seconds would still be `second`.\r\n\t *\r\n\t * @param value     Source duration value\r\n\t * @param baseUnit  Base unit\r\n\t * @return Denominator\r\n\t */\r\n\tpublic getValueUnit(value: number, baseUnit?: TimeUnit): TimeUnit | undefined {\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.get(\"baseUnit\");\r\n\t\t}\r\n\r\n\t\t// Convert to milliseconds\r\n\t\tlet currentUnit: any;\r\n\t\tlet ms = this.getMilliseconds(value, baseUnit);\r\n\t\t$object.eachContinue(this._getUnitValues(), (key, val) => {\r\n\t\t\tif (key == baseUnit || currentUnit) {\r\n\t\t\t\tlet num = ms / val;\r\n\t\t\t\tif (num <= 1) {\r\n\t\t\t\t\tif (!currentUnit) {\r\n\t\t\t\t\t\tcurrentUnit = key;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentUnit = key;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn currentUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts value to milliseconds according to `baseUnit`.\r\n\t *\r\n\t * @param value     Source duration value\r\n\t * @param baseUnit  Base unit\r\n\t * @return Value in milliseconds\r\n\t */\r\n\tpublic getMilliseconds(value: number, baseUnit?: TimeUnit): number {\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.get(\"baseUnit\");\r\n\t\t}\r\n\r\n\t\treturn value * this._getUnitValue(baseUnit!);\r\n\t}\r\n\r\n\tprotected _getUnitValue(timeUnit: TimeUnit): number {\r\n\t\treturn this._getUnitValues()[timeUnit];\r\n\t}\r\n\r\n\tprotected _getUnitValues(): any {\r\n\t\treturn {\r\n\t\t\t\"millisecond\": 1,\r\n\t\t\t\"second\": 1000,\r\n\t\t\t\"minute\": 60000,\r\n\t\t\t\"hour\": 3600000,\r\n\t\t\t\"day\": 86400000,\r\n\t\t\t\"week\": 604800000,\r\n\t\t\t\"month\": 2592000000,\r\n\t\t\t\"year\": 31536000000,\r\n\t\t};\r\n\t}\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}