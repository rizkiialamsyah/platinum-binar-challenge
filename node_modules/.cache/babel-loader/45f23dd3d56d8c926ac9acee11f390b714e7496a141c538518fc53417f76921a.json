{"ast":null,"code":"import { DataItem } from \"../../../core/render/Component\";\nimport { Component } from \"../../../core/render/Component\";\nimport { Container } from \"../../../core/render/Container\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport { List } from \"../../../core/util/List\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * A base class for all axes.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Adding_axes} for more info\r\n */\nexport class Axis extends Component {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_series\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"_isPanning\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    /**\r\n     * A [[Container]] that holds all the axis label elements.\r\n     *\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"labelsContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Container.new(this._root, {}))\n    });\n    /**\r\n     * A [[Container]] that holds all the axis grid and fill elements.\r\n     *\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"gridContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(this._root, {\n        width: p100,\n        height: p100\n      })\n    });\n    /**\r\n     * A [[Container]] that holds axis grid elements which goes above the series.\r\n     *\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"topGridContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(this._root, {\n        width: p100,\n        height: p100\n      })\n    });\n    /**\r\n     * A [[Container]] that holds all the axis bullet elements.\r\n     *\r\n     * @default new Container\r\n     */\n    Object.defineProperty(this, \"bulletsContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Container.new(this._root, {\n        isMeasured: false,\n        width: p100,\n        height: p100,\n        position: \"absolute\"\n      }))\n    });\n    /**\r\n     * A referenece to the the chart the axis belongs to.\r\n     */\n    Object.defineProperty(this, \"chart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_rangesDirty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_panStart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_panEnd\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"_sAnimation\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_eAnimation\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_skipSync\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    /**\r\n     * A list of axis ranges.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\r\n     * @default new List()\r\n     */\n    Object.defineProperty(this, \"axisRanges\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new List()\n    });\n    Object.defineProperty(this, \"_seriesAxisRanges\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    /**\r\n     * A control label that is invisible but is used to keep width the width of\r\n     * the axis constant.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Ghost_label} for more info\r\n     */\n    Object.defineProperty(this, \"ghostLabel\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_cursorPosition\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -1\n    });\n    Object.defineProperty(this, \"_snapToSeries\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_seriesValuesDirty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    /**\r\n     * A container above the axis that can be used to add additional stuff into\r\n     * it. For example a legend, label, or an icon.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info\r\n     * @default new Container\r\n     */\n    Object.defineProperty(this, \"axisHeader\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Container.new(this._root, {\n        themeTags: [\"axis\", \"header\"],\n        position: \"absolute\",\n        background: Rectangle.new(this._root, {\n          themeTags: [\"header\", \"background\"],\n          fill: this._root.interfaceColors.get(\"background\")\n        })\n      }))\n    });\n    Object.defineProperty(this, \"_bullets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n  }\n  _dispose() {\n    // these could be in other parents, so disposing just in case\n    this.gridContainer.dispose();\n    this.topGridContainer.dispose();\n    this.bulletsContainer.dispose();\n    this.labelsContainer.dispose();\n    this.axisHeader.dispose();\n    super._dispose();\n  }\n  _afterNew() {\n    super._afterNew();\n    this.setPrivate(\"updateScrollbar\", true);\n    this._disposers.push(this.axisRanges.events.onAll(change => {\n      if (change.type === \"clear\") {\n        $array.each(change.oldValues, dataItem => {\n          this.disposeDataItem(dataItem);\n        });\n      } else if (change.type === \"push\") {\n        this._processAxisRange(change.newValue, [\"range\"]);\n      } else if (change.type === \"setIndex\") {\n        this._processAxisRange(change.newValue, [\"range\"]);\n      } else if (change.type === \"insertIndex\") {\n        this._processAxisRange(change.newValue, [\"range\"]);\n      } else if (change.type === \"removeIndex\") {\n        this.disposeDataItem(change.oldValue);\n      } else if (change.type === \"moveIndex\") {\n        this._processAxisRange(change.value, [\"range\"]);\n      } else {\n        throw new Error(\"Unknown IStreamEvent type\");\n      }\n    }));\n    const renderer = this.get(\"renderer\");\n    if (renderer) {\n      renderer.axis = this;\n      renderer.processAxis();\n    }\n    this.children.push(renderer);\n    this.ghostLabel = renderer.makeLabel(new DataItem(this, undefined, {}), []);\n    this.ghostLabel.adapters.disable(\"text\");\n    this.ghostLabel.setAll({\n      opacity: 0,\n      tooltipText: undefined,\n      tooltipHTML: undefined,\n      interactive: false\n    });\n    this.ghostLabel.events.disable();\n  }\n  _updateFinals(_start, _end) {}\n  /**\r\n   * Zooms the axis to relative locations.\r\n   *\r\n   * Both `start` and `end` are relative: 0 means start of the axis, 1 - end.\r\n   *\r\n   * @param   start     Relative start\r\n   * @param   end       Relative end\r\n   * @param   duration  Duration of the zoom animation in milliseconds\r\n   * @return            Zoom animation\r\n   */\n  zoom(start, end, duration, priority) {\n    this._updateFinals(start, end);\n    if (this.get(\"start\") !== start || this.get(\"end\") != end) {\n      let sAnimation = this._sAnimation;\n      let eAnimation = this._eAnimation;\n      let maxDeviation = this.get(\"maxDeviation\", 0.5) * Math.min(1, end - start);\n      if (start < -maxDeviation) {\n        start = -maxDeviation;\n      }\n      if (end > 1 + maxDeviation) {\n        end = 1 + maxDeviation;\n      }\n      if (start > end) {\n        [start, end] = [end, start];\n      }\n      if (!$type.isNumber(duration)) {\n        duration = this.get(\"interpolationDuration\", 0);\n      }\n      if (!priority) {\n        priority = \"end\";\n      }\n      let maxZoomFactor = this.getPrivate(\"maxZoomFactor\", this.get(\"maxZoomFactor\", 100));\n      let maxZoomFactorReal = maxZoomFactor;\n      if (end === 1 && start !== 0) {\n        if (start < this.get(\"start\")) {\n          priority = \"start\";\n        } else {\n          priority = \"end\";\n        }\n      }\n      if (start === 0 && end !== 1) {\n        if (end > this.get(\"end\")) {\n          priority = \"end\";\n        } else {\n          priority = \"start\";\n        }\n      }\n      let minZoomCount = this.get(\"minZoomCount\");\n      let maxZoomCount = this.get(\"maxZoomCount\");\n      if ($type.isNumber(minZoomCount)) {\n        maxZoomFactor = maxZoomFactorReal / minZoomCount;\n      }\n      let minZoomFactor = 1;\n      if ($type.isNumber(maxZoomCount)) {\n        minZoomFactor = maxZoomFactorReal / maxZoomCount;\n      }\n      // most likely we are dragging left scrollbar grip here, so we tend to modify end\n      if (priority === \"start\") {\n        if (maxZoomCount > 0) {\n          // add to the end\n          if (1 / (end - start) < minZoomFactor) {\n            end = start + 1 / minZoomFactor;\n          }\n        }\n        // add to the end\n        if (1 / (end - start) > maxZoomFactor) {\n          end = start + 1 / maxZoomFactor;\n        }\n        //unless end is > 0\n        if (end > 1 && end - start < 1 / maxZoomFactor) {\n          //end = 1;\n          start = end - 1 / maxZoomFactor;\n        }\n      }\n      // most likely we are dragging right, so we modify left\n      else {\n        if (maxZoomCount > 0) {\n          // add to the end\n          if (1 / (end - start) < minZoomFactor) {\n            start = end - 1 / minZoomFactor;\n          }\n        }\n        // remove from start\n        if (1 / (end - start) > maxZoomFactor) {\n          start = end - 1 / maxZoomFactor;\n        }\n        if (start < 0 && end - start < 1 / maxZoomFactor) {\n          //start = 0;\n          end = start + 1 / maxZoomFactor;\n        }\n      }\n      if (1 / (end - start) > maxZoomFactor) {\n        end = start + 1 / maxZoomFactor;\n      }\n      if (1 / (end - start) > maxZoomFactor) {\n        start = end - 1 / maxZoomFactor;\n      }\n      if (maxZoomCount != null && minZoomCount != null && start == this.get(\"start\") && end == this.get(\"end\")) {\n        const chart = this.chart;\n        if (chart) {\n          chart._handleAxisSelection(this, true);\n        }\n      }\n      if ((sAnimation && sAnimation.playing && sAnimation.to == start || this.get(\"start\") == start) && (eAnimation && eAnimation.playing && eAnimation.to == end || this.get(\"end\") == end)) {\n        return;\n      }\n      if (duration > 0) {\n        let easing = this.get(\"interpolationEasing\");\n        let sAnimation, eAnimation;\n        if (this.get(\"start\") != start) {\n          sAnimation = this.animate({\n            key: \"start\",\n            to: start,\n            duration: duration,\n            easing: easing\n          });\n        }\n        if (this.get(\"end\") != end) {\n          eAnimation = this.animate({\n            key: \"end\",\n            to: end,\n            duration: duration,\n            easing: easing\n          });\n        }\n        this._sAnimation = sAnimation;\n        this._eAnimation = eAnimation;\n        if (sAnimation) {\n          return sAnimation;\n        } else if (eAnimation) {\n          return eAnimation;\n        }\n      } else {\n        this.set(\"start\", start);\n        this.set(\"end\", end);\n        // otherwise bullets and line out of sync, as series is not redrawn\n        this._root.events.once(\"frameended\", () => {\n          this._markDirtyKey(\"start\");\n          this._root._markDirty();\n        });\n      }\n    } else {\n      if (this._sAnimation) {\n        this._sAnimation.stop();\n      }\n      if (this._eAnimation) {\n        this._eAnimation.stop();\n      }\n    }\n  }\n  /**\r\n   * A list of series using this axis.\r\n   *\r\n   * @return Series\r\n   */\n  get series() {\n    return this._series;\n  }\n  _processAxisRange(dataItem, themeTags) {\n    dataItem.setRaw(\"isRange\", true);\n    this._createAssets(dataItem, themeTags);\n    this._rangesDirty = true;\n    this._prepareDataItem(dataItem);\n    const above = dataItem.get(\"above\");\n    const container = this.topGridContainer;\n    const grid = dataItem.get(\"grid\");\n    if (above && grid) {\n      container.children.moveValue(grid);\n    }\n    const fill = dataItem.get(\"axisFill\");\n    if (above && fill) {\n      container.children.moveValue(fill);\n    }\n  }\n  _prepareDataItem(_dataItem, _index) {}\n  /**\r\n   * @ignore\r\n   */\n  markDirtyExtremes() {}\n  /**\r\n   * @ignore\r\n   */\n  markDirtySelectionExtremes() {}\n  _calculateTotals() {}\n  _updateAxisRanges() {\n    this._bullets = {};\n    this.axisRanges.each(axisRange => {\n      this._prepareDataItem(axisRange);\n    });\n    $array.each(this._seriesAxisRanges, axisRange => {\n      this._prepareDataItem(axisRange);\n    });\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    if (this.get(\"fixAxisSize\")) {\n      this.ghostLabel.set(\"visible\", true);\n    } else {\n      this.ghostLabel.set(\"visible\", false);\n    }\n    if (this.isDirty(\"start\") || this.isDirty(\"end\")) {\n      this.chart._updateCursor();\n      let start = this.get(\"start\", 0);\n      let end = this.get(\"end\", 1);\n      let maxDeviation = this.get(\"maxDeviation\", 0.5) * Math.min(1, end - start);\n      if (start < -maxDeviation) {\n        let delta = start + maxDeviation;\n        start = -maxDeviation;\n        this.setRaw(\"start\", start);\n        if (this.isDirty(\"end\")) {\n          this.setRaw(\"end\", end - delta);\n        }\n      }\n      if (end > 1 + maxDeviation) {\n        let delta = end - 1 - maxDeviation;\n        end = 1 + maxDeviation;\n        this.setRaw(\"end\", end);\n        if (this.isDirty(\"start\")) {\n          this.setRaw(\"start\", start - delta);\n        }\n      }\n    }\n    const renderer = this.get(\"renderer\");\n    renderer._start = this.get(\"start\");\n    renderer._end = this.get(\"end\");\n    renderer._inversed = renderer.get(\"inversed\", false);\n    renderer._axisLength = renderer.axisLength() / (renderer._end - renderer._start);\n    renderer._updateLC();\n    if (this.isDirty(\"tooltip\")) {\n      const tooltip = this.get(\"tooltip\");\n      if (tooltip) {\n        const rendererTags = renderer.get(\"themeTags\");\n        tooltip.addTag(\"axis\");\n        tooltip.addTag(this.className.toLowerCase());\n        tooltip._applyThemes();\n        if (rendererTags) {\n          tooltip.set(\"themeTags\", $utils.mergeTags(tooltip.get(\"themeTags\"), rendererTags));\n          tooltip.label._applyThemes();\n        }\n      }\n    }\n  }\n  _updateTooltipBounds() {\n    const tooltip = this.get(\"tooltip\");\n    if (tooltip) {\n      this.get(\"renderer\").updateTooltipBounds(tooltip);\n    }\n  }\n  _updateBounds() {\n    super._updateBounds();\n    this._updateTooltipBounds();\n  }\n  /**\r\n   * @ignore\r\n   */\n  processChart(chart) {\n    this.chart = chart;\n    const renderer = this.get(\"renderer\");\n    renderer.chart = chart;\n    chart.gridContainer.children.push(this.gridContainer);\n    chart.topGridContainer.children.push(this.topGridContainer);\n    chart.axisHeadersContainer.children.push(this.axisHeader);\n    this.on(\"start\", () => {\n      chart._handleAxisSelection(this);\n    });\n    this.on(\"end\", () => {\n      chart._handleAxisSelection(this);\n    });\n    chart.plotContainer.onPrivate(\"width\", () => {\n      this.markDirtySize();\n    });\n    chart.plotContainer.onPrivate(\"height\", () => {\n      this.markDirtySize();\n    });\n    chart.processAxis(this);\n  }\n  /**\r\n   * @ignore\r\n   */\n  hideDataItem(dataItem) {\n    this._toggleDataItem(dataItem, false);\n    return super.hideDataItem(dataItem);\n  }\n  /**\r\n   * @ignore\r\n   */\n  showDataItem(dataItem) {\n    this._toggleDataItem(dataItem, true);\n    return super.showDataItem(dataItem);\n  }\n  _toggleDataItem(dataItem, visible) {\n    const label = dataItem.get(\"label\");\n    if (label) {\n      label.setPrivate(\"visible\", visible);\n    }\n    const grid = dataItem.get(\"grid\");\n    if (grid) {\n      grid.setPrivate(\"visible\", visible);\n    }\n    const tick = dataItem.get(\"tick\");\n    if (tick) {\n      tick.setPrivate(\"visible\", visible);\n    }\n    const axisFill = dataItem.get(\"axisFill\");\n    if (axisFill) {\n      axisFill.setPrivate(\"visible\", visible);\n    }\n    const bullet = dataItem.get(\"bullet\");\n    if (bullet) {\n      const sprite = bullet.get(\"sprite\");\n      if (sprite) {\n        sprite.setPrivate(\"visible\", visible);\n      }\n    }\n  }\n  _createAssets(dataItem, tags) {\n    const renderer = this.get(\"renderer\");\n    if (!dataItem.get(\"label\")) {\n      renderer.makeLabel(dataItem, tags);\n    }\n    if (!dataItem.get(\"grid\")) {\n      renderer.makeGrid(dataItem, tags);\n    }\n    if (!dataItem.get(\"tick\")) {\n      renderer.makeTick(dataItem, tags);\n    }\n    if (!dataItem.get(\"axisFill\")) {\n      renderer.makeAxisFill(dataItem, tags);\n    }\n    this._processBullet(dataItem);\n  }\n  _processBullet(dataItem) {\n    let bullet = dataItem.get(\"bullet\");\n    let axisBullet = this.get(\"bullet\");\n    if (!bullet && axisBullet && !dataItem.get(\"isRange\")) {\n      bullet = axisBullet(this._root, this, dataItem);\n    }\n    if (bullet) {\n      bullet.axis = this;\n      const sprite = bullet.get(\"sprite\");\n      if (sprite) {\n        sprite._setDataItem(dataItem);\n        dataItem.setRaw(\"bullet\", bullet);\n        if (!sprite.parent) {\n          this.bulletsContainer.children.push(sprite);\n        }\n      }\n    }\n  }\n  _afterChanged() {\n    super._afterChanged();\n    const chart = this.chart;\n    if (chart) {\n      chart._updateChartLayout();\n      chart.axisHeadersContainer.markDirtySize();\n    }\n    this.get(\"renderer\")._updatePositions();\n  }\n  /**\r\n   * @ignore\r\n   */\n  disposeDataItem(dataItem) {\n    super.disposeDataItem(dataItem);\n    const renderer = this.get(\"renderer\");\n    const label = dataItem.get(\"label\");\n    if (label) {\n      renderer.labels.removeValue(label);\n      label.dispose();\n    }\n    const tick = dataItem.get(\"tick\");\n    if (tick) {\n      renderer.ticks.removeValue(tick);\n      tick.dispose();\n    }\n    const grid = dataItem.get(\"grid\");\n    if (grid) {\n      renderer.grid.removeValue(grid);\n      grid.dispose();\n    }\n    const axisFill = dataItem.get(\"axisFill\");\n    if (axisFill) {\n      renderer.axisFills.removeValue(axisFill);\n      axisFill.dispose();\n    }\n    const bullet = dataItem.get(\"bullet\");\n    if (bullet) {\n      bullet.dispose();\n    }\n  }\n  _updateGhost() {\n    this.setPrivate(\"cellWidth\", this.getCellWidthPosition() * this.get(\"renderer\").axisLength());\n    const ghostLabel = this.ghostLabel;\n    if (!ghostLabel.isHidden()) {\n      const bounds = ghostLabel.localBounds();\n      const gWidth = bounds.right - bounds.left;\n      let text = ghostLabel.get(\"text\");\n      $array.each(this.dataItems, dataItem => {\n        const label = dataItem.get(\"label\");\n        if (label && !label.isHidden()) {\n          const bounds = label.localBounds();\n          const w = bounds.right - bounds.left;\n          if (w > gWidth) {\n            text = label.text._getText();\n          }\n        }\n      });\n      ghostLabel.set(\"text\", text);\n    }\n    let start = this.get(\"start\", 0);\n    let end = this.get(\"end\", 1);\n    this.get(\"renderer\").updateLabel(ghostLabel, start + (end - start) * 0.5);\n  }\n  _handleCursorPosition(position, snapToSeries) {\n    const renderer = this.get(\"renderer\");\n    position = renderer.toAxisPosition(position);\n    this._cursorPosition = position;\n    this._snapToSeries = snapToSeries;\n    this.updateTooltip();\n  }\n  /**\r\n   * Can be called when axis zoom changes and you need to update tooltip\r\n   * position.\r\n   */\n  updateTooltip() {\n    const snapToSeries = this._snapToSeries;\n    let position = this._cursorPosition;\n    const tooltip = this.get(\"tooltip\");\n    const renderer = this.get(\"renderer\");\n    if ($type.isNumber(position)) {\n      $array.each(this.series, series => {\n        if (series.get(\"baseAxis\") === this) {\n          const dataItem = this.getSeriesItem(series, position, this.get(\"tooltipLocation\"));\n          series.setRaw(\"tooltipDataItem\", dataItem);\n          if (snapToSeries && snapToSeries.indexOf(series) != -1) {\n            series.updateLegendMarker(dataItem);\n            series.updateLegendValue(dataItem);\n          } else {\n            series.showDataItemTooltip(dataItem);\n          }\n        }\n      });\n      if (tooltip) {\n        renderer.updateTooltipBounds(tooltip);\n        if (this.get(\"snapTooltip\")) {\n          position = this.roundAxisPosition(position, this.get(\"tooltipLocation\", 0.5));\n        }\n        if (!$type.isNaN(position)) {\n          this.setPrivateRaw(\"tooltipPosition\", position);\n          this._updateTooltipText(tooltip, position);\n          renderer.positionTooltip(tooltip, position);\n          if (position < this.get(\"start\") || position > this.get(\"end\")) {\n            tooltip.hide(0);\n          } else {\n            tooltip.show(0);\n          }\n        } else {\n          tooltip.hide(0);\n        }\n      }\n    }\n  }\n  _updateTooltipText(tooltip, position) {\n    tooltip.label.set(\"text\", this.getTooltipText(position));\n  }\n  /**\r\n   * @ignore\r\n   */\n  roundAxisPosition(position, _location) {\n    return position;\n  }\n  /**\r\n   * @ignore\r\n   */\n  handleCursorShow() {\n    let tooltip = this.get(\"tooltip\");\n    if (tooltip) {\n      tooltip.show();\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  handleCursorHide() {\n    let tooltip = this.get(\"tooltip\");\n    if (tooltip) {\n      tooltip.hide();\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  processSeriesDataItem(_dataItem, _fields) {}\n  _clearDirty() {\n    super._clearDirty();\n    this._sizeDirty = false;\n    this._rangesDirty = false;\n  }\n  /**\r\n   * Converts pixel coordinate to a relative position on axis.\r\n   *\r\n   * @param   coordinate  Coordinate\r\n   * @return              Relative position\r\n   */\n  coordinateToPosition(coordinate) {\n    const renderer = this.get(\"renderer\");\n    return renderer.toAxisPosition(coordinate / renderer.axisLength());\n  }\n  /**\r\n   * Converts relative position of the plot area to relative position of the\r\n   * axis with zoom taken into account.\r\n   *\r\n   * @param position Position\r\n   * @return Relative position\r\n   */\n  toAxisPosition(position) {\n    return this.get(\"renderer\").toAxisPosition(position);\n  }\n  /**\r\n   * Adjusts position with inversed taken into account.\r\n   *\r\n   * @ignore\r\n   */\n  fixPosition(position) {\n    return this.get(\"renderer\").fixPosition(position);\n  }\n  /**\r\n   * @ignore\r\n   */\n  shouldGap(_dataItem, _nextItem, _autoGapCount, _fieldName) {\n    return false;\n  }\n  /**\r\n   * Creates and returns an axis range object.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\r\n   * @param   axisDataItem  Axis data item\r\n   * @return                Axis range\r\n   */\n  createAxisRange(axisDataItem) {\n    return this.axisRanges.push(axisDataItem);\n  }\n  /**\r\n   * @ignore\r\n   */\n  _groupSeriesData(_series) {}\n  /**\r\n   * Returns relative position between two grid lines of the axis.\r\n   *\r\n   * @return Position\r\n   */\n  getCellWidthPosition() {\n    return 0.05;\n  }\n}\nObject.defineProperty(Axis, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Axis\"\n});\nObject.defineProperty(Axis, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Component.classNames.concat([Axis.className])\n});","map":{"version":3,"names":["DataItem","Component","Container","p100","List","Rectangle","$array","$type","$utils","Axis","constructor","Object","defineProperty","children","push","new","_root","width","height","isMeasured","position","themeTags","background","fill","interfaceColors","get","_dispose","gridContainer","dispose","topGridContainer","bulletsContainer","labelsContainer","axisHeader","_afterNew","setPrivate","_disposers","axisRanges","events","onAll","change","type","each","oldValues","dataItem","disposeDataItem","_processAxisRange","newValue","oldValue","value","Error","renderer","axis","processAxis","ghostLabel","makeLabel","undefined","adapters","disable","setAll","opacity","tooltipText","tooltipHTML","interactive","_updateFinals","_start","_end","zoom","start","end","duration","priority","sAnimation","_sAnimation","eAnimation","_eAnimation","maxDeviation","Math","min","isNumber","maxZoomFactor","getPrivate","maxZoomFactorReal","minZoomCount","maxZoomCount","minZoomFactor","chart","_handleAxisSelection","playing","to","easing","animate","key","set","once","_markDirtyKey","_markDirty","stop","series","_series","setRaw","_createAssets","_rangesDirty","_prepareDataItem","above","container","grid","moveValue","_dataItem","_index","markDirtyExtremes","markDirtySelectionExtremes","_calculateTotals","_updateAxisRanges","_bullets","axisRange","_seriesAxisRanges","_prepareChildren","isDirty","_updateCursor","delta","_inversed","_axisLength","axisLength","_updateLC","tooltip","rendererTags","addTag","className","toLowerCase","_applyThemes","mergeTags","label","_updateTooltipBounds","updateTooltipBounds","_updateBounds","processChart","axisHeadersContainer","on","plotContainer","onPrivate","markDirtySize","hideDataItem","_toggleDataItem","showDataItem","visible","tick","axisFill","bullet","sprite","tags","makeGrid","makeTick","makeAxisFill","_processBullet","axisBullet","_setDataItem","parent","_afterChanged","_updateChartLayout","_updatePositions","labels","removeValue","ticks","axisFills","_updateGhost","getCellWidthPosition","isHidden","bounds","localBounds","gWidth","right","left","text","dataItems","w","_getText","updateLabel","_handleCursorPosition","snapToSeries","toAxisPosition","_cursorPosition","_snapToSeries","updateTooltip","getSeriesItem","indexOf","updateLegendMarker","updateLegendValue","showDataItemTooltip","roundAxisPosition","isNaN","setPrivateRaw","_updateTooltipText","positionTooltip","hide","show","getTooltipText","_location","handleCursorShow","handleCursorHide","processSeriesDataItem","_fields","_clearDirty","_sizeDirty","coordinateToPosition","coordinate","fixPosition","shouldGap","_nextItem","_autoGapCount","_fieldName","createAxisRange","axisDataItem","_groupSeriesData","classNames","concat"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\charts\\xy\\axes\\Axis.ts"],"sourcesContent":["import type { AxisRenderer } from \"./AxisRenderer\";\nimport type { AxisLabel } from \"./AxisLabel\";\nimport type { AxisTick } from \"./AxisTick\";\nimport type { Graphics } from \"../../../core/render/Graphics\";\nimport type { Grid } from \"./Grid\";\nimport type { AxisBullet } from \"./AxisBullet\";\nimport type { XYChart } from \"../XYChart\";\nimport type { XYSeries, IXYSeriesDataItem } from \"../series/XYSeries\";\nimport type { Animation } from \"../../../core/util/Entity\";\nimport type { Tooltip } from \"../../../core/render/Tooltip\";\nimport type { Root } from \"../../../core/Root\";\n\nimport { DataItem } from \"../../../core/render/Component\";\nimport { Component, IComponentSettings, IComponentPrivate, IComponentEvents, IComponentDataItem } from \"../../../core/render/Component\";\nimport { Container } from \"../../../core/render/Container\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport { List } from \"../../../core/util/List\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\n\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\n\n\n\nexport interface IAxisSettings<R extends AxisRenderer> extends IComponentSettings {\n\t/**\n\t * A renderer object which is responsible of rendering visible axis elements.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\n\t */\n\trenderer: R;\n\n\t/**\n\t * The initial relative zoom start position of the axis.\n\t *\n\t * E.g. stting it to `0.1` will pre-zoom axis to 10% from the start.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Pre_zooming_axes} for more info\n\t */\n\tstart?: number;\n\n\t/**\n\t * The initial relative zoom end position of the axis.\n\t *\n\t * E.g. stting it to `0.9` will pre-zoom axis to 10% from the end.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Pre_zooming_axes} for more info\n\t */\n\tend?: number;\n\n\t/**\n\t * Maximum number of times the scope of the axis could auto-zoom-in.\n\t *\n\t * This is to prevent axis jumping too drastically when scrolling/zooming.\n\t *\n\t * @default 1000\n\t */\n\tmaxZoomFactor?: number | null;\n\n\t/**\n\t * Maximum number of axis elements to show at a time.\n\t *\n\t * E.g. for a [[CategoryAxis]] that would be number of categories.\n\t * For a [[DateAxis]] it would be number of `baseInterval`.\n\t *\n\t * The axis will not allow to be zoomed out beyond this number.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Limiting_zoom_scope} for more info\n\t */\n\tmaxZoomCount?: number;\n\n\t/**\n\t * Minimum number of axis elements to show at a time.\n\t *\n\t * E.g. for a [[CategoryAxis]] that would be number of categories.\n\t * For a [[DateAxis]] it would be number of `baseInterval`.\n\t *\n\t * The axis will not allow to be zoomed in beyond this number.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Limiting_zoom_scope} for more info\n\t */\n\tminZoomCount?: number;\n\n\t/**\n\t * Base value of the axis.\n\t */\n\tbaseValue?: number;\n\n\t/**\n\t * If set to `false` the axis will be exempt when chart is panned\n\t * horizontally, and will keep its current position.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Excluding_axes_from_pan_or_zoom} for more info\n\t */\n\tpanX?: boolean;\n\n\t/**\n\t * If set to `false` the axis will be exempt when chart is panned\n\t * vertically, and will keep its current position.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Excluding_axes_from_pan_or_zoom} for more info\n\t */\n\tpanY?: boolean;\n\n\t/**\n\t * If set to `false` the axis will be exempt when chart is zoomed\n\t * horizontally, and will keep its current zoom/position.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Excluding_axes_from_pan_or_zoom} for more info\n\t */\n\tzoomX?: boolean;\n\n\t/**\n\t * If set to `false` the axis will be exempt when chart is zoomed\n\t * vertically, and will keep its current zoom/position.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Excluding_axes_from_pan_or_zoom} for more info\n\t */\n\tzoomY?: boolean;\n\n\t/**\n\t * A relative distance the axis is allowed to be zoomed/panned beyond its\n\t * actual scope.\n\t *\n\t * @default 0.1\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Over_zooming} for more info\n\t */\n\tmaxDeviation?: number;\n\n\t/**\n\t * [[Tooltip]] element to use for axis.\n\t */\n\ttooltip?: Tooltip;\n\n\t/**\n\t * `tooltipLocation` indicates\n\t * which relative place to snap to: `0` beginning, `0.5` - middle, `1` - end.\n\t *\n\t * @default 0.5\n\t */\n\ttooltipLocation?: number;\n\n\t/**\n\t * Should tooltip snap to the `tooltipLocation` (`true`) or follow cursor.\n\t *\n\t * @default true\n\t */\n\tsnapTooltip?: boolean;\n\n\t/**\n\t * If set to `true` (default) the axis width will stay constant across all\n\t * zooms, even if actual length of all visible labels changes.\n\t *\n\t * @default true\n\t */\n\tfixAxisSize?: boolean;\n\n\t/**\n\t * A function that will be used to create bullets on each cell.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_bullets} for more info\n\t */\n\tbullet?: (root: Root, axis: Axis<AxisRenderer>, dataItem: DataItem<IAxisDataItem>) => AxisBullet;\n}\n\nexport interface IAxisEvents extends IComponentEvents {\n}\n\nexport interface IAxisPrivate extends IComponentPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tname?: \"value\" | \"date\" | \"category\";\n\n\t/**\n\t * @ignore\n\t */\n\tupdateScrollbar?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tmaxZoomFactor?: number | null;\n\n\t/**\n\t * Saves position to which tooltip points.\n\t */\n\ttooltipPosition?: number;\n\n\t/**\n\t * Width in pixels between grid lines (read-only).\n\t * \n\t * It might not be exact, as [[DateAxis]] can have grids at irregular\n\t * intervals.\n\t * \n\t * Could be used to detect when size changes and to adjust labels for them\n\t * not to overlap.\n\t */\n\tcellWidth?: number;\n\n}\n\nexport interface IAxisDataItem extends IComponentDataItem {\n\n\t/**\n\t * Axis label element.\n\t */\n\tlabel?: AxisLabel;\n\n\t/**\n\t * Tick element.\n\t */\n\ttick?: AxisTick;\n\n\t/**\n\t * Grid line element.\n\t */\n\tgrid?: Grid;\n\n\t/**\n\t * Axis fill element.\n\t */\n\taxisFill?: Graphics;\n\n\t/**\n\t * Bullet element.\n\t */\n\tbullet?: AxisBullet;\n\n\t/**\n\t * Indicates if this data item represents an axis range.\n\t */\n\tisRange?: boolean;\n\n\t/**\n\t * If set to `true`, the grid and axis fill of this data item will be drawn\n\t * above series.\n\t *\n\t * NOTE: this needs to be set **before** crating an axis range. Updating this\n\t * dynamically won't have any effect.\n\t *\n\t * NOTE: if you need all grid to be drawn above series, you can brig it to\n\t * front with `chart.gridContainer.toFront();`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/#Grid_fill_above_series} for more info\n\t * @default false\n\t */\n\tabove?: boolean\n\n}\n\n/**\n * A base class for all axes.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Adding_axes} for more info\n */\nexport abstract class Axis<R extends AxisRenderer> extends Component {\n\tpublic static className: string = \"Axis\";\n\tpublic static classNames: Array<string> = Component.classNames.concat([Axis.className]);\n\n\tdeclare public _settings: IAxisSettings<R>;\n\tdeclare public _privateSettings: IAxisPrivate;\n\tdeclare public _dataItemSettings: IAxisDataItem;\n\tdeclare public _events: IAxisEvents;\n\n\tdeclare public _seriesType: XYSeries;\n\n\tprotected _series: Array<this[\"_seriesType\"]> = [];\n\n\tpublic _isPanning: boolean = false;\n\n\t/**\n\t * A [[Container]] that holds all the axis label elements.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly labelsContainer: Container = this.children.push(Container.new(this._root, {}));\n\n\t/**\n\t * A [[Container]] that holds all the axis grid and fill elements.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly gridContainer: Container = Container.new(this._root, { width: p100, height: p100 });\n\n\t/**\n\t * A [[Container]] that holds axis grid elements which goes above the series.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly topGridContainer: Container = Container.new(this._root, { width: p100, height: p100 });\n\n\t/**\n\t * A [[Container]] that holds all the axis bullet elements.\n\t *\n\t * @default new Container\n\t */\n\tpublic readonly bulletsContainer: Container = this.children.push(Container.new(this._root, { isMeasured: false, width: p100, height: p100, position: \"absolute\" }));\n\n\t/**\n\t * A referenece to the the chart the axis belongs to.\n\t */\n\tpublic chart: XYChart | undefined;\n\n\tprotected _rangesDirty: Boolean = false;\n\n\tpublic _panStart: number = 0;\n\tpublic _panEnd: number = 1;\n\n\tprotected _sAnimation?: Animation<this[\"_settings\"][\"start\"]>;\n\tprotected _eAnimation?: Animation<this[\"_settings\"][\"end\"]>;\n\n\tpublic _skipSync: boolean = false;\n\n\t/**\n\t * A list of axis ranges.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\n\t * @default new List()\n\t */\n\tpublic readonly axisRanges: List<DataItem<this[\"_dataItemSettings\"]>> = new List();\n\n\tpublic _seriesAxisRanges: Array<DataItem<this[\"_dataItemSettings\"]>> = [];\n\n\t/**\n\t * A control label that is invisible but is used to keep width the width of\n\t * the axis constant.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Ghost_label} for more info\n\t */\n\tpublic ghostLabel!: AxisLabel;\n\n\tprotected _cursorPosition: number = -1;\n\n\tprotected _snapToSeries?: Array<XYSeries>;\n\n\tpublic _seriesValuesDirty = false;\n\n\t/**\n\t * A container above the axis that can be used to add additional stuff into\n\t * it. For example a legend, label, or an icon.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info\n\t * @default new Container\n\t */\n\tpublic axisHeader: Container = this.children.push(Container.new(this._root, {\n\t\tthemeTags: [\"axis\", \"header\"],\n\t\tposition: \"absolute\",\n\t\tbackground: Rectangle.new(this._root, {\n\t\t\tthemeTags: [\"header\", \"background\"],\n\t\t\tfill: this._root.interfaceColors.get(\"background\")\n\t\t})\n\t}));\n\n\tpublic _bullets: { [index: string]: AxisBullet } = {};\n\n\tprotected _dispose() {\n\t\t// these could be in other parents, so disposing just in case\n\t\tthis.gridContainer.dispose();\n\t\tthis.topGridContainer.dispose();\n\t\tthis.bulletsContainer.dispose();\n\t\tthis.labelsContainer.dispose();\n\t\tthis.axisHeader.dispose();\n\t\tsuper._dispose();\n\t}\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis.setPrivate(\"updateScrollbar\", true);\n\n\t\tthis._disposers.push(this.axisRanges.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\t$array.each(change.oldValues, (dataItem) => {\n\t\t\t\t\tthis.disposeDataItem(dataItem);\n\t\t\t\t});\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tthis._processAxisRange(change.newValue, [\"range\"]);\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tthis._processAxisRange(change.newValue, [\"range\"]);\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tthis._processAxisRange(change.newValue, [\"range\"]);\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis.disposeDataItem(change.oldValue);\n\t\t\t} else if (change.type === \"moveIndex\") {\n\t\t\t\tthis._processAxisRange(change.value, [\"range\"]);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IStreamEvent type\");\n\t\t\t}\n\t\t}))\n\n\t\tconst renderer = this.get(\"renderer\");\n\t\tif (renderer) {\n\t\t\trenderer.axis = this;\n\t\t\trenderer.processAxis();\n\t\t}\n\t\tthis.children.push(renderer);\n\t\tthis.ghostLabel = renderer.makeLabel(new DataItem(this, undefined, {}), []);\n\t\tthis.ghostLabel.adapters.disable(\"text\");\n\t\tthis.ghostLabel.setAll({ opacity: 0, tooltipText: undefined, tooltipHTML: undefined, interactive: false });\n\t\tthis.ghostLabel.events.disable();\n\t}\n\n\tprotected _updateFinals(_start: number, _end: number) {\n\n\t}\n\n\t/**\n\t * Zooms the axis to relative locations.\n\t *\n\t * Both `start` and `end` are relative: 0 means start of the axis, 1 - end.\n\t *\n\t * @param   start     Relative start\n\t * @param   end       Relative end\n\t * @param   duration  Duration of the zoom animation in milliseconds\n\t * @return            Zoom animation\n\t */\n\tpublic zoom(start: number, end: number, duration?: number, priority?: \"start\" | \"end\"): Animation<this[\"_settings\"][\"start\"]> | Animation<this[\"_settings\"][\"end\"]> | undefined {\n\t\tthis._updateFinals(start, end);\n\n\t\tif (this.get(\"start\") !== start || this.get(\"end\") != end) {\n\t\t\tlet sAnimation = this._sAnimation;\n\t\t\tlet eAnimation = this._eAnimation;\n\n\t\t\tlet maxDeviation = this.get(\"maxDeviation\", 0.5) * Math.min(1, (end - start));\n\n\t\t\tif (start < - maxDeviation) {\n\t\t\t\tstart = -maxDeviation;\n\t\t\t}\n\n\t\t\tif (end > 1 + maxDeviation) {\n\t\t\t\tend = 1 + maxDeviation;\n\t\t\t}\n\n\t\t\tif (start > end) {\n\t\t\t\t[start, end] = [end, start];\n\t\t\t}\n\n\t\t\tif (!$type.isNumber(duration)) {\n\t\t\t\tduration = this.get(\"interpolationDuration\", 0);\n\t\t\t}\n\n\t\t\tif (!priority) {\n\t\t\t\tpriority = \"end\";\n\t\t\t}\n\n\t\t\tlet maxZoomFactor = this.getPrivate(\"maxZoomFactor\", this.get(\"maxZoomFactor\", 100));\n\t\t\tlet maxZoomFactorReal = maxZoomFactor;\n\n\t\t\tif (end === 1 && start !== 0) {\n\t\t\t\tif (start < this.get(\"start\")) {\n\t\t\t\t\tpriority = \"start\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpriority = \"end\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (start === 0 && end !== 1) {\n\t\t\t\tif (end > this.get(\"end\")) {\n\t\t\t\t\tpriority = \"end\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpriority = \"start\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet minZoomCount = this.get(\"minZoomCount\");\n\t\t\tlet maxZoomCount = this.get(\"maxZoomCount\");\n\n\t\t\tif ($type.isNumber(minZoomCount)) {\n\t\t\t\tmaxZoomFactor = maxZoomFactorReal / minZoomCount;\n\t\t\t}\n\n\t\t\tlet minZoomFactor: number = 1;\n\n\t\t\tif ($type.isNumber(maxZoomCount)) {\n\t\t\t\tminZoomFactor = maxZoomFactorReal / maxZoomCount;\n\t\t\t}\n\n\t\t\t// most likely we are dragging left scrollbar grip here, so we tend to modify end\n\t\t\tif (priority === \"start\") {\n\t\t\t\tif (maxZoomCount > 0) {\n\t\t\t\t\t// add to the end\n\t\t\t\t\tif (1 / (end - start) < minZoomFactor) {\n\t\t\t\t\t\tend = start + 1 / minZoomFactor;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// add to the end\n\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\n\t\t\t\t\tend = start + 1 / maxZoomFactor;\n\t\t\t\t}\n\t\t\t\t//unless end is > 0\n\t\t\t\tif (end > 1 && end - start < 1 / maxZoomFactor) {\n\t\t\t\t\t//end = 1;\n\t\t\t\t\tstart = end - 1 / maxZoomFactor;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// most likely we are dragging right, so we modify left\n\t\t\telse {\n\t\t\t\tif (maxZoomCount > 0) {\n\t\t\t\t\t// add to the end\n\t\t\t\t\tif (1 / (end - start) < minZoomFactor) {\n\t\t\t\t\t\tstart = end - 1 / minZoomFactor;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// remove from start\n\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\n\t\t\t\t\tstart = end - 1 / maxZoomFactor;\n\t\t\t\t}\n\t\t\t\tif (start < 0 && end - start < 1 / maxZoomFactor) {\n\t\t\t\t\t//start = 0;\n\t\t\t\t\tend = start + 1 / maxZoomFactor;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (1 / (end - start) > maxZoomFactor) {\n\t\t\t\tend = start + 1 / maxZoomFactor;\n\t\t\t}\n\n\t\t\tif (1 / (end - start) > maxZoomFactor) {\n\t\t\t\tstart = end - 1 / maxZoomFactor;\n\t\t\t}\n\n\t\t\tif (maxZoomCount != null && minZoomCount != null && (start == this.get(\"start\") && end == this.get(\"end\"))) {\n\t\t\t\tconst chart = this.chart;\n\t\t\t\tif (chart) {\n\t\t\t\t\tchart._handleAxisSelection(this, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (((sAnimation && sAnimation.playing && sAnimation.to == start) || this.get(\"start\") == start) && ((eAnimation && eAnimation.playing && eAnimation.to == end) || this.get(\"end\") == end)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\tif (duration > 0) {\n\t\t\t\tlet easing = this.get(\"interpolationEasing\");\n\t\t\t\tlet sAnimation, eAnimation;\n\t\t\t\tif (this.get(\"start\") != start) {\n\t\t\t\t\tsAnimation = this.animate({ key: \"start\", to: start, duration: duration, easing: easing });\n\t\t\t\t}\n\t\t\t\tif (this.get(\"end\") != end) {\n\t\t\t\t\teAnimation = this.animate({ key: \"end\", to: end, duration: duration, easing: easing });\n\t\t\t\t}\n\n\t\t\t\tthis._sAnimation = sAnimation;\n\t\t\t\tthis._eAnimation = eAnimation;\n\n\t\t\t\tif (sAnimation) {\n\t\t\t\t\treturn sAnimation;\n\t\t\t\t}\n\t\t\t\telse if (eAnimation) {\n\t\t\t\t\treturn eAnimation;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.set(\"start\", start);\n\t\t\t\tthis.set(\"end\", end);\n\t\t\t\t// otherwise bullets and line out of sync, as series is not redrawn\n\t\t\t\tthis._root.events.once(\"frameended\", () => {\n\t\t\t\t\tthis._markDirtyKey(\"start\");\n\t\t\t\t\tthis._root._markDirty();\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (this._sAnimation) {\n\t\t\t\tthis._sAnimation.stop();\n\t\t\t}\n\t\t\tif (this._eAnimation) {\n\t\t\t\tthis._eAnimation.stop();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A list of series using this axis.\n\t *\n\t * @return Series\n\t */\n\tpublic get series(): Array<this[\"_seriesType\"]> {\n\t\treturn this._series;\n\t}\n\n\n\tpublic _processAxisRange(dataItem: DataItem<this[\"_dataItemSettings\"]>, themeTags: Array<string>) {\n\t\tdataItem.setRaw(\"isRange\", true);\n\t\tthis._createAssets(dataItem, themeTags);\n\t\tthis._rangesDirty = true;\n\t\tthis._prepareDataItem(dataItem);\n\n\t\tconst above = dataItem.get(\"above\");\n\t\tconst container = this.topGridContainer;\n\n\t\tconst grid = dataItem.get(\"grid\");\n\t\tif (above && grid) {\n\t\t\tcontainer.children.moveValue(grid);\n\t\t}\n\n\t\tconst fill = dataItem.get(\"axisFill\");\n\t\tif (above && fill) {\n\t\t\tcontainer.children.moveValue(fill);\n\t\t}\n\t}\n\n\tpublic _prepareDataItem(_dataItem: DataItem<this[\"_dataItemSettings\"]>, _index?: number) { }\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getX(_value: any, _location: number, baseValue?: any): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getY(_value: any, _location: number, baseValue?: any): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getDataItemCoordinateX(_dataItem: DataItem<IXYSeriesDataItem>, _field: string, _cellLocation?: number, _axisLocation?: number): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getDataItemCoordinateY(_dataItem: DataItem<IXYSeriesDataItem>, _field: string, _cellLocation?: number, _axisLocation?: number): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getDataItemPositionX(_dataItem: DataItem<IXYSeriesDataItem>, _field: string, _cellLocation?: number, _axisLocation?: number): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getDataItemPositionY(_dataItem: DataItem<IXYSeriesDataItem>, _field: string, _cellLocation?: number, _axisLocation?: number): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyExtremes() {\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtySelectionExtremes() {\n\t}\n\n\tpublic _calculateTotals() {\n\t}\n\n\tprotected _updateAxisRanges() {\n\t\tthis._bullets = {};\n\t\tthis.axisRanges.each((axisRange) => {\n\t\t\tthis._prepareDataItem(axisRange);\n\t\t})\n\n\t\t$array.each(this._seriesAxisRanges, (axisRange) => {\n\t\t\tthis._prepareDataItem(axisRange);\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract baseValue(): any;\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.get(\"fixAxisSize\")) {\n\t\t\tthis.ghostLabel.set(\"visible\", true);\n\t\t}\n\t\telse {\n\t\t\tthis.ghostLabel.set(\"visible\", false);\n\t\t}\n\n\t\tif (this.isDirty(\"start\") || this.isDirty(\"end\")) {\n\t\t\tthis.chart!._updateCursor();\n\n\t\t\tlet start = this.get(\"start\", 0);\n\t\t\tlet end = this.get(\"end\", 1);\n\n\t\t\tlet maxDeviation = this.get(\"maxDeviation\", 0.5) * Math.min(1, (end - start));\n\n\t\t\tif (start < -maxDeviation) {\n\t\t\t\tlet delta = start + maxDeviation;\n\t\t\t\tstart = -maxDeviation;\n\t\t\t\tthis.setRaw(\"start\", start);\n\t\t\t\tif (this.isDirty(\"end\")) {\n\t\t\t\t\tthis.setRaw(\"end\", end - delta);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (end > 1 + maxDeviation) {\n\t\t\t\tlet delta = end - 1 - maxDeviation;\n\t\t\t\tend = 1 + maxDeviation;\n\t\t\t\tthis.setRaw(\"end\", end);\n\n\t\t\t\tif (this.isDirty(\"start\")) {\n\t\t\t\t\tthis.setRaw(\"start\", start - delta);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tconst renderer = this.get(\"renderer\");\n\t\trenderer._start = this.get(\"start\")!;\n\t\trenderer._end = this.get(\"end\")!;\n\t\trenderer._inversed = renderer.get(\"inversed\", false);\n\t\trenderer._axisLength = renderer.axisLength() / (renderer._end - renderer._start);\n\t\trenderer._updateLC();\n\n\t\tif (this.isDirty(\"tooltip\")) {\n\t\t\tconst tooltip = this.get(\"tooltip\");\n\t\t\tif (tooltip) {\n\t\t\t\tconst rendererTags = renderer.get(\"themeTags\");\n\t\t\t\ttooltip.addTag(\"axis\");\n\t\t\t\ttooltip.addTag(this.className.toLowerCase());\n\t\t\t\ttooltip._applyThemes();\n\n\t\t\t\tif (rendererTags) {\n\t\t\t\t\ttooltip.set(\"themeTags\", $utils.mergeTags(tooltip.get(\"themeTags\"), rendererTags));\n\t\t\t\t\ttooltip.label._applyThemes();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _updateTooltipBounds() {\n\t\tconst tooltip = this.get(\"tooltip\")!;\n\t\tif (tooltip) {\n\t\t\tthis.get(\"renderer\").updateTooltipBounds(tooltip);\n\t\t}\n\t}\n\n\tpublic _updateBounds() {\n\t\tsuper._updateBounds();\n\t\tthis._updateTooltipBounds();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processChart(chart: XYChart) {\n\t\tthis.chart = chart;\n\t\tconst renderer = this.get(\"renderer\");\n\n\t\trenderer.chart = chart;\n\t\tchart.gridContainer.children.push(this.gridContainer);\n\t\tchart.topGridContainer.children.push(this.topGridContainer);\n\n\t\tchart.axisHeadersContainer.children.push(this.axisHeader);\n\n\t\tthis.on(\"start\", () => {\n\t\t\tchart._handleAxisSelection(this);\n\t\t});\n\t\tthis.on(\"end\", () => {\n\t\t\tchart._handleAxisSelection(this);\n\t\t});\n\n\t\tchart.plotContainer.onPrivate(\"width\", () => {\n\t\t\tthis.markDirtySize();\n\t\t});\n\t\tchart.plotContainer.onPrivate(\"height\", () => {\n\t\t\tthis.markDirtySize();\n\t\t});\n\n\t\tchart.processAxis(this);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic hideDataItem(dataItem: DataItem<IAxisDataItem>): Promise<void> {\n\t\tthis._toggleDataItem(dataItem, false);\n\t\treturn super.hideDataItem(dataItem);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic showDataItem(dataItem: DataItem<IAxisDataItem>): Promise<void> {\n\t\tthis._toggleDataItem(dataItem, true);\n\t\treturn super.showDataItem(dataItem);\n\t}\n\n\n\tpublic _toggleDataItem(dataItem: DataItem<IAxisDataItem>, visible: boolean) {\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tlabel.setPrivate(\"visible\", visible);\n\t\t}\n\t\tconst grid = dataItem.get(\"grid\");\n\t\tif (grid) {\n\t\t\tgrid.setPrivate(\"visible\", visible);\n\t\t}\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\ttick.setPrivate(\"visible\", visible);\n\t\t}\n\t\tconst axisFill = dataItem.get(\"axisFill\");\n\t\tif (axisFill) {\n\t\t\taxisFill.setPrivate(\"visible\", visible);\n\t\t}\n\n\t\tconst bullet = dataItem.get(\"bullet\");\n\t\tif (bullet) {\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\tif (sprite) {\n\t\t\t\tsprite.setPrivate(\"visible\", visible);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract basePosition(): number;\n\n\tpublic _createAssets(dataItem: DataItem<this[\"_dataItemSettings\"]>, tags: Array<string>) {\n\t\tconst renderer = this.get(\"renderer\");\n\n\t\tif (!dataItem.get(\"label\")) {\n\t\t\trenderer.makeLabel(dataItem, tags);\n\t\t}\n\n\t\tif (!dataItem.get(\"grid\")) {\n\t\t\trenderer.makeGrid(dataItem, tags);\n\t\t}\n\n\t\tif (!dataItem.get(\"tick\")) {\n\t\t\trenderer.makeTick(dataItem, tags);\n\t\t}\n\n\t\tif (!dataItem.get(\"axisFill\")) {\n\t\t\trenderer.makeAxisFill(dataItem, tags);\n\t\t}\n\n\t\tthis._processBullet(dataItem);\n\t}\n\n\tprotected _processBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tlet bullet = dataItem.get(\"bullet\");\n\t\tlet axisBullet = this.get(\"bullet\");\n\n\t\tif (!bullet && axisBullet && !dataItem.get(\"isRange\")) {\n\t\t\tbullet = axisBullet(this._root, this, dataItem);\n\t\t}\n\n\t\tif (bullet) {\n\t\t\tbullet.axis = this;\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\t\t\tif (sprite) {\n\t\t\t\tsprite._setDataItem(dataItem);\n\t\t\t\tdataItem.setRaw(\"bullet\", bullet);\n\t\t\t\tif (!sprite.parent) {\n\t\t\t\t\tthis.bulletsContainer.children.push(sprite);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart._updateChartLayout();\n\t\t\tchart.axisHeadersContainer.markDirtySize();\n\t\t}\n\n\t\tthis.get(\"renderer\")._updatePositions();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tconst renderer = this.get(\"renderer\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\trenderer.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\trenderer.ticks.removeValue(tick);\n\t\t\ttick.dispose();\n\t\t}\n\t\tconst grid = dataItem.get(\"grid\");\n\t\tif (grid) {\n\t\t\trenderer.grid.removeValue(grid);\n\t\t\tgrid.dispose();\n\t\t}\n\t\tconst axisFill = dataItem.get(\"axisFill\");\n\t\tif (axisFill) {\n\t\t\trenderer.axisFills.removeValue(axisFill);\n\t\t\taxisFill.dispose();\n\t\t}\n\t\tconst bullet = dataItem.get(\"bullet\");\n\n\t\tif (bullet) {\n\t\t\tbullet.dispose();\n\t\t}\n\t}\n\n\tprotected _updateGhost() {\n\t\tthis.setPrivate(\"cellWidth\", this.getCellWidthPosition() * this.get(\"renderer\").axisLength());\n\t\tconst ghostLabel = this.ghostLabel;\n\t\tif (!ghostLabel.isHidden()) {\n\t\t\tconst bounds = ghostLabel.localBounds();\n\t\t\tconst gWidth = bounds.right - bounds.left;\n\t\t\tlet text = ghostLabel.get(\"text\");\n\t\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tif (label && !label.isHidden()) {\n\t\t\t\t\tconst bounds = label.localBounds();\n\t\t\t\t\tconst w = bounds.right - bounds.left;\n\n\t\t\t\t\tif (w > gWidth) {\n\t\t\t\t\t\ttext = label.text._getText();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tghostLabel.set(\"text\", text);\n\t\t}\n\t\tlet start = this.get(\"start\", 0);\n\t\tlet end = this.get(\"end\", 1);\n\t\tthis.get(\"renderer\").updateLabel(ghostLabel, start + (end - start) * 0.5);\n\t}\n\n\tpublic _handleCursorPosition(position: number, snapToSeries?: Array<XYSeries>) {\n\t\tconst renderer = this.get(\"renderer\");\n\t\tposition = renderer.toAxisPosition(position);\n\n\t\tthis._cursorPosition = position;\n\t\tthis._snapToSeries = snapToSeries;\n\n\t\tthis.updateTooltip();\n\t}\n\n\t/**\n\t * Can be called when axis zoom changes and you need to update tooltip\n\t * position.\n\t */\n\tpublic updateTooltip() {\n\t\tconst snapToSeries = this._snapToSeries;\n\t\tlet position = this._cursorPosition;\n\t\tconst tooltip = this.get(\"tooltip\")!;\n\t\tconst renderer = this.get(\"renderer\");\n\n\t\tif ($type.isNumber(position)) {\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (series.get(\"baseAxis\") === this) {\n\t\t\t\t\tconst dataItem = this.getSeriesItem(series, position!, this.get(\"tooltipLocation\"));\n\t\t\t\t\tseries.setRaw(\"tooltipDataItem\", dataItem);\n\t\t\t\t\tif (snapToSeries && snapToSeries.indexOf(series) != -1) {\n\t\t\t\t\t\tseries.updateLegendMarker(dataItem);\n\t\t\t\t\t\tseries.updateLegendValue(dataItem);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tseries.showDataItemTooltip(dataItem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\n\t\t\tif (tooltip) {\n\t\t\t\trenderer.updateTooltipBounds(tooltip);\n\n\t\t\t\tif (this.get(\"snapTooltip\")) {\n\t\t\t\t\tposition = this.roundAxisPosition(position, this.get(\"tooltipLocation\", 0.5));\n\t\t\t\t}\n\t\t\t\tif (!$type.isNaN(position)) {\n\t\t\t\t\tthis.setPrivateRaw(\"tooltipPosition\", position);\n\t\t\t\t\tthis._updateTooltipText(tooltip, position);\n\t\t\t\t\trenderer.positionTooltip(tooltip, position);\n\n\t\t\t\t\tif (position < this.get(\"start\") || position > this.get(\"end\")) {\n\t\t\t\t\t\ttooltip.hide(0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttooltip.show(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttooltip.hide(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateTooltipText(tooltip: Tooltip, position: number) {\n\t\ttooltip.label.set(\"text\", this.getTooltipText(position));\n\t}\n\n\t/**\n\t * Returns text to be used in an axis tooltip for specific relative position.\n\t *\n\t * @param   position  Position\n\t * @return            Tooltip text\n\t */\n\tpublic abstract getTooltipText(position: number): string | undefined;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic roundAxisPosition(position: number, _location: number): number {\n\t\treturn position;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic handleCursorShow() {\n\t\tlet tooltip = this.get(\"tooltip\");\n\t\tif (tooltip) {\n\t\t\ttooltip.show();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic handleCursorHide() {\n\t\tlet tooltip = this.get(\"tooltip\");\n\t\tif (tooltip) {\n\t\t\ttooltip.hide();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processSeriesDataItem(_dataItem: DataItem<IXYSeriesDataItem>, _fields: Array<string>) {\n\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._sizeDirty = false;\n\t\tthis._rangesDirty = false;\n\t}\n\n\t/**\n\t * Converts pixel coordinate to a relative position on axis.\n\t *\n\t * @param   coordinate  Coordinate\n\t * @return              Relative position\n\t */\n\tpublic coordinateToPosition(coordinate: number): number {\n\t\tconst renderer = this.get(\"renderer\");\n\t\treturn renderer.toAxisPosition(coordinate / renderer.axisLength());\n\t}\n\n\t/**\n\t * Converts relative position of the plot area to relative position of the\n\t * axis with zoom taken into account.\n\t *\n\t * @param position Position\n\t * @return Relative position\n\t */\n\tpublic toAxisPosition(position: number): number {\n\t\treturn this.get(\"renderer\").toAxisPosition(position);\n\t}\n\n\t/**\n\t * Adjusts position with inversed taken into account.\n\t *\n\t * @ignore\n\t */\n\tpublic fixPosition(position: number): number {\n\t\treturn this.get(\"renderer\").fixPosition(position);\n\t}\n\n\t/**\n\t * Returns a data item from series that is closest to the `position`.\n\t *\n\t * @param   series    Series\n\t * @param   position  Relative position\n\t * @return            Data item\n\t */\n\tpublic abstract getSeriesItem(series: XYSeries, position: number, location?: number): DataItem<IXYSeriesDataItem> | undefined\n\n\t/**\n\t * @ignore\n\t */\n\tpublic shouldGap(_dataItem: DataItem<IXYSeriesDataItem>, _nextItem: DataItem<IXYSeriesDataItem>, _autoGapCount: number, _fieldName: string): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Creates and returns an axis range object.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\n\t * @param   axisDataItem  Axis data item\n\t * @return                Axis range\n\t */\n\tpublic createAxisRange(axisDataItem: DataItem<IAxisDataItem>): DataItem<this[\"_dataItemSettings\"]> {\n\t\treturn this.axisRanges.push(axisDataItem);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _groupSeriesData(_series: XYSeries) { }\n\n\t/**\n\t * Returns relative position between two grid lines of the axis.\n\t *\n\t * @return Position\n\t */\n\tpublic getCellWidthPosition(): number {\n\t\treturn 0.05;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}