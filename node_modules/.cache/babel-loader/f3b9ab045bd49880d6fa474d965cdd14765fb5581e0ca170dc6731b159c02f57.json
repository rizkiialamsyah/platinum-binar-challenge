{"ast":null,"code":"function parseDate(timezone, date) {\n  let year = 0;\n  let month = 0;\n  let day = 1;\n  let hour = 0;\n  let minute = 0;\n  let second = 0;\n  let millisecond = 0;\n  let weekday = 0;\n  timezone.formatToParts(date).forEach(x => {\n    switch (x.type) {\n      case \"year\":\n        year = +x.value;\n        break;\n      case \"month\":\n        month = +x.value - 1;\n        break;\n      case \"day\":\n        day = +x.value;\n        break;\n      case \"hour\":\n        hour = +x.value;\n        break;\n      case \"minute\":\n        minute = +x.value;\n        break;\n      case \"second\":\n        second = +x.value;\n        break;\n      case \"fractionalSecond\":\n        millisecond = +x.value;\n        break;\n      case \"weekday\":\n        switch (x.value) {\n          case \"Sun\":\n            weekday = 0;\n            break;\n          case \"Mon\":\n            weekday = 1;\n            break;\n          case \"Tue\":\n            weekday = 2;\n            break;\n          case \"Wed\":\n            weekday = 3;\n            break;\n          case \"Thu\":\n            weekday = 4;\n            break;\n          case \"Fri\":\n            weekday = 5;\n            break;\n          case \"Sat\":\n            weekday = 6;\n            break;\n        }\n    }\n  });\n  if (hour === 24) {\n    hour = 0;\n  }\n  return {\n    year,\n    month,\n    day,\n    hour,\n    minute,\n    second,\n    millisecond,\n    weekday\n  };\n}\nfunction toUTCDate(timezone, date) {\n  const {\n    year,\n    month,\n    day,\n    hour,\n    minute,\n    second,\n    millisecond\n  } = parseDate(timezone, date);\n  return Date.UTC(year, month, day, hour, minute, second, millisecond);\n}\nexport class Timezone {\n  constructor(timezone, isReal) {\n    Object.defineProperty(this, \"_utc\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_dtf\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n    this.name = timezone;\n    this._utc = new Intl.DateTimeFormat(\"UTC\", {\n      hour12: false,\n      timeZone: \"UTC\",\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      weekday: \"short\",\n      fractionalSecondDigits: 3\n    });\n    this._dtf = new Intl.DateTimeFormat(\"UTC\", {\n      hour12: false,\n      timeZone: timezone,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      weekday: \"short\",\n      fractionalSecondDigits: 3\n    });\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   timezone  IANA timezone\r\n   * @return            Instantiated object\r\n   */\n  static new(timezone) {\n    return new this(timezone, true);\n  }\n  convertLocal(date) {\n    const offset = this.offsetUTC(date);\n    const userOffset = date.getTimezoneOffset();\n    const output = new Date(date);\n    output.setUTCMinutes(output.getUTCMinutes() - (offset - userOffset));\n    const newUserOffset = output.getTimezoneOffset();\n    if (userOffset != newUserOffset) {\n      output.setUTCMinutes(output.getUTCMinutes() + newUserOffset - userOffset);\n    }\n    return output;\n  }\n  offsetUTC(date) {\n    const utc = toUTCDate(this._utc, date);\n    const dtf = toUTCDate(this._dtf, date);\n    return (utc - dtf) / 60000;\n  }\n  parseDate(date) {\n    return parseDate(this._dtf, date);\n  }\n}","map":{"version":3,"names":["parseDate","timezone","date","year","month","day","hour","minute","second","millisecond","weekday","formatToParts","forEach","x","type","value","toUTCDate","Date","UTC","Timezone","constructor","isReal","Object","defineProperty","Error","name","_utc","Intl","DateTimeFormat","hour12","timeZone","fractionalSecondDigits","_dtf","new","convertLocal","offset","offsetUTC","userOffset","getTimezoneOffset","output","setUTCMinutes","getUTCMinutes","newUserOffset","utc","dtf"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\util\\Timezone.ts"],"sourcesContent":["interface ParsedDate {\n\tyear: number,\n\tmonth: number,\n\tday: number,\n\thour: number,\n\tminute: number,\n\tsecond: number,\n\tmillisecond: number,\n\tweekday: number\n}\n\nfunction parseDate(timezone: Intl.DateTimeFormat, date: Date): ParsedDate {\n\tlet year = 0;\n\tlet month = 0;\n\tlet day = 1;\n\tlet hour = 0;\n\tlet minute = 0;\n\tlet second = 0;\n\tlet millisecond = 0;\n\tlet weekday = 0;\n\n\ttimezone.formatToParts(date).forEach((x) => {\n\t\tswitch (x.type) {\n\t\t\tcase \"year\":\n\t\t\t\tyear = +x.value;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tmonth = (+x.value) - 1;\n\t\t\t\tbreak;\n\t\t\tcase \"day\":\n\t\t\t\tday = +x.value;\n\t\t\t\tbreak;\n\t\t\tcase \"hour\":\n\t\t\t\thour = +x.value;\n\t\t\t\tbreak;\n\t\t\tcase \"minute\":\n\t\t\t\tminute = +x.value;\n\t\t\t\tbreak;\n\t\t\tcase \"second\":\n\t\t\t\tsecond = +x.value;\n\t\t\t\tbreak;\n\t\t\tcase \"fractionalSecond\" as any:\n\t\t\t\tmillisecond = +x.value;\n\t\t\t\tbreak;\n\t\t\tcase \"weekday\":\n\t\t\t\tswitch (x.value) {\n\t\t\t\t\tcase \"Sun\":\n\t\t\t\t\t\tweekday = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Mon\":\n\t\t\t\t\t\tweekday = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Tue\":\n\t\t\t\t\t\tweekday = 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Wed\":\n\t\t\t\t\t\tweekday = 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Thu\":\n\t\t\t\t\t\tweekday = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Fri\":\n\t\t\t\t\t\tweekday = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Sat\":\n\t\t\t\t\t\tweekday = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t}\n\t});\n\n\tif (hour === 24) {\n\t\thour = 0;\n\t}\n\n\treturn { year, month, day, hour, minute, second, millisecond, weekday };\n}\n\n\nfunction toUTCDate(timezone: Intl.DateTimeFormat, date: Date): number {\n\tconst { year, month, day, hour, minute, second, millisecond } = parseDate(timezone, date);\n\treturn Date.UTC(year, month, day, hour, minute, second, millisecond);\n}\n\n\nexport class Timezone {\n\tprivate _utc: Intl.DateTimeFormat;\n\tprivate _dtf: Intl.DateTimeFormat;\n\n\tpublic readonly name: string | undefined;\n\n\t/**\n\t * Use this method to create an instance of this class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n\t * @param   timezone  IANA timezone\n\t * @return            Instantiated object\n\t */\n\tstatic new<C extends typeof Timezone, T extends InstanceType<C>>(this: C, timezone: string | undefined): T {\n\t\treturn (new this(timezone, true)) as T;\n\t}\n\n\tconstructor(timezone: string | undefined, isReal: boolean) {\n\t\tif (!isReal) {\n\t\t\tthrow new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n\t\t}\n\n\t\tthis.name = timezone;\n\n\t\tthis._utc = new Intl.DateTimeFormat(\"UTC\", {\n\t\t\thour12: false,\n\t\t\ttimeZone: \"UTC\",\n\t\t\tyear: \"numeric\",\n\t\t\tmonth: \"2-digit\",\n\t\t\tday: \"2-digit\",\n\t\t\thour: \"2-digit\",\n\t\t\tminute: \"2-digit\",\n\t\t\tsecond: \"2-digit\",\n\t\t\tweekday: \"short\",\n\t\t\tfractionalSecondDigits: 3,\n\t\t} as any);\n\n\t\tthis._dtf = new Intl.DateTimeFormat(\"UTC\", {\n\t\t\thour12: false,\n\t\t\ttimeZone: timezone,\n\t\t\tyear: \"numeric\",\n\t\t\tmonth: \"2-digit\",\n\t\t\tday: \"2-digit\",\n\t\t\thour: \"2-digit\",\n\t\t\tminute: \"2-digit\",\n\t\t\tsecond: \"2-digit\",\n\t\t\tweekday: \"short\",\n\t\t\tfractionalSecondDigits: 3,\n\t\t} as any);\n\t}\n\n\tconvertLocal(date: Date): Date {\n\t\tconst offset = this.offsetUTC(date);\n\t\tconst userOffset = date.getTimezoneOffset();\n\t\tconst output = new Date(date);\n\t\toutput.setUTCMinutes(output.getUTCMinutes() - (offset - userOffset));\n\n\t\tconst newUserOffset = output.getTimezoneOffset();\n\n\t\tif (userOffset != newUserOffset) {\n\t\t\toutput.setUTCMinutes(output.getUTCMinutes() + newUserOffset - userOffset)\n\t\t}\n\n\t\treturn output;\n\t}\n\n\toffsetUTC(date: Date): number {\n\t\tconst utc = toUTCDate(this._utc, date);\n\t\tconst dtf = toUTCDate(this._dtf, date);\n\t\treturn (utc - dtf) / 60000;\n\t}\n\n\tparseDate(date: Date): ParsedDate {\n\t\treturn parseDate(this._dtf, date)\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}