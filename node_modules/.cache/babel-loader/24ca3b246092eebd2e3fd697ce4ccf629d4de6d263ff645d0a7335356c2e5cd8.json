{"ast":null,"code":"import { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n * @ignore\r\n */\nfunction checkBounds(index, len) {\n  if (!(index >= 0 && index < len)) {\n    throw new Error(\"Index out of bounds: \" + index);\n  }\n}\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\nexport class List {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  constructor() {\n    let initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    /**\r\n     * List values.\r\n     */\n    Object.defineProperty(this, \"_values\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    this._values = initial;\n  }\n  /**\r\n   * An array of values in the list.\r\n   *\r\n   * Do not use this property to add values. Rather use dedicated methods, like\r\n   * `push()`, `removeIndex()`, etc.\r\n   *\r\n   * @readonly\r\n   * @return List values\r\n   */\n  get values() {\n    return this._values;\n  }\n  /**\r\n   * Checks if list contains specific item reference.\r\n   *\r\n   * @param item  Item to search for\r\n   * @return `true` if found, `false` if not found\r\n   */\n  contains(value) {\n    return this._values.indexOf(value) !== -1;\n  }\n  /**\r\n   * Removes specific item from the list.\r\n   *\r\n   * @param item An item to remove\r\n   */\n  removeValue(value) {\n    let i = 0;\n    let length = this._values.length;\n    while (i < length) {\n      // TODO handle NaN\n      if (this._values[i] === value) {\n        this.removeIndex(i);\n        --length;\n      } else {\n        ++i;\n      }\n    }\n  }\n  /**\r\n   * Searches the list for specific item and returns its index.\r\n   *\r\n   * @param item  An item to search for\r\n   * @return Index or -1 if not found\r\n   */\n  indexOf(value) {\n    return $array.indexOf(this._values, value);\n  }\n  /**\r\n   * Number of items in list.\r\n   *\r\n   * @readonly\r\n   * @return Number of items\r\n   */\n  get length() {\n    return this._values.length;\n  }\n  /**\r\n   * Checks if there's a value at specific index.\r\n   *\r\n   * @param index  Index\r\n   * @return Value exists?\r\n   */\n  hasIndex(index) {\n    return index >= 0 && index < this._values.length;\n  }\n  /**\r\n   * Returns an item at specified index.\r\n   *\r\n   * @param index  Index\r\n   * @return List item\r\n   */\n  getIndex(index) {\n    return this._values[index];\n  }\n  _onPush(newValue) {\n    if (this.events.isEnabled(\"push\")) {\n      this.events.dispatch(\"push\", {\n        type: \"push\",\n        target: this,\n        newValue\n      });\n    }\n  }\n  _onInsertIndex(index, newValue) {\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatch(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index,\n        newValue\n      });\n    }\n  }\n  _onSetIndex(index, oldValue, newValue) {\n    if (this.events.isEnabled(\"setIndex\")) {\n      this.events.dispatch(\"setIndex\", {\n        type: \"setIndex\",\n        target: this,\n        index,\n        oldValue,\n        newValue\n      });\n    }\n  }\n  _onRemoveIndex(index, oldValue) {\n    if (this.events.isEnabled(\"removeIndex\")) {\n      this.events.dispatch(\"removeIndex\", {\n        type: \"removeIndex\",\n        target: this,\n        index,\n        oldValue\n      });\n    }\n  }\n  _onMoveIndex(oldIndex, newIndex, value) {\n    if (this.events.isEnabled(\"moveIndex\")) {\n      this.events.dispatch(\"moveIndex\", {\n        type: \"moveIndex\",\n        target: this,\n        oldIndex,\n        newIndex,\n        value\n      });\n    }\n  }\n  _onClear(oldValues) {\n    if (this.events.isEnabled(\"clear\")) {\n      this.events.dispatch(\"clear\", {\n        type: \"clear\",\n        target: this,\n        oldValues\n      });\n    }\n  }\n  /**\r\n   * Sets value at specific index.\r\n   *\r\n   * If there's already a value at the index, it is overwritten.\r\n   *\r\n   * @param index  Index\r\n   * @param value  New value\r\n   * @return New value\r\n   */\n  setIndex(index, value) {\n    checkBounds(index, this._values.length);\n    const oldValue = this._values[index];\n    // Do nothing if the old value and the new value are the same\n    if (oldValue !== value) {\n      this._values[index] = value;\n      this._onSetIndex(index, oldValue, value);\n    }\n    return oldValue;\n  }\n  /**\r\n   * Adds an item to the list at a specific index, which pushes all the other\r\n   * items further down the list.\r\n   *\r\n   * @param index Index\r\n   * @param item  An item to add\r\n   */\n  insertIndex(index, value) {\n    checkBounds(index, this._values.length + 1);\n    $array.insertIndex(this._values, index, value);\n    this._onInsertIndex(index, value);\n    return value;\n  }\n  /**\r\n   * Swaps indexes of two items in the list.\r\n   *\r\n   * @param a  Item 1\r\n   * @param b  Item 2\r\n   */\n  swap(a, b) {\n    const len = this._values.length;\n    checkBounds(a, len);\n    checkBounds(b, len);\n    if (a !== b) {\n      const value_a = this._values[a];\n      const value_b = this._values[b];\n      this._values[a] = value_b;\n      this._onSetIndex(a, value_a, value_b);\n      this._values[b] = value_a;\n      this._onSetIndex(b, value_b, value_a);\n    }\n  }\n  /**\r\n   * Removes a value at specific index.\r\n   *\r\n   * @param index  Index of value to remove\r\n   * @return Removed value\r\n   */\n  removeIndex(index) {\n    checkBounds(index, this._values.length);\n    const oldValue = this._values[index];\n    $array.removeIndex(this._values, index);\n    this._onRemoveIndex(index, oldValue);\n    return oldValue;\n  }\n  /**\r\n   * Moves an item to a specific index within the list.\r\n   *\r\n   * If the index is not specified it will move the item to the end of the\r\n   * list.\r\n   *\r\n   * @param value  Item to move\r\n   * @param index  Index to place item at\r\n   */\n  moveValue(value, toIndex) {\n    // TODO don't do anything if the desired index is the same as the current index\n    let index = this.indexOf(value);\n    // TODO remove all old values rather than only the first ?\n    if (index !== -1) {\n      $array.removeIndex(this._values, index);\n      if (toIndex == null) {\n        const toIndex = this._values.length;\n        this._values.push(value);\n        this._onMoveIndex(index, toIndex, value);\n      } else {\n        $array.insertIndex(this._values, toIndex, value);\n        this._onMoveIndex(index, toIndex, value);\n      }\n    } else if (toIndex == null) {\n      this._values.push(value);\n      this._onPush(value);\n    } else {\n      $array.insertIndex(this._values, toIndex, value);\n      this._onInsertIndex(toIndex, value);\n    }\n    return value;\n  }\n  /**\r\n   * Adds an item to the end of the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n  push(value) {\n    this._values.push(value);\n    this._onPush(value);\n    return value;\n  }\n  /**\r\n   * Adds an item as a first item in the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n  unshift(value) {\n    this.insertIndex(0, value);\n    return value;\n  }\n  /**\r\n   * Adds multiple items to the list.\r\n   *\r\n   * @param items  An Array of items to add\r\n   */\n  pushAll(values) {\n    $array.each(values, value => {\n      this.push(value);\n    });\n  }\n  /**\r\n   * Copies and adds items from abother list.\r\n   *\r\n   * @param source  A list top copy items from\r\n   */\n  copyFrom(source) {\n    this.pushAll(source._values);\n  }\n  /**\r\n   * Returns the last item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n  pop() {\n    let index = this._values.length - 1;\n    return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n  }\n  /**\r\n   * Returns the first item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n  shift() {\n    return this._values.length ? this.removeIndex(0) : undefined;\n  }\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n  setAll(newArray) {\n    const old = this._values;\n    this._values = [];\n    this._onClear(old);\n    $array.each(newArray, value => {\n      this._values.push(value);\n      this._onPush(value);\n    });\n  }\n  /**\r\n   * Removes all items from the list.\r\n   */\n  clear() {\n    this.setAll([]);\n  }\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n  *[Symbol.iterator]() {\n    const length = this._values.length;\n    for (let i = 0; i < length; ++i) {\n      yield this._values[i];\n    }\n  }\n  /**\r\n   * Calls `f` for each element in the list.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n  each(f) {\n    $array.each(this._values, f);\n  }\n  /**\r\n   * Calls `f` for each element in the list, from right to left.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n  eachReverse(f) {\n    $array.eachReverse(this._values, f);\n  }\n}\n/**\r\n * A version of a [[List]] where the elements are disposed automatically when\r\n * removed from the list, unless `autoDispose` is set to `false`.\r\n */\nexport class ListAutoDispose extends List {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * Automatically disposes elements that are removed from the list.\r\n     *\r\n     * @default true\r\n     */\n    Object.defineProperty(this, \"autoDispose\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n  }\n  _onSetIndex(index, oldValue, newValue) {\n    if (this.autoDispose) {\n      oldValue.dispose();\n    }\n    super._onSetIndex(index, oldValue, newValue);\n  }\n  _onRemoveIndex(index, oldValue) {\n    if (this.autoDispose) {\n      oldValue.dispose();\n    }\n    super._onRemoveIndex(index, oldValue);\n  }\n  _onClear(oldValues) {\n    if (this.autoDispose) {\n      $array.each(oldValues, x => {\n        x.dispose();\n      });\n    }\n    super._onClear(oldValues);\n  }\n  isDisposed() {\n    return this._disposed;\n  }\n  dispose() {\n    if (!this._disposed) {\n      this._disposed = true;\n      if (this.autoDispose) {\n        $array.each(this._values, x => {\n          x.dispose();\n        });\n      }\n    }\n  }\n}\n/**\r\n * A version of a [[List]] that is able to create new elements as well as\r\n * apply additional settings to newly created items.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/list-templates/} for more info\r\n */\nexport class ListTemplate extends ListAutoDispose {\n  constructor(template, make) {\n    super();\n    Object.defineProperty(this, \"template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"make\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.template = template;\n    this.make = make;\n  }\n}","map":{"version":3,"names":["EventDispatcher","$array","checkBounds","index","len","Error","List","constructor","initial","arguments","length","undefined","Object","defineProperty","_values","values","contains","value","indexOf","removeValue","i","removeIndex","hasIndex","getIndex","_onPush","newValue","events","isEnabled","dispatch","type","target","_onInsertIndex","_onSetIndex","oldValue","_onRemoveIndex","_onMoveIndex","oldIndex","newIndex","_onClear","oldValues","setIndex","insertIndex","swap","a","b","value_a","value_b","moveValue","toIndex","push","unshift","pushAll","each","copyFrom","source","pop","shift","setAll","newArray","old","clear","Symbol","iterator","f","eachReverse","ListAutoDispose","autoDispose","dispose","x","isDisposed","_disposed","ListTemplate","template","make"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\util\\List.ts"],"sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport type { Entity } from \"./Entity\";\nimport type { Template } from \"./Template\";\nimport type { IDisposer } from \"./Disposer\";\nimport { EventDispatcher, Events } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport type { Optional } from \"./Type\";\n\n\n/**\n * Checks if specific index fits into length.\n *\n * @param index  Index\n * @param len    Length\n * @ignore\n */\nfunction checkBounds(index: number, len: number): void {\n\tif (!(index >= 0 && index < len)) {\n\t\tthrow new Error(\"Index out of bounds: \" + index);\n\t}\n}\n\n\nexport interface IListEvents<A> {\n\tclear: {\n\t\toldValues: Array<A>,\n\t};\n\tpush: {\n\t\tnewValue: A,\n\t};\n\tinsertIndex: {\n\t\tindex: number,\n\t\tnewValue: A,\n\t};\n\tsetIndex: {\n\t\tindex: number,\n\t\toldValue: A,\n\t\tnewValue: A,\n\t};\n\tremoveIndex: {\n\t\tindex: number,\n\t\toldValue: A,\n\t};\n\tmoveIndex: {\n\t\toldIndex: number,\n\t\tnewIndex: number,\n\t\tvalue: A,\n\t};\n}\n\n\n/**\n * A List class is used to hold a number of indexed items of the same type.\n */\nexport class List<T> {\n\n\t/**\n\t * List values.\n\t */\n\tprotected _values: Array<T>;\n\n\tpublic events: EventDispatcher<Events<this, IListEvents<T>>> = new EventDispatcher();\n\n\t/**\n\t * Constructor\n\t *\n\t * @param initial  Inital list of values to add to list\n\t */\n\tconstructor(initial: Array<T> = []) {\n\t\tthis._values = initial;\n\t}\n\n\t/**\n\t * An array of values in the list.\n\t *\n\t * Do not use this property to add values. Rather use dedicated methods, like\n\t * `push()`, `removeIndex()`, etc.\n\t *\n\t * @readonly\n\t * @return List values\n\t */\n\tpublic get values(): Array<T> {\n\t\treturn this._values;\n\t}\n\n\t/**\n\t * Checks if list contains specific item reference.\n\t *\n\t * @param item  Item to search for\n\t * @return `true` if found, `false` if not found\n\t */\n\tpublic contains(value: T): boolean {\n\t\treturn this._values.indexOf(value) !== -1;\n\t}\n\n\t/**\n\t * Removes specific item from the list.\n\t *\n\t * @param item An item to remove\n\t */\n\tpublic removeValue(value: T): void {\n\t\tlet i = 0;\n\t\tlet length = this._values.length;\n\n\t\twhile (i < length) {\n\t\t\t// TODO handle NaN\n\t\t\tif (this._values[i] === value) {\n\t\t\t\tthis.removeIndex(i);\n\t\t\t\t--length;\n\n\t\t\t} else {\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Searches the list for specific item and returns its index.\n\t *\n\t * @param item  An item to search for\n\t * @return Index or -1 if not found\n\t */\n\tpublic indexOf(value: T): number {\n\t\treturn $array.indexOf(this._values, value);\n\t}\n\n\t/**\n\t * Number of items in list.\n\t *\n\t * @readonly\n\t * @return Number of items\n\t */\n\tpublic get length(): number {\n\t\treturn this._values.length;\n\t}\n\n\t/**\n\t * Checks if there's a value at specific index.\n\t *\n\t * @param index  Index\n\t * @return Value exists?\n\t */\n\tpublic hasIndex(index: number): boolean {\n\t\treturn index >= 0 && index < this._values.length;\n\t}\n\n\t/**\n\t * Returns an item at specified index.\n\t *\n\t * @param index  Index\n\t * @return List item\n\t */\n\tpublic getIndex(index: number): T | undefined {\n\t\treturn this._values[index];\n\t}\n\n\tprotected _onPush(newValue: T) {\n\t\tif (this.events.isEnabled(\"push\")) {\n\t\t\tthis.events.dispatch(\"push\", {\n\t\t\t\ttype: \"push\",\n\t\t\t\ttarget: this,\n\t\t\t\tnewValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onInsertIndex(index: number, newValue: T) {\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\n\t\t\tthis.events.dispatch(\"insertIndex\", {\n\t\t\t\ttype: \"insertIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\tindex,\n\t\t\t\tnewValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onSetIndex(index: number, oldValue: T, newValue: T) {\n\t\tif (this.events.isEnabled(\"setIndex\")) {\n\t\t\tthis.events.dispatch(\"setIndex\", {\n\t\t\t\ttype: \"setIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\tindex,\n\t\t\t\toldValue,\n\t\t\t\tnewValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onRemoveIndex(index: number, oldValue: T) {\n\t\tif (this.events.isEnabled(\"removeIndex\")) {\n\t\t\tthis.events.dispatch(\"removeIndex\", {\n\t\t\t\ttype: \"removeIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\tindex,\n\t\t\t\toldValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onMoveIndex(oldIndex: number, newIndex: number, value: T) {\n\t\tif (this.events.isEnabled(\"moveIndex\")) {\n\t\t\tthis.events.dispatch(\"moveIndex\", {\n\t\t\t\ttype: \"moveIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\toldIndex,\n\t\t\t\tnewIndex,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onClear(oldValues: Array<T>) {\n\t\tif (this.events.isEnabled(\"clear\")) {\n\t\t\tthis.events.dispatch(\"clear\", {\n\t\t\t\ttype: \"clear\",\n\t\t\t\ttarget: this,\n\t\t\t\toldValues\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Sets value at specific index.\n\t *\n\t * If there's already a value at the index, it is overwritten.\n\t *\n\t * @param index  Index\n\t * @param value  New value\n\t * @return New value\n\t */\n\tpublic setIndex(index: number, value: T): T {\n\t\tcheckBounds(index, this._values.length);\n\n\t\tconst oldValue = this._values[index];\n\n\t\t// Do nothing if the old value and the new value are the same\n\t\tif (oldValue !== value) {\n\t\t\tthis._values[index] = value;\n\t\t\tthis._onSetIndex(index, oldValue, value);\n\t\t}\n\n\t\treturn oldValue;\n\t}\n\n\t/**\n\t * Adds an item to the list at a specific index, which pushes all the other\n\t * items further down the list.\n\t *\n\t * @param index Index\n\t * @param item  An item to add\n\t */\n\tpublic insertIndex<K extends T>(index: number, value: K): K {\n\t\tcheckBounds(index, this._values.length + 1);\n\n\t\t$array.insertIndex(this._values, index, value);\n\t\tthis._onInsertIndex(index, value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Swaps indexes of two items in the list.\n\t *\n\t * @param a  Item 1\n\t * @param b  Item 2\n\t */\n\tpublic swap(a: number, b: number): void {\n\t\tconst len = this._values.length;\n\n\t\tcheckBounds(a, len);\n\t\tcheckBounds(b, len);\n\n\t\tif (a !== b) {\n\t\t\tconst value_a = this._values[a];\n\t\t\tconst value_b = this._values[b];\n\n\t\t\tthis._values[a] = value_b;\n\t\t\tthis._onSetIndex(a, value_a, value_b);\n\n\t\t\tthis._values[b] = value_a;\n\t\t\tthis._onSetIndex(b, value_b, value_a);\n\t\t}\n\t}\n\n\t/**\n\t * Removes a value at specific index.\n\t *\n\t * @param index  Index of value to remove\n\t * @return Removed value\n\t */\n\tpublic removeIndex(index: number): T {\n\t\tcheckBounds(index, this._values.length);\n\n\t\tconst oldValue = this._values[index];\n\n\t\t$array.removeIndex(this._values, index);\n\t\tthis._onRemoveIndex(index, oldValue);\n\n\t\treturn oldValue;\n\t}\n\n\t/**\n\t * Moves an item to a specific index within the list.\n\t *\n\t * If the index is not specified it will move the item to the end of the\n\t * list.\n\t *\n\t * @param value  Item to move\n\t * @param index  Index to place item at\n\t */\n\tpublic moveValue<K extends T>(value: K, toIndex?: number): K {\n\t\t// TODO don't do anything if the desired index is the same as the current index\n\t\tlet index = this.indexOf(value);\n\n\t\t// TODO remove all old values rather than only the first ?\n\t\tif (index !== -1) {\n\t\t\t$array.removeIndex(this._values, index);\n\n\t\t\tif (toIndex == null) {\n\t\t\t\tconst toIndex = this._values.length;\n\t\t\t\tthis._values.push(value);\n\t\t\t\tthis._onMoveIndex(index, toIndex, value);\n\n\t\t\t} else {\n\t\t\t\t$array.insertIndex(this._values, toIndex, value);\n\t\t\t\tthis._onMoveIndex(index, toIndex, value);\n\t\t\t}\n\n\t\t} else if (toIndex == null) {\n\t\t\tthis._values.push(value);\n\t\t\tthis._onPush(value);\n\n\t\t} else {\n\t\t\t$array.insertIndex(this._values, toIndex, value);\n\t\t\tthis._onInsertIndex(toIndex, value);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds an item to the end of the list.\n\t *\n\t * @param item  An item to add\n\t */\n\tpublic push<K extends T>(value: K): K {\n\t\tthis._values.push(value);\n\t\tthis._onPush(value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds an item as a first item in the list.\n\t *\n\t * @param item  An item to add\n\t */\n\tpublic unshift<K extends T>(value: K): K {\n\t\tthis.insertIndex(0, value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds multiple items to the list.\n\t *\n\t * @param items  An Array of items to add\n\t */\n\tpublic pushAll(values: Array<T>): void {\n\t\t$array.each(values, (value) => {\n\t\t\tthis.push(value);\n\t\t});\n\t}\n\n\t/**\n\t * Copies and adds items from abother list.\n\t *\n\t * @param source  A list top copy items from\n\t */\n\tpublic copyFrom(source: this): void {\n\t\tthis.pushAll(source._values);\n\t}\n\n\t/**\n\t * Returns the last item from the list, and removes it.\n\t *\n\t * @return Item\n\t */\n\tpublic pop(): Optional<T> {\n\t\tlet index = this._values.length - 1;\n\t\treturn index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n\t}\n\n\t/**\n\t * Returns the first item from the list, and removes it.\n\t *\n\t * @return Item\n\t */\n\tpublic shift(): Optional<T> {\n\t\treturn this._values.length ? this.removeIndex(0) : undefined;\n\t}\n\n\t/**\n\t * Sets multiple items to the list.\n\t *\n\t * All current items are removed.\n\t *\n\t * @param newArray  New items\n\t */\n\tpublic setAll(newArray: Array<T>): void {\n\t\tconst old = this._values;\n\t\tthis._values = [];\n\t\tthis._onClear(old);\n\n\t\t$array.each(newArray, (value) => {\n\t\t\tthis._values.push(value);\n\t\t\tthis._onPush(value);\n\t\t});\n\t}\n\n\t/**\n\t * Removes all items from the list.\n\t */\n\tpublic clear(): void {\n\t\tthis.setAll([]);\n\t}\n\n\t/**\n\t * Returns an ES6 iterator for the list.\n\t */\n\tpublic *[Symbol.iterator](): Iterator<T> {\n\t\tconst length = this._values.length;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\tyield this._values[i];\n\t\t}\n\t}\n\n\t/**\n\t * Calls `f` for each element in the list.\n\t *\n\t * `f` should have at least one parameter defined which will get a current\n\t * item, with optional second argument - index.\n\t */\n\tpublic each(f: (value: T, index: number) => void): void {\n\t\t$array.each(this._values, f);\n\t}\n\n\t/**\n\t * Calls `f` for each element in the list, from right to left.\n\t *\n\t * `f` should have at least one parameter defined which will get a current\n\t * item, with optional second argument - index.\n\t */\n\tpublic eachReverse(f: (value: T, index: number) => void): void {\n\t\t$array.eachReverse(this._values, f);\n\t}\n}\n\n\n/**\n * A version of a [[List]] where the elements are disposed automatically when\n * removed from the list, unless `autoDispose` is set to `false`.\n */\nexport class ListAutoDispose<A extends IDisposer> extends List<A> implements IDisposer {\n\t/**\n\t * Automatically disposes elements that are removed from the list.\n\t *\n\t * @default true\n\t */\n\tpublic autoDispose: boolean = true;\n\n\tprivate _disposed: boolean = false;\n\n\tprotected _onSetIndex(index: number, oldValue: A, newValue: A) {\n\t\tif (this.autoDispose) {\n\t\t\toldValue.dispose();\n\t\t}\n\n\t\tsuper._onSetIndex(index, oldValue, newValue);\n\t}\n\n\tprotected _onRemoveIndex(index: number, oldValue: A) {\n\t\tif (this.autoDispose) {\n\t\t\toldValue.dispose();\n\t\t}\n\n\t\tsuper._onRemoveIndex(index, oldValue);\n\t}\n\n\tprotected _onClear(oldValues: Array<A>) {\n\t\tif (this.autoDispose) {\n\t\t\t$array.each(oldValues, (x) => {\n\t\t\t\tx.dispose();\n\t\t\t});\n\t\t}\n\n\t\tsuper._onClear(oldValues);\n\t}\n\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\n\t\t\tif (this.autoDispose) {\n\t\t\t\t$array.each(this._values, (x) => {\n\t\t\t\t\tx.dispose();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * A version of a [[List]] that is able to create new elements as well as\n * apply additional settings to newly created items.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/list-templates/} for more info\n */\nexport class ListTemplate<A extends Entity> extends ListAutoDispose<A> {\n\tpublic template: Template<A>;\n\tpublic make: () => A;\n\n\tconstructor(template: Template<A>, make: () => A) {\n\t\tsuper();\n\t\tthis.template = template;\n\t\tthis.make = make;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}