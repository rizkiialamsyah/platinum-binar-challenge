{"ast":null,"code":"import { Disposer } from \"./Disposer\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport { getInterpolate } from \"./Animation\";\nimport { States } from \"./States\";\nimport { registry } from \"../Registry\";\nimport * as $object from \"./Object\";\nimport * as $ease from \"./Ease\";\nimport * as $array from \"./Array\";\nimport * as $order from \"./Order\";\n/**\r\n * Allows to dynamically modify setting value of its target element.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info\r\n */\nexport class Adapters {\n  constructor(entity) {\n    Object.defineProperty(this, \"_entity\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_callbacks\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_disabled\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._entity = entity;\n  }\n  /**\r\n   * Add a function (`callback`) that will modify value for setting `key`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info\r\n   */\n  add(key, callback) {\n    let callbacks = this._callbacks[key];\n    if (callbacks === undefined) {\n      callbacks = this._callbacks[key] = [];\n    }\n    callbacks.push(callback);\n    this._entity._markDirtyKey(key);\n    return new Disposer(() => {\n      if ($array.removeFirst(callbacks, callback)) {\n        this._entity._markDirtyKey(key);\n      }\n    });\n  }\n  /**\r\n   * Removes all adapters for the specific key.\r\n   *\r\n   * @since 5.1.0\r\n   */\n  remove(key) {\n    const callbacks = this._callbacks[key];\n    if (callbacks !== undefined) {\n      delete this._callbacks[key];\n      if (callbacks.length !== 0) {\n        this._entity._markDirtyKey(key);\n      }\n    }\n  }\n  /**\r\n   * Enables (previously disabled) adapters for specific key.\r\n   *\r\n   * @since 5.1.0\r\n   */\n  enable(key) {\n    if (this._disabled[key]) {\n      delete this._disabled[key];\n      this._entity._markDirtyKey(key);\n    }\n  }\n  /**\r\n   * Disables all adapters for specific key.\r\n   *\r\n   * @since 5.1.0\r\n   */\n  disable(key) {\n    if (!this._disabled[key]) {\n      this._disabled[key] = true;\n      this._entity._markDirtyKey(key);\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  fold(key, value) {\n    if (!this._disabled[key]) {\n      const callbacks = this._callbacks[key];\n      if (callbacks !== undefined) {\n        for (let i = 0, len = callbacks.length; i < len; ++i) {\n          value = callbacks[i](value, this._entity, key);\n        }\n      }\n    }\n    return value;\n  }\n}\n/**\r\n * Animation object.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/} for more info\r\n */\nexport class Animation {\n  constructor(animation, from, to, duration, easing, loops, startingTime) {\n    Object.defineProperty(this, \"_animation\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_from\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_to\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_duration\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_easing\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_loops\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_interpolate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_oldTime\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_time\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_stopped\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_playing\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    this._animation = animation;\n    this._from = from;\n    this._to = to;\n    this._duration = duration;\n    this._easing = easing;\n    this._loops = loops;\n    this._interpolate = getInterpolate(from, to);\n    this._oldTime = startingTime;\n  }\n  get to() {\n    return this._to;\n  }\n  get from() {\n    return this._from;\n  }\n  get playing() {\n    return this._playing;\n  }\n  get stopped() {\n    return this._stopped;\n  }\n  stop() {\n    if (!this._stopped) {\n      this._stopped = true;\n      this._playing = false;\n      if (this.events.isEnabled(\"stopped\")) {\n        this.events.dispatch(\"stopped\", {\n          type: \"stopped\",\n          target: this\n        });\n      }\n    }\n  }\n  pause() {\n    this._playing = false;\n    this._oldTime = null;\n  }\n  play() {\n    if (!this._stopped && !this._playing) {\n      this._playing = true;\n      this._animation._startAnimation();\n    }\n  }\n  get percentage() {\n    return this._time / this._duration;\n  }\n  waitForStop() {\n    return new Promise((resolve, _reject) => {\n      if (this._stopped) {\n        resolve();\n      } else {\n        const listener = () => {\n          stopped.dispose();\n          resolve();\n        };\n        const stopped = this.events.on(\"stopped\", listener);\n      }\n    });\n  }\n  _checkEnded() {\n    if (this._loops > 1) {\n      --this._loops;\n      return false;\n    } else {\n      return true;\n    }\n  }\n  _run(currentTime) {\n    if (this._oldTime !== null) {\n      this._time += currentTime - this._oldTime;\n      if (this._time > this._duration) {\n        this._time = this._duration;\n      }\n    }\n    this._oldTime = currentTime;\n  }\n  _reset(currentTime) {\n    this._oldTime = currentTime;\n    this._time = 0;\n  }\n  _value(diff) {\n    return this._interpolate(this._easing(diff), this._from, this._to);\n  }\n}\n/**\r\n * @ignore\r\n */\nlet counter = 0;\n/**\r\n * Base class for [[Entity]] objects that support Settings.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n */\nexport class Settings {\n  constructor(settings) {\n    /**\r\n     * Unique ID.\r\n     */\n    Object.defineProperty(this, \"uid\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: ++counter\n    });\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_privateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_settingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_privateSettingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_prevSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_prevPrivateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_animatingSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_animatingPrivateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    // TODO move this into Entity\n    Object.defineProperty(this, \"_userProperties\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._settings = settings;\n  }\n  _checkDirty() {\n    $object.keys(this._settings).forEach(key => {\n      this._userProperties[key] = true;\n      this._markDirtyKey(key);\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  resetUserSettings() {\n    this._userProperties = {};\n  }\n  _runAnimation(currentTime) {\n    if (!this.isDisposed()) {\n      let playing = false;\n      $object.each(this._animatingSettings, (key, animation) => {\n        if (animation._stopped) {\n          this._stopAnimation(key);\n        } else if (animation._playing) {\n          animation._run(currentTime);\n          const diff = animation.percentage;\n          if (diff >= 1) {\n            if (animation._checkEnded()) {\n              this.set(key, animation._value(1));\n            } else {\n              playing = true;\n              animation._reset(currentTime);\n              this._set(key, animation._value(1));\n            }\n          } else {\n            playing = true;\n            this._set(key, animation._value(diff));\n          }\n        }\n      });\n      $object.each(this._animatingPrivateSettings, (key, animation) => {\n        if (animation._stopped) {\n          this._stopAnimationPrivate(key);\n        } else if (animation._playing) {\n          animation._run(currentTime);\n          const diff = animation.percentage;\n          if (diff >= 1) {\n            if (animation._checkEnded()) {\n              this.setPrivate(key, animation._value(1));\n            } else {\n              playing = true;\n              animation._reset(currentTime);\n              this._setPrivate(key, animation._value(1));\n            }\n          } else {\n            playing = true;\n            this._setPrivate(key, animation._value(diff));\n          }\n        }\n      });\n      return playing;\n    } else {\n      return false;\n    }\n  }\n  _markDirtyKey(_key) {\n    this.markDirty();\n  }\n  _markDirtyPrivateKey(_key) {\n    this.markDirty();\n  }\n  /**\r\n   * Sets a callback function to invoke when specific key of settings changes\r\n   * or is set.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info\r\n   * @param   key       Settings key\r\n   * @param   callback  Callback\r\n   * @return            Disposer for event\r\n   */\n  on(key, callback) {\n    let events = this._settingEvents[key];\n    if (events === undefined) {\n      events = this._settingEvents[key] = [];\n    }\n    events.push(callback);\n    return new Disposer(() => {\n      $array.removeFirst(events, callback);\n      if (events.length === 0) {\n        delete this._settingEvents[key];\n      }\n    });\n  }\n  /**\r\n   * Sets a callback function to invoke when specific key of private settings\r\n   * changes or is set.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info\r\n   * @ignore\r\n   * @param   key       Private settings key\r\n   * @param   callback  Callback\r\n   * @return            Disposer for event\r\n   */\n  onPrivate(key, callback) {\n    let events = this._privateSettingEvents[key];\n    if (events === undefined) {\n      events = this._privateSettingEvents[key] = [];\n    }\n    events.push(callback);\n    return new Disposer(() => {\n      $array.removeFirst(events, callback);\n      if (events.length === 0) {\n        delete this._privateSettingEvents[key];\n      }\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  getRaw(key, fallback) {\n    const value = this._settings[key];\n    if (value !== undefined) {\n      return value;\n    } else {\n      return fallback;\n    }\n  }\n  get(key, fallback) {\n    return this.getRaw(key, fallback);\n  }\n  _sendKeyEvent(key, value) {\n    const events = this._settingEvents[key];\n    if (events !== undefined) {\n      $array.each(events, callback => {\n        callback(value, this, key);\n      });\n    }\n  }\n  _sendPrivateKeyEvent(key, value) {\n    const events = this._privateSettingEvents[key];\n    if (events !== undefined) {\n      $array.each(events, callback => {\n        callback(value, this, key);\n      });\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  _setRaw(key, old, value) {\n    this._prevSettings[key] = old;\n    this._sendKeyEvent(key, value);\n  }\n  /**\r\n   * @ignore\r\n   */\n  setRaw(key, value) {\n    const old = this._settings[key];\n    this._settings[key] = value;\n    if (old !== value) {\n      this._setRaw(key, old, value);\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  _set(key, value) {\n    const old = this._settings[key];\n    this._settings[key] = value;\n    if (old !== value) {\n      this._setRaw(key, old, value);\n      this._markDirtyKey(key);\n    }\n  }\n  _stopAnimation(key) {\n    const animation = this._animatingSettings[key];\n    if (animation) {\n      delete this._animatingSettings[key];\n      animation.stop();\n    }\n  }\n  /**\r\n   * Sets a setting `value` for the specified `key`, and returns the same `value`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   * @param   value     Setting value\r\n   * @return            Setting value\r\n   */\n  set(key, value) {\n    this._set(key, value);\n    this._stopAnimation(key);\n    return value;\n  }\n  /**\r\n   * Removes a setting value for the specified `key`;\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   */\n  remove(key) {\n    if (key in this._settings) {\n      this._prevSettings[key] = this._settings[key];\n      delete this._settings[key];\n      this._sendKeyEvent(key, undefined);\n      this._markDirtyKey(key);\n    }\n    this._stopAnimation(key);\n  }\n  /**\r\n   * Removes all keys;\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   */\n  removeAll() {\n    $array.each($object.keys(this._settings), key => {\n      this.remove(key);\n    });\n  }\n  /**\r\n   * Returns a value of a private setting.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/#Private_settings} for more info\r\n   */\n  getPrivate(key, fallback) {\n    const value = this._privateSettings[key];\n    if (value !== undefined) {\n      return value;\n    } else {\n      return fallback;\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  _setPrivateRaw(key, old, value) {\n    this._prevPrivateSettings[key] = old;\n    this._sendPrivateKeyEvent(key, value);\n  }\n  /**\r\n   * @ignore\r\n   */\n  setPrivateRaw(key, value) {\n    const old = this._privateSettings[key];\n    this._privateSettings[key] = value;\n    if (old !== value) {\n      this._setPrivateRaw(key, old, value);\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  _setPrivate(key, value) {\n    const old = this._privateSettings[key];\n    this._privateSettings[key] = value;\n    if (old !== value) {\n      this._setPrivateRaw(key, old, value);\n      this._markDirtyPrivateKey(key);\n    }\n  }\n  _stopAnimationPrivate(key) {\n    const animation = this._animatingPrivateSettings[key];\n    if (animation) {\n      animation.stop();\n      delete this._animatingPrivateSettings[key];\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  setPrivate(key, value) {\n    this._setPrivate(key, value);\n    this._stopAnimationPrivate(key);\n    return value;\n  }\n  /**\r\n   * @ignore\r\n   */\n  removePrivate(key) {\n    if (key in this._privateSettings) {\n      this._prevPrivateSettings[key] = this._privateSettings[key];\n      delete this._privateSettings[key];\n      this._markDirtyPrivateKey(key);\n    }\n    this._stopAnimationPrivate(key);\n  }\n  /**\r\n   * Sets multiple settings at once.\r\n   *\r\n   * `settings` must be an object with key: value pairs.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param settings Settings\r\n   */\n  setAll(settings) {\n    $object.each(settings, (key, value) => {\n      this.set(key, value);\n    });\n  }\n  /**\r\n   * Animates setting values from current/start values to new ones.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animating_settings} for more info\r\n   * @param   options  Animation options\r\n   * @return           Animation object\r\n   */\n  animate(options) {\n    const key = options.key;\n    const to = options.to;\n    const duration = options.duration || 0;\n    const loops = options.loops || 1;\n    const from = options.from === undefined ? this.get(key) : options.from;\n    const easing = options.easing === undefined ? $ease.linear : options.easing;\n    if (duration === 0) {\n      this.set(key, to);\n    } else {\n      if (from === undefined || from === to) {\n        this.set(key, to);\n      } else {\n        this.set(key, from);\n        const animation = this._animatingSettings[key] = new Animation(this, from, to, duration, easing, loops, this._animationTime());\n        this._startAnimation();\n        return animation;\n      }\n    }\n    const animation = new Animation(this, from, to, duration, easing, loops, null);\n    animation.stop();\n    return animation;\n  }\n  /**\r\n   * @ignore\r\n   */\n  animatePrivate(options) {\n    const key = options.key;\n    const to = options.to;\n    const duration = options.duration || 0;\n    const loops = options.loops || 1;\n    const from = options.from === undefined ? this.getPrivate(key) : options.from;\n    const easing = options.easing === undefined ? $ease.linear : options.easing;\n    if (duration === 0) {\n      this.setPrivate(key, to);\n    } else {\n      if (from === undefined || from === to) {\n        this.setPrivate(key, to);\n      } else {\n        this.setPrivate(key, from);\n        const animation = this._animatingPrivateSettings[key] = new Animation(this, from, to, duration, easing, loops, this._animationTime());\n        this._startAnimation();\n        return animation;\n      }\n    }\n    const animation = new Animation(this, from, to, duration, easing, loops, null);\n    animation.stop();\n    return animation;\n  }\n  _dispose() {}\n  /**\r\n   * Returns `true` if this element is disposed.\r\n   *\r\n   * @return Disposed\r\n   */\n  isDisposed() {\n    return this._disposed;\n  }\n  /**\r\n   * Disposes this object.\r\n   */\n  dispose() {\n    if (!this._disposed) {\n      this._disposed = true;\n      this._dispose();\n    }\n  }\n}\n/**\r\n * Base class.\r\n *\r\n * @important\r\n */\nexport class Entity extends Settings {\n  /**\r\n   * IMPORTANT! Do not instantiate this class via `new Class()` syntax.\r\n   *\r\n   * Use static method `Class.new()` instead.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @ignore\r\n   */\n  constructor(root, settings, isReal) {\n    let templates = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    super(settings);\n    Object.defineProperty(this, \"_root\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_user_id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    }); // for testing purposes\n    Object.defineProperty(this, \"states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new States(this)\n    });\n    Object.defineProperty(this, \"adapters\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Adapters(this)\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this._createEvents()\n    });\n    Object.defineProperty(this, \"_userPrivateProperties\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_dirty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_dirtyPrivate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // Templates for the themes\n    Object.defineProperty(this, \"_templates\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    // Internal templates which can be overridden by the user's templates\n    Object.defineProperty(this, \"_internalTemplates\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // Default themes which can be overridden by the user's themes\n    Object.defineProperty(this, \"_defaultThemes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    // Disposers for all of the templates\n    Object.defineProperty(this, \"_templateDisposers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"_disposers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    // Whether the template setup function should be run\n    Object.defineProperty(this, \"_runSetup\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"_disposerProperties\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n    this._root = root;\n    this._internalTemplates = templates;\n    if (settings.id) {\n      this._registerId(settings.id);\n    }\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   root      Root element\r\n   * @param   settings  Settings\r\n   * @param   template  Template\r\n   * @return            Instantiated object\r\n   */\n  static new(root, settings, template) {\n    const x = new this(root, settings, true);\n    x._template = template;\n    x._afterNew();\n    return x;\n  }\n  static _new(root, settings) {\n    let templates = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    const x = new this(root, settings, true, templates);\n    x._afterNew();\n    return x;\n  }\n  _afterNew() {\n    this._checkDirty();\n    let shouldApply = false;\n    const template = this._template;\n    if (template) {\n      shouldApply = true;\n      template._setObjectTemplate(this);\n    }\n    $array.each(this._internalTemplates, template => {\n      shouldApply = true;\n      template._setObjectTemplate(this);\n    });\n    if (shouldApply) {\n      this._applyTemplates(false);\n    }\n    this.states.create(\"default\", {});\n    this._setDefaults();\n  }\n  // This is the same as _afterNew, except it also applies the themes.\n  // This should only be used for classes which don't have a parent (because they extend from Entity and not Sprite).\n  _afterNewApplyThemes() {\n    this._checkDirty();\n    const template = this._template;\n    if (template) {\n      template._setObjectTemplate(this);\n    }\n    $array.each(this._internalTemplates, template => {\n      template._setObjectTemplate(this);\n    });\n    this.states.create(\"default\", {});\n    this._setDefaults();\n    this._applyThemes();\n  }\n  _createEvents() {\n    return new EventDispatcher();\n  }\n  /**\r\n   * @ignore\r\n   */\n  get classNames() {\n    return this.constructor.classNames;\n  }\n  /**\r\n   * @ignore\r\n   */\n  get className() {\n    return this.constructor.className;\n  }\n  _setDefaults() {}\n  _setDefault(key, value) {\n    if (!(key in this._settings)) {\n      super.set(key, value);\n    }\n  }\n  _setRawDefault(key, value) {\n    if (!(key in this._settings)) {\n      super.setRaw(key, value);\n    }\n  }\n  _clearDirty() {\n    $object.keys(this._dirty).forEach(key => {\n      this._dirty[key] = false;\n    });\n    $object.keys(this._dirtyPrivate).forEach(key => {\n      this._dirtyPrivate[key] = false;\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  isDirty(key) {\n    return !!this._dirty[key];\n  }\n  /**\r\n   * @ignore\r\n   */\n  isPrivateDirty(key) {\n    return !!this._dirtyPrivate[key];\n  }\n  _markDirtyKey(key) {\n    this._dirty[key] = true;\n    super._markDirtyKey(key);\n  }\n  _markDirtyPrivateKey(key) {\n    this._dirtyPrivate[key] = true;\n    super._markDirtyKey(key);\n  }\n  /**\r\n   * Checks if element is of certain class (or inherits one).\r\n   *\r\n   * @param   type  Class name to check\r\n   * @return {boolean} Is of class?\r\n   */\n  isType(type) {\n    return this.classNames.indexOf(type) !== -1;\n  }\n  _pushPropertyDisposer(key, disposer) {\n    let disposers = this._disposerProperties[key];\n    if (disposers === undefined) {\n      disposers = this._disposerProperties[key] = [];\n    }\n    disposers.push(disposer);\n    return disposer;\n  }\n  _disposeProperty(key) {\n    const disposers = this._disposerProperties[key];\n    if (disposers !== undefined) {\n      $array.each(disposers, disposer => {\n        disposer.dispose();\n      });\n      delete this._disposerProperties[key];\n    }\n  }\n  /**\r\n   * @todo needs description\r\n   * @param  value  Template\r\n   */\n  set template(value) {\n    const template = this._template;\n    if (template !== value) {\n      this._template = value;\n      if (template) {\n        template._removeObjectTemplate(this);\n      }\n      if (value) {\n        value._setObjectTemplate(this);\n      }\n      this._applyTemplates();\n    }\n  }\n  get template() {\n    return this._template;\n  }\n  /**\r\n   * @ignore\r\n   */\n  markDirty() {\n    this._root._addDirtyEntity(this);\n  }\n  _startAnimation() {\n    this._root._addAnimation(this);\n  }\n  _animationTime() {\n    return this._root.animationTime;\n  }\n  _applyState(_name) {}\n  _applyStateAnimated(_name, _duration) {}\n  get(key, fallback) {\n    const value = this.adapters.fold(key, this._settings[key]);\n    if (value !== undefined) {\n      return value;\n    } else {\n      return fallback;\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  isUserSetting(key) {\n    return this._userProperties[key] || false;\n  }\n  /**\r\n   * Sets a setting `value` for the specified `key`, and returns the same `value`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   * @param   value     Setting value\r\n   * @return            Setting value\r\n   */\n  set(key, value) {\n    this._userProperties[key] = true;\n    return super.set(key, value);\n  }\n  /**\r\n   * @ignore\r\n   */\n  setRaw(key, value) {\n    this._userProperties[key] = true;\n    super.setRaw(key, value);\n  }\n  /**\r\n   * Sets a setting `value` for the specified `key` only if the value for this key was not set previously using set method, and returns the same `value`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   * @param   value     Setting value\r\n   * @return            Setting value\r\n   */\n  _setSoft(key, value) {\n    if (!this._userProperties[key]) {\n      return super.set(key, value);\n    }\n    return value;\n  }\n  /**\r\n   * Removes a setting value for the specified `key`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   */\n  remove(key) {\n    delete this._userProperties[key];\n    this._removeTemplateProperty(key);\n  }\n  /**\r\n   * @ignore\r\n   */\n  setPrivate(key, value) {\n    this._userPrivateProperties[key] = true;\n    return super.setPrivate(key, value);\n  }\n  /**\r\n   * @ignore\r\n   */\n  setPrivateRaw(key, value) {\n    this._userPrivateProperties[key] = true;\n    super.setPrivateRaw(key, value);\n  }\n  /**\r\n   * @ignore\r\n   */\n  removePrivate(key) {\n    delete this._userPrivateProperties[key];\n    this._removeTemplatePrivateProperty(key);\n  }\n  _setTemplateProperty(template, key, value) {\n    if (!this._userProperties[key]) {\n      const match = this._findTemplateByKey(key);\n      if (template === match) {\n        super.set(key, value);\n      }\n    }\n  }\n  _setTemplatePrivateProperty(template, key, value) {\n    if (!this._userPrivateProperties[key]) {\n      const match = this._findTemplateByPrivateKey(key);\n      if (template === match) {\n        super.setPrivate(key, value);\n      }\n    }\n  }\n  _removeTemplateProperty(key) {\n    if (!this._userProperties[key]) {\n      const match = this._findTemplateByKey(key);\n      if (match) {\n        // TODO don't stop the animation if the property didn't change\n        super.set(key, match._settings[key]);\n      } else {\n        super.remove(key);\n      }\n    }\n  }\n  _removeTemplatePrivateProperty(key) {\n    if (!this._userPrivateProperties[key]) {\n      const match = this._findTemplateByPrivateKey(key);\n      if (match) {\n        // TODO don't stop the animation if the property didn't change\n        super.setPrivate(key, match._privateSettings[key]);\n      } else {\n        super.removePrivate(key);\n      }\n    }\n  }\n  _walkParents(f) {\n    f(this._root._rootContainer);\n    f(this);\n  }\n  // TODO faster version of this method which is specialized to just 1 key\n  _applyStateByKey(name) {\n    const other = this.states.create(name, {});\n    const seen = {};\n    this._eachTemplate(template => {\n      const state = template.states.lookup(name);\n      if (state) {\n        state._apply(other, seen);\n      }\n    });\n    $object.each(other._settings, key => {\n      if (!seen[key] && !other._userSettings[key]) {\n        other.remove(key);\n      }\n    });\n  }\n  _applyTemplate(template, state) {\n    this._templateDisposers.push(template._apply(this, state));\n    $object.each(template._settings, (key, value) => {\n      if (!state.settings[key] && !this._userProperties[key]) {\n        state.settings[key] = true;\n        super.set(key, value);\n      }\n    });\n    $object.each(template._privateSettings, (key, value) => {\n      if (!state.privateSettings[key] && !this._userPrivateProperties[key]) {\n        state.privateSettings[key] = true;\n        super.setPrivate(key, value);\n      }\n    });\n    if (this._runSetup && template.setup) {\n      this._runSetup = false;\n      template.setup(this);\n    }\n  }\n  /**\r\n   * Calls the closure with each template and returns the first template which is true\r\n   */\n  _findStaticTemplate(f) {\n    if (this._template) {\n      if (f(this._template)) {\n        return this._template;\n      }\n    }\n  }\n  _eachTemplate(f) {\n    this._findStaticTemplate(template => {\n      f(template);\n      return false;\n    });\n    // _internalTemplates is sorted with most specific to the right\n    $array.eachReverse(this._internalTemplates, f);\n    // _templates is sorted with most specific to the left\n    $array.each(this._templates, f);\n  }\n  _applyTemplates() {\n    let remove = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (remove) {\n      this._disposeTemplates();\n    }\n    const state = {\n      settings: {},\n      privateSettings: {},\n      states: {}\n    };\n    this._eachTemplate(template => {\n      this._applyTemplate(template, state);\n    });\n    if (remove) {\n      $object.each(this._settings, key => {\n        if (!this._userProperties[key] && !state.settings[key]) {\n          super.remove(key);\n        }\n      });\n      $object.each(this._privateSettings, key => {\n        if (!this._userPrivateProperties[key] && !state.privateSettings[key]) {\n          super.removePrivate(key);\n        }\n      });\n    }\n  }\n  _findTemplate(f) {\n    const value = this._findStaticTemplate(f);\n    if (value === undefined) {\n      // _internalTemplates is sorted with most specific to the right\n      const value = $array.findReverse(this._internalTemplates, f);\n      if (value === undefined) {\n        // _templates is sorted with most specific to the left\n        return $array.find(this._templates, f);\n      } else {\n        return value;\n      }\n    } else {\n      return value;\n    }\n  }\n  _findTemplateByKey(key) {\n    return this._findTemplate(template => {\n      return key in template._settings;\n    });\n  }\n  _findTemplateByPrivateKey(key) {\n    return this._findTemplate(template => {\n      return key in template._privateSettings;\n    });\n  }\n  _disposeTemplates() {\n    $array.each(this._templateDisposers, disposer => {\n      disposer.dispose();\n    });\n    this._templateDisposers.length = 0;\n  }\n  _removeTemplates() {\n    $array.each(this._templates, template => {\n      template._removeObjectTemplate(this);\n    });\n    this._templates.length = 0;\n  }\n  _applyThemes() {\n    let isConnected = false;\n    const defaults = [];\n    let themes = [];\n    const themeTags = new Set();\n    const tags = this.get(\"themeTagsSelf\");\n    if (tags) {\n      $array.each(tags, tag => {\n        themeTags.add(tag);\n      });\n    }\n    this._walkParents(entity => {\n      if (entity === this._root._rootContainer) {\n        isConnected = true;\n      }\n      if (entity._defaultThemes.length > 0) {\n        defaults.push(entity._defaultThemes);\n      }\n      const theme = entity.get(\"themes\");\n      if (theme) {\n        themes.push(theme);\n      }\n      const tags = entity.get(\"themeTags\");\n      if (tags) {\n        $array.each(tags, tag => {\n          themeTags.add(tag);\n        });\n      }\n    });\n    themes = defaults.concat(themes);\n    this._removeTemplates();\n    if (isConnected) {\n      $array.eachReverse(this.classNames, name => {\n        const allRules = [];\n        $array.each(themes, themes => {\n          $array.each(themes, theme => {\n            const rules = theme._lookupRules(name);\n            if (rules) {\n              $array.eachReverse(rules, rule => {\n                const matches = rule.tags.every(tag => {\n                  return themeTags.has(tag);\n                });\n                if (matches) {\n                  const result = $array.getFirstSortedIndex(allRules, x => {\n                    const order = $order.compare(rule.tags.length, x.tags.length);\n                    if (order === 0) {\n                      return $order.compareArray(rule.tags, x.tags, $order.compare);\n                    } else {\n                      return order;\n                    }\n                  });\n                  allRules.splice(result.index, 0, rule);\n                }\n              });\n            }\n          });\n        });\n        $array.each(allRules, rule => {\n          this._templates.push(rule.template);\n          rule.template._setObjectTemplate(this);\n        });\n      });\n    }\n    this._applyTemplates();\n    if (isConnected) {\n      // This causes it to only run the setup function the first time that the themes are applied\n      this._runSetup = false;\n    }\n    return isConnected;\n  }\n  _changed() {}\n  _beforeChanged() {\n    if (this.isDirty(\"id\")) {\n      const id = this.get(\"id\");\n      if (id) {\n        this._registerId(id);\n      }\n      const prevId = this._prevSettings.id;\n      if (prevId) {\n        delete registry.entitiesById[prevId];\n      }\n    }\n  }\n  _registerId(id) {\n    if (registry.entitiesById[id] && registry.entitiesById[id] !== this) {\n      throw new Error(\"An entity with id \\\"\" + id + \"\\\" already exists.\");\n    }\n    registry.entitiesById[id] = this;\n  }\n  _afterChanged() {}\n  /**\r\n   * @ignore\r\n   */\n  addDisposer(disposer) {\n    this._disposers.push(disposer);\n    return disposer;\n  }\n  _dispose() {\n    super._dispose();\n    const template = this._template;\n    if (template) {\n      template._removeObjectTemplate(this);\n    }\n    $array.each(this._internalTemplates, template => {\n      template._removeObjectTemplate(this);\n    });\n    this._removeTemplates();\n    this._disposeTemplates();\n    this.events.dispose();\n    this._disposers.forEach(x => {\n      x.dispose();\n    });\n    $object.each(this._disposerProperties, (_, disposers) => {\n      $array.each(disposers, disposer => {\n        disposer.dispose();\n      });\n    });\n    const id = this.get(\"id\");\n    if (id) {\n      delete registry.entitiesById[id];\n    }\n  }\n  /**\r\n   * Creates and returns a \"disposable\" timeout.\r\n   *\r\n   * @param   fn     Callback\r\n   * @param   delay  Delay in milliseconds\r\n   * @return         Timeout disposer\r\n   */\n  setTimeout(fn, delay) {\n    const id = setTimeout(() => {\n      this.removeDispose(disposer);\n      fn();\n    }, delay);\n    const disposer = new Disposer(() => {\n      clearTimeout(id);\n    });\n    this._disposers.push(disposer);\n    return disposer;\n  }\n  /**\r\n   * @ignore\r\n   */\n  removeDispose(target) {\n    if (!this.isDisposed()) {\n      let index = $array.indexOf(this._disposers, target);\n      if (index > -1) {\n        this._disposers.splice(index, 1);\n      }\n    }\n    target.dispose();\n  }\n  /**\r\n   * @ignore\r\n   */\n  hasTag(tag) {\n    return $array.indexOf(this.get(\"themeTags\", []), tag) !== -1;\n  }\n  /**\r\n   * @ignore\r\n   */\n  addTag(tag) {\n    if (!this.hasTag(tag)) {\n      const tags = this.get(\"themeTags\", []);\n      tags.push(tag);\n      this.set(\"themeTags\", tags);\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  removeTag(tag) {\n    if (this.hasTag(tag)) {\n      const tags = this.get(\"themeTags\", []);\n      $array.remove(tags, tag);\n      this.set(\"themeTags\", tags);\n    }\n  }\n  _t(text, locale) {\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key2 = 2; _key2 < _len; _key2++) {\n      rest[_key2 - 2] = arguments[_key2];\n    }\n    return this._root.language.translate(text, locale, ...rest);\n  }\n  /**\r\n   * An instance of [[Root]] object.\r\n   *\r\n   * @readonly\r\n   * @since 5.0.6\r\n   * @return Root object\r\n   */\n  get root() {\n    return this._root;\n  }\n}\nObject.defineProperty(Entity, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Entity\"\n});\nObject.defineProperty(Entity, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: [\"Entity\"]\n});","map":{"version":3,"names":["Disposer","EventDispatcher","getInterpolate","States","registry","$object","$ease","$array","$order","Adapters","constructor","entity","Object","defineProperty","_entity","add","key","callback","callbacks","_callbacks","undefined","push","_markDirtyKey","removeFirst","remove","length","enable","_disabled","disable","fold","value","i","len","Animation","animation","from","to","duration","easing","loops","startingTime","_animation","_from","_to","_duration","_easing","_loops","_interpolate","_oldTime","playing","_playing","stopped","_stopped","stop","events","isEnabled","dispatch","type","target","pause","play","_startAnimation","percentage","_time","waitForStop","Promise","resolve","_reject","listener","dispose","on","_checkEnded","_run","currentTime","_reset","_value","diff","counter","Settings","settings","_settings","_checkDirty","keys","forEach","_userProperties","resetUserSettings","_runAnimation","isDisposed","each","_animatingSettings","_stopAnimation","set","_set","_animatingPrivateSettings","_stopAnimationPrivate","setPrivate","_setPrivate","_key","markDirty","_markDirtyPrivateKey","_settingEvents","onPrivate","_privateSettingEvents","getRaw","fallback","get","_sendKeyEvent","_sendPrivateKeyEvent","_setRaw","old","_prevSettings","setRaw","removeAll","getPrivate","_privateSettings","_setPrivateRaw","_prevPrivateSettings","setPrivateRaw","removePrivate","setAll","animate","options","linear","_animationTime","animatePrivate","_dispose","_disposed","Entity","root","isReal","templates","arguments","_createEvents","Error","_root","_internalTemplates","id","_registerId","new","template","x","_template","_afterNew","_new","shouldApply","_setObjectTemplate","_applyTemplates","states","create","_setDefaults","_afterNewApplyThemes","_applyThemes","classNames","className","_setDefault","_setRawDefault","_clearDirty","_dirty","_dirtyPrivate","isDirty","isPrivateDirty","isType","indexOf","_pushPropertyDisposer","disposer","disposers","_disposerProperties","_disposeProperty","_removeObjectTemplate","_addDirtyEntity","_addAnimation","animationTime","_applyState","_name","_applyStateAnimated","adapters","isUserSetting","_setSoft","_removeTemplateProperty","_userPrivateProperties","_removeTemplatePrivateProperty","_setTemplateProperty","match","_findTemplateByKey","_setTemplatePrivateProperty","_findTemplateByPrivateKey","_walkParents","f","_rootContainer","_applyStateByKey","name","other","seen","_eachTemplate","state","lookup","_apply","_userSettings","_applyTemplate","_templateDisposers","privateSettings","_runSetup","setup","_findStaticTemplate","eachReverse","_templates","_disposeTemplates","_findTemplate","findReverse","find","_removeTemplates","isConnected","defaults","themes","themeTags","Set","tags","tag","_defaultThemes","theme","concat","allRules","rules","_lookupRules","rule","matches","every","has","result","getFirstSortedIndex","order","compare","compareArray","splice","index","_changed","_beforeChanged","prevId","entitiesById","_afterChanged","addDisposer","_disposers","_","setTimeout","fn","delay","removeDispose","clearTimeout","hasTag","addTag","removeTag","_t","text","locale","_len","rest","Array","_key2","language","translate"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\util\\Entity.ts"],"sourcesContent":["import type { Root } from \"../Root\";\nimport type { Template, ApplyState } from \"./Template\";\nimport type { Theme, IRule } from \"../Theme\";\nimport type { ILocale } from \"./Language\";\n\nimport { IDisposer, Disposer } from \"./Disposer\";\nimport { EventDispatcher, Events } from \"./EventDispatcher\";\nimport { Time, IAnimation, getInterpolate } from \"./Animation\";\nimport { States } from \"./States\";\nimport { registry } from \"../Registry\";\n\nimport * as $object from \"./Object\";\nimport * as $ease from \"./Ease\";\nimport * as $array from \"./Array\";\nimport * as $order from \"./Order\";\n\n/**\n * @ignore\n */\nexport type Dirty<A> = { [K in keyof A]?: boolean };\n\n\n/**\n * Allows to dynamically modify setting value of its target element.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info\n */\nexport class Adapters<E extends Settings> {\n\tprivate _entity: E;\n\tprivate _callbacks: { [K in keyof E[\"_settings\"]]?: Array<<O extends E>(value: O[\"_settings\"][K], target: O, key: K) => O[\"_settings\"][K]> } = {};\n\tprivate _disabled: { [K in keyof E[\"_settings\"]]?: boolean } = {};\n\n\tconstructor(entity: E) {\n\t\tthis._entity = entity;\n\t}\n\n\t/**\n\t * Add a function (`callback`) that will modify value for setting `key`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info\n\t */\n\tpublic add<Key extends keyof E[\"_settings\"]>(key: Key, callback: (value: E[\"_settings\"][Key], target: E, key: Key) => E[\"_settings\"][Key]): IDisposer {\n\t\tlet callbacks = this._callbacks[key];\n\n\t\tif (callbacks === undefined) {\n\t\t\tcallbacks = this._callbacks[key] = [];\n\t\t}\n\n\t\tcallbacks.push(callback);\n\n\t\tthis._entity._markDirtyKey(key);\n\n\t\treturn new Disposer(() => {\n\t\t\tif ($array.removeFirst(callbacks!, callback)) {\n\t\t\t\tthis._entity._markDirtyKey(key);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Removes all adapters for the specific key.\n\t *\n\t * @since 5.1.0\n\t */\n\tpublic remove<Key extends keyof E[\"_settings\"]>(key: Key) {\n\t\tconst callbacks = this._callbacks[key];\n\n\t\tif (callbacks !== undefined) {\n\t\t\tdelete this._callbacks[key];\n\n\t\t\tif (callbacks.length !== 0) {\n\t\t\t\tthis._entity._markDirtyKey(key);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Enables (previously disabled) adapters for specific key.\n\t *\n\t * @since 5.1.0\n\t */\n\tpublic enable<Key extends keyof E[\"_settings\"]>(key: Key) {\n\t\tif (this._disabled[key]) {\n\t\t\tdelete this._disabled[key];\n\t\t\tthis._entity._markDirtyKey(key);\n\t\t}\n\t}\n\n\t/**\n\t * Disables all adapters for specific key.\n\t *\n\t * @since 5.1.0\n\t */\n\tpublic disable<Key extends keyof E[\"_settings\"]>(key: Key) {\n\t\tif (!this._disabled[key]) {\n\t\t\tthis._disabled[key] = true;\n\t\t\tthis._entity._markDirtyKey(key);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic fold<Key extends keyof E[\"_settings\"]>(key: Key, value: E[\"_settings\"][Key]): E[\"_settings\"][Key] {\n\t\tif (!this._disabled[key]) {\n\t\t\tconst callbacks = this._callbacks[key];\n\n\t\t\tif (callbacks !== undefined) {\n\t\t\t\tfor (let i = 0, len = callbacks.length; i < len; ++i) {\n\t\t\t\t\tvalue = callbacks[i](value, this._entity, key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\n\nexport interface IEntitySettings {\n\n\t/**\n\t * Tags which can be used by the theme rules.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info\n\t */\n\tthemeTags?: Array<string>;\n\n\t/**\n\t * Tags which can be used by the theme rules.\n\t *\n\t * These tags only apply to this object, not any children.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info\n\t */\n\tthemeTagsSelf?: Array<string>;\n\n\t/**\n\t * A list of themes applied to the element.\n\t */\n\tthemes?: Array<Theme>;\n\n\n\t/**\n\t * Duration of transition from one state to another.\n\t */\n\tstateAnimationDuration?:number;\n\n\t/**\n\t * Easing of transition from one state to another.\n\t */\n\tstateAnimationEasing?:$ease.Easing;\n\n\t/**\n\t * A custom string ID for the element.\n\t *\n\t * If set, element can be looked up via `am5.registry.entitiesById`.\n\t *\n\t * Will raise error if an element with the same ID already exists.\n\t */\n\tid?: string;\n\n\t/**\n\t * A storage for any custom user data that needs to be associated with the\n\t * element.\n\t */\n\tuserData?: any;\n\n}\n\nexport interface IEntityPrivate {\n}\n\nexport interface IEntityEvents {\n}\n\n/**\n * Animation options.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/} for more info\n */\nexport interface AnimationOptions<Key, Value> {\n\n\t/**\n\t * A setting key to animate value for.\n\t */\n\tkey: Key,\n\n\t/**\n\t * Initial value to animate from. If not set, will use current value.\n\t */\n\tfrom?: Value;\n\n\t/**\n\t * Target value to animate to.\n\t */\n\tto: Value;\n\n\t/**\n\t * Animation duration in milliseconds.\n\t */\n\tduration: number;\n\n\t/**\n\t * Easing function. Defaults to linear.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Easing_functions} for more info\n\t */\n\teasing?: $ease.Easing;\n\n\t/**\n\t * How many times to play the animation. Defaults to 1.\n\t */\n\tloops?: number;\n}\n\nexport interface IAnimationEvents {\n\t/**\n\t * Invoked when animation was stopped, which happens in these situations:\n\t * 1. When the animation reached the end.\n\t * 2. When the `stop()` method is called.\n\t * 3. When a new animation starts for the same key.\n\t * 4. When calling `set` for the same key.\n\t */\n\tstopped: {};\n}\n\n/**\n * Animation object.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/} for more info\n */\nexport class Animation<Value> {\n\tprivate _animation: IStartAnimation;\n\tprivate _from: Value;\n\tprivate _to: Value;\n\tprivate _duration: number;\n\tprivate _easing: $ease.Easing;\n\tprivate _loops: number;\n\tprivate _interpolate: <A extends Value>(diff: Time, from: A, to: A) => A;\n\tprivate _oldTime: number | null;\n\tprivate _time: number = 0;\n\n\tpublic _stopped: boolean = false;\n\tpublic _playing: boolean = true;\n\n\tpublic events: EventDispatcher<Events<this, IAnimationEvents>> = new EventDispatcher();\n\n\tconstructor(animation: IStartAnimation, from: Value, to: Value, duration: number, easing: $ease.Easing, loops: number, startingTime: number | null) {\n\t\tthis._animation = animation;\n\t\tthis._from = from;\n\t\tthis._to = to;\n\t\tthis._duration = duration;\n\t\tthis._easing = easing;\n\t\tthis._loops = loops;\n\t\tthis._interpolate = getInterpolate(from, to);\n\t\tthis._oldTime = startingTime;\n\t}\n\n\tpublic get to() {\n\t\treturn this._to;\n\t}\n\n\tpublic get from() {\n\t\treturn this._from;\n\t}\n\n\tpublic get playing() {\n\t\treturn this._playing;\n\t}\n\n\tpublic get stopped() {\n\t\treturn this._stopped;\n\t}\n\n\tpublic stop(): void {\n\t\tif (!this._stopped) {\n\t\t\tthis._stopped = true;\n\t\t\tthis._playing = false;\n\n\t\t\tif (this.events.isEnabled(\"stopped\")) {\n\t\t\t\tthis.events.dispatch(\"stopped\", {\n\t\t\t\t\ttype: \"stopped\",\n\t\t\t\t\ttarget: this,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic pause(): void {\n\t\tthis._playing = false;\n\t\tthis._oldTime = null;\n\t}\n\n\tpublic play(): void {\n\t\tif (!this._stopped && !this._playing) {\n\t\t\tthis._playing = true;\n\t\t\tthis._animation._startAnimation();\n\t\t}\n\t}\n\n\tpublic get percentage(): Time {\n\t\treturn this._time / this._duration;\n\t}\n\n\tpublic waitForStop(): Promise<void> {\n\t\treturn new Promise((resolve, _reject) => {\n\t\t\tif (this._stopped) {\n\t\t\t\tresolve();\n\n\t\t\t} else {\n\t\t\t\tconst listener = () => {\n\t\t\t\t\tstopped.dispose();\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\n\t\t\t\tconst stopped = this.events.on(\"stopped\", listener);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic _checkEnded(): boolean {\n\t\tif (this._loops > 1) {\n\t\t\t--this._loops;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic _run(currentTime: number): void {\n\t\tif (this._oldTime !== null) {\n\t\t\tthis._time += currentTime - this._oldTime;\n\n\t\t\tif (this._time > this._duration) {\n\t\t\t\tthis._time = this._duration;\n\t\t\t}\n\t\t}\n\n\t\tthis._oldTime = currentTime;\n\t}\n\n\tpublic _reset(currentTime: number): void {\n\t\tthis._oldTime = currentTime;\n\t\tthis._time = 0;\n\t}\n\n\tpublic _value(diff: Time): Value {\n\t\treturn this._interpolate(this._easing(diff), this._from, this._to);\n\t}\n}\n\ntype Animated<P> = { [K in keyof P]?: Animation<P[K]> };\n\n\ninterface IStartAnimation {\n\t_startAnimation(): void;\n}\n\n\n/**\n * @ignore\n */\nlet counter = 0;\n\n/**\n * Base class for [[Entity]] objects that support Settings.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n */\nexport abstract class Settings implements IDisposer, IAnimation, IStartAnimation {\n\n\t/**\n\t * Unique ID.\n\t */\n\tpublic uid: number = ++counter;\n\n\tpublic _settings: {};\n\tpublic _privateSettings: {} = {};\n\n\tpublic _settingEvents: { [K in keyof this[\"_settings\"]]?: Array<<V extends this[\"_settings\"][K], O extends this>(value: V, target?: O, key?: K) => void> } = {};\n\tpublic _privateSettingEvents: { [K in keyof this[\"_settings\"]]?: Array<<V extends this[\"_settings\"][K], O extends this>(value: V, target?: O, key?: K) => void> } = {};\n\n\tpublic _prevSettings: this[\"_settings\"] = {};\n\tpublic _prevPrivateSettings: this[\"_privateSettings\"] = {};\n\n\tprotected _animatingSettings: Animated<this[\"_settings\"]> = {};\n\tprotected _animatingPrivateSettings: Animated<this[\"_privateSettings\"]> = {};\n\n\tprivate _disposed: boolean = false;\n\n\t// TODO move this into Entity\n\tprotected _userProperties: Dirty<this[\"_settings\"]> = {};\n\n\tconstructor(settings: Settings[\"_settings\"]) {\n\t\tthis._settings = settings;\n\t}\n\n\tprotected _checkDirty(): void {\n\t\t$object.keys(this._settings).forEach((key) => {\n\t\t\t(this._userProperties as any)[key] = true;\n\t\t\tthis._markDirtyKey(key);\n\t\t});\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic resetUserSettings(){\n\t\tthis._userProperties = {};\n\t}\t\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract markDirty(): void;\n\n\tpublic _runAnimation(currentTime: number): boolean {\n\t\tif (!this.isDisposed()) {\n\t\t\tlet playing = false;\n\n\t\t\t$object.each(this._animatingSettings, (key, animation) => {\n\t\t\t\tif (animation._stopped) {\n\t\t\t\t\tthis._stopAnimation(key);\n\n\t\t\t\t} else if (animation._playing) {\n\t\t\t\t\tanimation._run(currentTime);\n\n\t\t\t\t\tconst diff = animation.percentage;\n\n\t\t\t\t\tif (diff >= 1) {\n\t\t\t\t\t\tif (animation._checkEnded()) {\n\t\t\t\t\t\t\tthis.set(key, animation._value(1));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tplaying = true;\n\t\t\t\t\t\t\tanimation._reset(currentTime);\n\t\t\t\t\t\t\tthis._set(key, animation._value(1));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tplaying = true;\n\t\t\t\t\t\tthis._set(key, animation._value(diff));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$object.each(this._animatingPrivateSettings, (key, animation) => {\n\t\t\t\tif (animation._stopped) {\n\t\t\t\t\tthis._stopAnimationPrivate(key);\n\n\t\t\t\t} else if (animation._playing) {\n\t\t\t\t\tanimation._run(currentTime);\n\n\t\t\t\t\tconst diff = animation.percentage;\n\n\t\t\t\t\tif (diff >= 1) {\n\t\t\t\t\t\tif (animation._checkEnded()) {\n\t\t\t\t\t\t\tthis.setPrivate(key, animation._value(1));\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tplaying = true;\n\t\t\t\t\t\t\tanimation._reset(currentTime);\n\t\t\t\t\t\t\tthis._setPrivate(key, animation._value(1));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tplaying = true;\n\t\t\t\t\t\tthis._setPrivate(key, animation._value(diff));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn playing;\n\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic abstract _startAnimation(): void;\n\tprotected abstract _animationTime(): number | null;\n\n\tpublic _markDirtyKey<Key extends keyof this[\"_settings\"]>(_key: Key) {\n\t\tthis.markDirty();\n\t}\n\n\tpublic _markDirtyPrivateKey<Key extends keyof this[\"_privateSettings\"]>(_key: Key) {\n\t\tthis.markDirty();\n\t}\n\n\t/**\n\t * Sets a callback function to invoke when specific key of settings changes\n\t * or is set.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info\n\t * @param   key       Settings key\n\t * @param   callback  Callback\n\t * @return            Disposer for event\n\t */\n\tpublic on<Key extends keyof this[\"_settings\"]>(key: Key, callback: (value: this[\"_settings\"][Key], target?: this, key?: Key) => void): IDisposer {\n\t\tlet events = this._settingEvents[key];\n\n\t\tif (events === undefined) {\n\t\t\tevents = this._settingEvents[key] = [];\n\t\t}\n\n\t\tevents.push(callback);\n\n\t\treturn new Disposer(() => {\n\t\t\t$array.removeFirst(events!, callback);\n\n\t\t\tif (events!.length === 0) {\n\t\t\t\tdelete this._settingEvents[key];\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Sets a callback function to invoke when specific key of private settings\n\t * changes or is set.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info\n\t * @ignore\n\t * @param   key       Private settings key\n\t * @param   callback  Callback\n\t * @return            Disposer for event\n\t */\n\tpublic onPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key, callback: (value: this[\"_privateSettings\"][Key], target?: this, key?: Key) => void): IDisposer {\n\t\tlet events = this._privateSettingEvents[key];\n\n\t\tif (events === undefined) {\n\t\t\tevents = this._privateSettingEvents[key] = [];\n\t\t}\n\n\t\tevents.push(callback);\n\n\t\treturn new Disposer(() => {\n\t\t\t$array.removeFirst(events!, callback);\n\n\t\t\tif (events!.length === 0) {\n\t\t\t\tdelete this._privateSettingEvents[key];\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getRaw<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getRaw<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getRaw<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = (<any>this._settings)[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\t/**\n\t * Returns settings value for the specified `key`.\n\t *\n\t * If there is no value, `fallback` is returned instead (if set).\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Settings value\n\t * @param   callback  Fallback value\n\t * @return  {any}     Value\n\t */\n\tpublic get<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\treturn this.getRaw(key, fallback);\n\t}\n\n\tprotected _sendKeyEvent<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value): void {\n\t\tconst events = this._settingEvents[key];\n\n\t\tif (events !== undefined) {\n\t\t\t$array.each(events!, (callback) => {\n\t\t\t\tcallback(value, this, key);\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _sendPrivateKeyEvent<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value): void {\n\t\tconst events = this._privateSettingEvents[key];\n\n\t\tif (events !== undefined) {\n\t\t\t$array.each(events!, (callback) => {\n\t\t\t\tcallback(value, this, key);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprivate _setRaw<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, old: Value, value: Value) {\n\t\tthis._prevSettings[key] = old;\n\t\tthis._sendKeyEvent(key, value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setRaw<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value) {\n\t\tconst old = (<any>this._settings)[key];\n\n\t\t(<any>this._settings)[key] = value;\n\n\t\tif (old !== value) {\n\t\t\tthis._setRaw(key, old, value);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprivate _set<Key extends keyof this[\"_settings\"]>(key: Key, value: this[\"_settings\"][Key]) {\n\t\tconst old = (<any>this._settings)[key];\n\n\t\t(<any>this._settings)[key] = value;\n\n\t\tif (old !== value) {\n\t\t\tthis._setRaw(key, old, value);\n\t\t\tthis._markDirtyKey(key);\n\t\t}\n\t}\n\n\n\tprotected _stopAnimation<Key extends keyof this[\"_settings\"]>(key: Key): void {\n\t\tconst animation = this._animatingSettings[key];\n\n\t\tif (animation) {\n\t\t\tdelete this._animatingSettings[key];\n\t\t\tanimation.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Sets a setting `value` for the specified `key`, and returns the same `value`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t * @param   value     Setting value\n\t * @return            Setting value\n\t */\n\tpublic set<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value): Value {\n\t\tthis._set(key, value);\n\t\tthis._stopAnimation(key);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Removes a setting value for the specified `key`;\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t */\n\tpublic remove<Key extends keyof this[\"_settings\"]>(key: Key): void {\n\t\tif (key in this._settings) {\n\t\t\tthis._prevSettings[key] = (<any>this._settings)[key];\n\n\t\t\tdelete (<any>this._settings)[key];\n\n\t\t\tthis._sendKeyEvent(key, undefined as any);\n\t\t\tthis._markDirtyKey(key);\n\t\t}\n\n\t\tthis._stopAnimation(key);\n\t}\n\n\t/**\n\t * Removes all keys;\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t */\n\tpublic removeAll(): void {\n\t\t$array.each($object.keys(this._settings), (key) => {\n\t\t\tthis.remove(key);\n\t\t});\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getPrivate<Key extends keyof this[\"_privateSettings\"], F>(key: Key, fallback: F): NonNullable<this[\"_privateSettings\"][Key]> | F;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key): this[\"_privateSettings\"][Key];\n\n\t/**\n\t * Returns a value of a private setting.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/#Private_settings} for more info\n\t */\n\tpublic getPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = (<any>this._privateSettings)[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprivate _setPrivateRaw<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, old: Value, value: Value) {\n\t\tthis._prevPrivateSettings[key] = old;\n\t\tthis._sendPrivateKeyEvent(key, value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setPrivateRaw<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, value: Value) {\n\t\tconst old = (<any>this._privateSettings)[key];\n\n\t\t(<any>this._privateSettings)[key] = value;\n\n\t\tif (old !== value) {\n\t\t\tthis._setPrivateRaw(key, old, value);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprivate _setPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key, value: this[\"_privateSettings\"][Key]) {\n\t\tconst old = (<any>this._privateSettings)[key];\n\n\t\t(<any>this._privateSettings)[key] = value;\n\n\t\tif (old !== value) {\n\t\t\tthis._setPrivateRaw(key, old, value);\n\t\t\tthis._markDirtyPrivateKey(key);\n\t\t}\n\t}\n\n\tprotected _stopAnimationPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key): void {\n\t\tconst animation = this._animatingPrivateSettings[key];\n\n\t\tif (animation) {\n\t\t\tanimation.stop();\n\t\t\tdelete this._animatingPrivateSettings[key];\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setPrivate<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, value: Value): Value {\n\t\tthis._setPrivate(key, value);\n\t\tthis._stopAnimationPrivate(key);\n\t\treturn value;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic removePrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key): void {\n\t\tif (key in this._privateSettings) {\n\t\t\tthis._prevPrivateSettings[key] = (<any>this._privateSettings)[key];\n\n\t\t\tdelete (<any>this._privateSettings)[key];\n\n\t\t\tthis._markDirtyPrivateKey(key);\n\t\t}\n\n\t\tthis._stopAnimationPrivate(key);\n\t}\n\n\t/**\n\t * Sets multiple settings at once.\n\t *\n\t * `settings` must be an object with key: value pairs.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param settings Settings\n\t */\n\tpublic setAll(settings: Partial<this[\"_settings\"]>) {\n\t\t$object.each(settings, (key, value) => {\n\t\t\tthis.set(key, value);\n\t\t});\n\t}\n\n\t/**\n\t * Animates setting values from current/start values to new ones.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animating_settings} for more info\n\t * @param   options  Animation options\n\t * @return           Animation object\n\t */\n\tpublic animate<Key extends keyof this[\"_settings\"]>(options: AnimationOptions<Key, this[\"_settings\"][Key]>): Animation<this[\"_settings\"][Key]> {\n\t\tconst key = options.key;\n\t\tconst to = options.to;\n\t\tconst duration = options.duration || 0;\n\t\tconst loops = options.loops || 1;\n\n\t\tconst from = (options.from === undefined ? this.get(key) : options.from);\n\t\tconst easing = (options.easing === undefined ? $ease.linear : options.easing);\n\n\t\tif (duration === 0) {\n\t\t\tthis.set(key, to);\n\n\t\t} else {\n\t\t\tif (from === undefined || from === to) {\n\t\t\t\tthis.set(key, to);\n\n\t\t\t} else {\n\t\t\t\tthis.set(key, from);\n\n\t\t\t\tconst animation = this._animatingSettings[key] = new Animation(this, from, to, duration, easing, loops, this._animationTime());\n\n\t\t\t\tthis._startAnimation();\n\n\t\t\t\treturn animation;\n\t\t\t}\n\t\t}\n\n\t\tconst animation = new Animation(this, from, to, duration, easing, loops, null);\n\t\tanimation.stop();\n\t\treturn animation;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic animatePrivate<Key extends keyof this[\"_privateSettings\"]>(options: AnimationOptions<Key, this[\"_privateSettings\"][Key]>): Animation<this[\"_privateSettings\"][Key]> {\n\t\tconst key = options.key;\n\t\tconst to = options.to;\n\t\tconst duration = options.duration || 0;\n\t\tconst loops = options.loops || 1;\n\n\t\tconst from = (options.from === undefined ? this.getPrivate(key) : options.from);\n\t\tconst easing = (options.easing === undefined ? $ease.linear : options.easing);\n\n\t\tif (duration === 0) {\n\t\t\tthis.setPrivate(key, to);\n\n\t\t} else {\n\t\t\tif (from === undefined || from === to) {\n\t\t\t\tthis.setPrivate(key, to);\n\n\t\t\t} else {\n\t\t\t\tthis.setPrivate(key, from);\n\n\t\t\t\tconst animation = this._animatingPrivateSettings[key] = new Animation(this, from, to, duration, easing, loops, this._animationTime());\n\n\t\t\t\tthis._startAnimation();\n\n\t\t\t\treturn animation;\n\t\t\t}\n\t\t}\n\n\t\tconst animation = new Animation(this, from, to, duration, easing, loops, null);\n\t\tanimation.stop();\n\t\treturn animation;\n\t}\n\n\tprotected _dispose() {}\n\n\t/**\n\t * Returns `true` if this element is disposed.\n\t *\n\t * @return Disposed\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Disposes this object.\n\t */\n\tpublic dispose() {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._dispose();\n\t\t}\n\t}\n}\n\n/**\n * Base class.\n *\n * @important\n */\nexport class Entity extends Settings implements IDisposer {\n\tpublic _root: Root;\n\n\tpublic _user_id:any; // for testing purposes\n\n\tdeclare public _settings: IEntitySettings;\n\tdeclare public _privateSettings: IEntityPrivate;\n\tdeclare public _events: IEntityEvents;\n\n\tpublic states: States<this> = new States(this);\n\tpublic adapters: Adapters<this> = new Adapters(this);\n\tpublic events: EventDispatcher<Events<this, this[\"_events\"]>> = this._createEvents();\n\n\tprotected _userPrivateProperties: Dirty<this[\"_privateSettings\"]> = {};\n\n\tpublic _dirty: Dirty<this[\"_settings\"]> = {};\n\tpublic _dirtyPrivate: Dirty<this[\"_privateSettings\"]> = {};\n\n\tprotected _template: Template<this> | undefined;\n\n\t// Templates for the themes\n\tprotected _templates: Array<Template<this>> = [];\n\n\t// Internal templates which can be overridden by the user's templates\n\tprotected _internalTemplates: Array<Template<this>>;\n\n\t// Default themes which can be overridden by the user's themes\n\tpublic _defaultThemes: Array<Theme> = [];\n\n\t// Disposers for all of the templates\n\tprotected _templateDisposers: Array<IDisposer> = [];\n\n\tprotected _disposers: Array<IDisposer> = [];\n\n\t// Whether the template setup function should be run\n\tprotected _runSetup: boolean = true;\n\n\tpublic static className: string = \"Entity\";\n\tpublic static classNames: Array<string> = [\"Entity\"];\n\n\tprotected _disposerProperties: { [Key in keyof this[\"_settings\"]]?: Array<IDisposer> } = {};\n\n\t/**\n\t * IMPORTANT! Do not instantiate this class via `new Class()` syntax.\n\t *\n\t * Use static method `Class.new()` instead.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n\t * @ignore\n\t */\n\tconstructor(root: Root, settings: Entity[\"_settings\"], isReal: boolean, templates: Array<Template<Entity>> = []) {\n\t\tsuper(settings);\n\t\tif (!isReal) {\n\t\t\tthrow new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n\t\t}\n\t\tthis._root = root;\n\t\tthis._internalTemplates = templates as Array<Template<this>>;\n\n\t\tif (settings.id) {\n\t\t\tthis._registerId(settings.id);\n\t\t}\n\t}\n\n\t/**\n\t * Use this method to create an instance of this class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n\t * @param   root      Root element\n\t * @param   settings  Settings\n\t * @param   template  Template\n\t * @return            Instantiated object\n\t */\n\tstatic new<C extends typeof Entity, T extends InstanceType<C>>(this: C, root: Root, settings: T[\"_settings\"], template?: Template<T>): T {\n\t\tconst x = (new this(root, settings, true)) as T;\n\t\tx._template = template;\n\t\tx._afterNew();\n\t\treturn x;\n\t}\n\n\tstatic _new<C extends typeof Entity, T extends InstanceType<C>>(this: C, root: Root, settings: T[\"_settings\"], templates: Array<Template<T>> = []): T {\n\t\tconst x = (new this(root, settings, true, templates)) as T;\n\t\tx._afterNew();\n\t\treturn x;\n\t}\n\n\tprotected _afterNew() {\n\t\tthis._checkDirty();\n\n\t\tlet shouldApply = false;\n\n\t\tconst template = this._template;\n\n\t\tif (template) {\n\t\t\tshouldApply = true;\n\t\t\ttemplate._setObjectTemplate(this);\n\t\t}\n\n\t\t$array.each(this._internalTemplates, (template) => {\n\t\t\tshouldApply = true;\n\t\t\ttemplate._setObjectTemplate(this);\n\t\t});\n\n\t\tif (shouldApply) {\n\t\t\tthis._applyTemplates(false);\n\t\t}\n\n\t\tthis.states.create(\"default\", {});\n\n\t\tthis._setDefaults();\n\t}\n\n\t// This is the same as _afterNew, except it also applies the themes.\n\t// This should only be used for classes which don't have a parent (because they extend from Entity and not Sprite).\n\tprotected _afterNewApplyThemes() {\n\t\tthis._checkDirty();\n\n\t\tconst template = this._template;\n\n\t\tif (template) {\n\t\t\ttemplate._setObjectTemplate(this);\n\t\t}\n\n\t\t$array.each(this._internalTemplates, (template) => {\n\t\t\ttemplate._setObjectTemplate(this);\n\t\t});\n\n\t\tthis.states.create(\"default\", {});\n\n\t\tthis._setDefaults();\n\n\t\tthis._applyThemes();\n\t}\n\n\tprotected _createEvents(): EventDispatcher<Events<this, this[\"_events\"]>> {\n\t\treturn new EventDispatcher();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic get classNames(): Array<string> {\n\t\treturn (this.constructor as any).classNames;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic get className(): string {\n\t\treturn (this.constructor as any).className;\n\t}\n\n\tprotected _setDefaults(){\n\n\t}\n\n\tpublic _setDefault<Key extends keyof this[\"_settings\"]>(key: Key, value: this[\"_settings\"][Key]) {\n\t\tif (!(key in this._settings)) {\n\t\t\tsuper.set(key, value);\n\t\t}\n\t}\n\n\tpublic _setRawDefault<Key extends keyof this[\"_settings\"]>(key: Key, value: this[\"_settings\"][Key]) {\n\t\tif (!(key in this._settings)) {\n\t\t\tsuper.setRaw(key, value);\n\t\t}\n\t}\n\n\tpublic _clearDirty() {\n\t\t$object.keys(this._dirty).forEach((key) => {\n\t\t\tthis._dirty[key] = false;\n\t\t});\n\n\t\t$object.keys(this._dirtyPrivate).forEach((key) => {\n\t\t\tthis._dirtyPrivate[key] = false;\n\t\t});\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic isDirty<Key extends keyof this[\"_settings\"]>(key: Key): boolean {\n\t\treturn !!this._dirty[key];\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic isPrivateDirty<Key extends keyof this[\"_privateSettings\"]>(key: Key): boolean {\n\t\treturn !!this._dirtyPrivate[key];\n\t}\n\n\tpublic _markDirtyKey<Key extends keyof this[\"_settings\"]>(key: Key) {\n\t\tthis._dirty[key] = true;\n\t\tsuper._markDirtyKey(key);\n\t}\n\n\tpublic _markDirtyPrivateKey<Key extends keyof this[\"_privateSettings\"]>(key: Key) {\n\t\tthis._dirtyPrivate[key] = true;\n\t\tsuper._markDirtyKey(key);\n\t}\n\n\t/**\n\t * Checks if element is of certain class (or inherits one).\n\t *\n\t * @param   type  Class name to check\n\t * @return {boolean} Is of class?\n\t */\n\tpublic isType<A>(type: string): this is A {\n\t\treturn this.classNames.indexOf(type) !== -1;\n\t}\n\n\tprotected _pushPropertyDisposer<Key extends keyof this[\"_settings\"], D extends IDisposer>(key: Key, disposer: D): D {\n\t\tlet disposers = this._disposerProperties[key];\n\n\t\tif (disposers === undefined) {\n\t\t\tdisposers = this._disposerProperties[key] = [];\n\t\t}\n\n\t\tdisposers.push(disposer);\n\n\t\treturn disposer;\n\t}\n\n\tprotected _disposeProperty<Key extends keyof this[\"_settings\"]>(key: Key): void {\n\t\tconst disposers = this._disposerProperties[key];\n\n\t\tif (disposers !== undefined) {\n\t\t\t$array.each(disposers!, (disposer) => {\n\t\t\t\tdisposer.dispose();\n\t\t\t});\n\n\t\t\tdelete this._disposerProperties[key];\n\t\t}\n\t}\n\n\t/**\n\t * @todo needs description\n\t * @param  value  Template\n\t */\n\tpublic set template(value: Template<this> | undefined) {\n\t\tconst template = this._template;\n\n\t\tif (template !== value) {\n\t\t\tthis._template = value;\n\n\t\t\tif (template) {\n\t\t\t\ttemplate._removeObjectTemplate(this);\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tvalue._setObjectTemplate(this);\n\t\t\t}\n\n\t\t\tthis._applyTemplates();\n\t\t}\n\t}\n\n\tpublic get template(): Template<this> | undefined {\n\t\treturn this._template;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirty() {\n\t\tthis._root._addDirtyEntity(this);\n\t}\n\n\tpublic _startAnimation(): void {\n\t\tthis._root._addAnimation(this);\n\t}\n\n\tprotected _animationTime(): number | null {\n\t\treturn this._root.animationTime;\n\t}\n\n\tpublic _applyState(_name: string): void { }\n\tpublic _applyStateAnimated(_name: string, _duration?: number): void { }\n\n\t/**\n\t * Returns settings value for the specified `key`.\n\t *\n\t * If there is no value, `fallback` is returned instead (if set).\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Settings value\n\t * @param   callback  Fallback value\n\t * @return            Value\n\t */\n\tpublic get<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = this.adapters.fold(key, (<any>this._settings)[key]);\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic isUserSetting<Key extends keyof this[\"_settings\"]>(key: Key): boolean {\n\t\treturn this._userProperties[key] || false;\n\t}\n\n\t/**\n\t * Sets a setting `value` for the specified `key`, and returns the same `value`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t * @param   value     Setting value\n\t * @return            Setting value\n\t */\n\tpublic set<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value): Value {\n\t\tthis._userProperties[key] = true;\n\t\treturn super.set(key, value);\n\t}\n\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setRaw<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value) {\n\t\tthis._userProperties[key] = true;\n\t\tsuper.setRaw(key, value);\n\t}\n\n\t/**\n\t * Sets a setting `value` for the specified `key` only if the value for this key was not set previously using set method, and returns the same `value`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t * @param   value     Setting value\n\t * @return            Setting value\n\t */\n\tpublic _setSoft<Key extends keyof this[\"_settings\"], Value extends this[\"_settings\"][Key]>(key: Key, value: Value): Value {\n\t\tif(!this._userProperties[key]){\n\t\t\treturn super.set(key, value);\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Removes a setting value for the specified `key`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t */\n\tpublic remove<Key extends keyof this[\"_settings\"]>(key: Key) {\n\t\tdelete this._userProperties[key];\n\t\tthis._removeTemplateProperty(key);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setPrivate<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, value: Value): Value {\n\t\tthis._userPrivateProperties[key] = true;\n\t\treturn super.setPrivate(key, value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setPrivateRaw<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, value: Value) {\n\t\tthis._userPrivateProperties[key] = true;\n\t\tsuper.setPrivateRaw(key, value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic removePrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key) {\n\t\tdelete this._userPrivateProperties[key];\n\t\tthis._removeTemplatePrivateProperty(key);\n\t}\n\n\tpublic _setTemplateProperty<Key extends keyof this[\"_settings\"]>(template: Template<this>, key: Key, value: this[\"_settings\"][Key]) {\n\t\tif (!this._userProperties[key]) {\n\t\t\tconst match = this._findTemplateByKey(key);\n\n\t\t\tif (template === match) {\n\t\t\t\tsuper.set(key, value);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _setTemplatePrivateProperty<Key extends keyof this[\"_privateSettings\"]>(template: Template<this>, key: Key, value: this[\"_privateSettings\"][Key]) {\n\t\tif (!this._userPrivateProperties[key]) {\n\t\t\tconst match = this._findTemplateByPrivateKey(key);\n\n\t\t\tif (template === match) {\n\t\t\t\tsuper.setPrivate(key, value);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _removeTemplateProperty<Key extends keyof this[\"_settings\"]>(key: Key) {\n\t\tif (!this._userProperties[key]) {\n\t\t\tconst match = this._findTemplateByKey(key);\n\n\t\t\tif (match) {\n\t\t\t\t// TODO don't stop the animation if the property didn't change\n\t\t\t\tsuper.set(key, match._settings[key]!);\n\n\t\t\t} else {\n\t\t\t\tsuper.remove(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _removeTemplatePrivateProperty<Key extends keyof this[\"_privateSettings\"]>(key: Key) {\n\t\tif (!this._userPrivateProperties[key]) {\n\t\t\tconst match = this._findTemplateByPrivateKey(key);\n\n\t\t\tif (match) {\n\t\t\t\t// TODO don't stop the animation if the property didn't change\n\t\t\t\tsuper.setPrivate(key, match._privateSettings[key]);\n\n\t\t\t} else {\n\t\t\t\tsuper.removePrivate(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _walkParents(f: (parent: Entity) => void): void {\n\t\tf(this._root._rootContainer);\n\t\tf(this);\n\t}\n\n\t// TODO faster version of this method which is specialized to just 1 key\n\tpublic _applyStateByKey(name: string): void {\n\t\tconst other = this.states.create(name, {});\n\t\tconst seen: Dirty<this[\"_settings\"]> = {};\n\n\t\tthis._eachTemplate((template) => {\n\t\t\tconst state = template.states.lookup(name);\n\n\t\t\tif (state) {\n\t\t\t\tstate._apply(other, seen);\n\t\t\t}\n\t\t});\n\n\t\t$object.each(other._settings, (key) => {\n\t\t\tif (!seen[key] && !other._userSettings[key]) {\n\t\t\t\tother.remove(key);\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _applyTemplate(template: Template<this>, state: ApplyState<this>): void {\n\t\tthis._templateDisposers.push(template._apply(this, state));\n\n\t\t$object.each(template._settings, (key, value) => {\n\t\t\tif (!state.settings[key] && !this._userProperties[key]) {\n\t\t\t\tstate.settings[key] = true;\n\t\t\t\tsuper.set(key, value);\n\t\t\t}\n\t\t});\n\n\t\t$object.each(template._privateSettings, (key, value) => {\n\t\t\tif (!state.privateSettings[key] && !this._userPrivateProperties[key]) {\n\t\t\t\tstate.privateSettings[key] = true;\n\t\t\t\tsuper.setPrivate(key, value);\n\t\t\t}\n\t\t});\n\n\t\tif (this._runSetup && template.setup) {\n\t\t\tthis._runSetup = false;\n\t\t\ttemplate.setup(this);\n\t\t}\n\t}\n\n\t/**\n\t * Calls the closure with each template and returns the first template which is true\n\t */\n\tprotected _findStaticTemplate(f: (template: Template<this>) => boolean): Template<this> | undefined {\n\t\tif (this._template) {\n\t\t\tif (f(this._template)) {\n\t\t\t\treturn this._template;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _eachTemplate(f: (template: Template<this>) => void): void {\n\t\tthis._findStaticTemplate((template) => {\n\t\t\tf(template);\n\t\t\treturn false;\n\t\t});\n\n\t\t// _internalTemplates is sorted with most specific to the right\n\t\t$array.eachReverse(this._internalTemplates, f);\n\n\t\t// _templates is sorted with most specific to the left\n\t\t$array.each(this._templates, f);\n\t}\n\n\tpublic _applyTemplates(remove: boolean = true): void {\n\t\tif (remove) {\n\t\t\tthis._disposeTemplates();\n\t\t}\n\n\t\tconst state: ApplyState<this> = {\n\t\t\tsettings: {},\n\t\t\tprivateSettings: {},\n\t\t\tstates: {},\n\t\t};\n\n\t\tthis._eachTemplate((template) => {\n\t\t\tthis._applyTemplate(template, state);\n\t\t});\n\n\t\tif (remove) {\n\t\t\t$object.each(this._settings, (key) => {\n\t\t\t\tif (!this._userProperties[key] && !state.settings[key]) {\n\t\t\t\t\tsuper.remove(key);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$object.each(this._privateSettings, (key) => {\n\t\t\t\tif (!this._userPrivateProperties[key] && !state.privateSettings[key]) {\n\t\t\t\t\tsuper.removePrivate(key);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _findTemplate(f: (template: Template<this>) => boolean): Template<this> | undefined {\n\t\tconst value = this._findStaticTemplate(f);\n\n\t\tif (value === undefined) {\n\t\t\t// _internalTemplates is sorted with most specific to the right\n\t\t\tconst value = $array.findReverse(this._internalTemplates, f);\n\n\t\t\tif (value === undefined) {\n\t\t\t\t// _templates is sorted with most specific to the left\n\t\t\t\treturn $array.find(this._templates, f);\n\n\t\t\t} else {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\tprotected _findTemplateByKey<Key extends keyof this[\"_settings\"]>(key: Key): Template<this> | undefined {\n\t\treturn this._findTemplate((template) => {\n\t\t\treturn key in template._settings;\n\t\t});\n\t}\n\n\tprotected _findTemplateByPrivateKey<Key extends keyof this[\"_privateSettings\"]>(key: Key): Template<this> | undefined {\n\t\treturn this._findTemplate((template) => {\n\t\t\treturn key in template._privateSettings;\n\t\t});\n\t}\n\n\tprotected _disposeTemplates() {\n\t\t$array.each(this._templateDisposers, (disposer) => {\n\t\t\tdisposer.dispose();\n\t\t});\n\n\t\tthis._templateDisposers.length = 0;\n\t}\n\n\tprotected _removeTemplates() {\n\t\t$array.each(this._templates, (template) => {\n\t\t\ttemplate._removeObjectTemplate(this);\n\t\t});\n\n\t\tthis._templates.length = 0;\n\t}\n\n\tpublic _applyThemes(): boolean {\n\t\tlet isConnected = false;\n\n\t\tconst defaults: Array<Array<Theme>> = [];\n\n\t\tlet themes: Array<Array<Theme>> = [];\n\n\t\tconst themeTags: Set<string> = new Set();\n\n\t\tconst tags = this.get(\"themeTagsSelf\");\n\n\t\tif (tags) {\n\t\t\t$array.each(tags, (tag) => {\n\t\t\t\tthemeTags.add(tag);\n\t\t\t});\n\t\t}\n\n\t\tthis._walkParents((entity) => {\n\t\t\tif (entity === this._root._rootContainer) {\n\t\t\t\tisConnected = true;\n\t\t\t}\n\n\t\t\tif (entity._defaultThemes.length > 0) {\n\t\t\t\tdefaults.push(entity._defaultThemes);\n\t\t\t}\n\n\t\t\tconst theme = entity.get(\"themes\");\n\n\t\t\tif (theme) {\n\t\t\t\tthemes.push(theme);\n\t\t\t}\n\n\t\t\tconst tags = entity.get(\"themeTags\");\n\n\t\t\tif (tags) {\n\t\t\t\t$array.each(tags, (tag) => {\n\t\t\t\t\tthemeTags.add(tag);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthemes = defaults.concat(themes);\n\n\t\tthis._removeTemplates();\n\n\t\tif (isConnected) {\n\t\t\t$array.eachReverse(this.classNames, (name) => {\n\t\t\t\tconst allRules: Array<IRule<this>> = [];\n\n\t\t\t\t$array.each(themes, (themes) => {\n\t\t\t\t\t$array.each(themes, (theme) => {\n\t\t\t\t\t\tconst rules = theme._lookupRules<this>(name);\n\n\t\t\t\t\t\tif (rules) {\n\t\t\t\t\t\t\t$array.eachReverse(rules, (rule) => {\n\t\t\t\t\t\t\t\tconst matches = rule.tags.every((tag) => {\n\t\t\t\t\t\t\t\t\treturn themeTags.has(tag);\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (matches) {\n\t\t\t\t\t\t\t\t\tconst result = $array.getFirstSortedIndex(allRules, (x) => {\n\t\t\t\t\t\t\t\t\t\tconst order = $order.compare(rule.tags.length, x.tags.length);\n\n\t\t\t\t\t\t\t\t\t\tif (order === 0) {\n\t\t\t\t\t\t\t\t\t\t\treturn $order.compareArray(rule.tags, x.tags, $order.compare);\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\treturn order;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tallRules.splice(result.index, 0, rule);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t$array.each(allRules, (rule) => {\n\t\t\t\t\tthis._templates.push(rule.template);\n\t\t\t\t\trule.template._setObjectTemplate(this);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tthis._applyTemplates();\n\n\t\tif (isConnected) {\n\t\t\t// This causes it to only run the setup function the first time that the themes are applied\n\t\t\tthis._runSetup = false;\n\t\t}\n\n\t\treturn isConnected;\n\t}\n\n\tpublic _changed(): void { }\n\n\tpublic _beforeChanged(): void {\n\n\t\tif (this.isDirty(\"id\")) {\n\t\t\tconst id = this.get(\"id\")!;\n\t\t\tif (id) {\n\t\t\t\tthis._registerId(id);\n\t\t\t}\n\n\t\t\tconst prevId = this._prevSettings.id;\n\t\t\tif(prevId) {\n\t\t\t\tdelete registry.entitiesById[prevId];\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _registerId(id: string): void {\n\t\tif (registry.entitiesById[id] && registry.entitiesById[id] !== this) {\n\t\t\tthrow new Error(\"An entity with id \\\"\" + id + \"\\\" already exists.\");\n\t\t}\n\t\tregistry.entitiesById[id] = this;\n\t}\n\n\tpublic _afterChanged(): void { }\n\n\t/**\n\t * @ignore\n\t */\n\tpublic addDisposer<T extends IDisposer>(disposer: T): T {\n\t\tthis._disposers.push(disposer);\n\t\treturn disposer;\n\t}\n\n\tprotected _dispose() {\n\t\tsuper._dispose();\n\n\t\tconst template = this._template;\n\n\t\tif (template) {\n\t\t\ttemplate._removeObjectTemplate(this);\n\t\t}\n\n\t\t$array.each(this._internalTemplates, (template) => {\n\t\t\ttemplate._removeObjectTemplate(this);\n\t\t});\n\n\t\tthis._removeTemplates();\n\t\tthis._disposeTemplates();\n\n\t\tthis.events.dispose();\n\n\t\tthis._disposers.forEach((x) => {\n\t\t\tx.dispose();\n\t\t});\n\n\t\t$object.each(this._disposerProperties, (_, disposers) => {\n\t\t\t$array.each(disposers, (disposer) => {\n\t\t\t\tdisposer.dispose();\n\t\t\t});\n\t\t});\n\n\t\tconst id = this.get(\"id\")!;\n\t\tif (id) {\n\t\t\tdelete registry.entitiesById[id];\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns a \"disposable\" timeout.\n\t *\n\t * @param   fn     Callback\n\t * @param   delay  Delay in milliseconds\n\t * @return         Timeout disposer\n\t */\n\tpublic setTimeout(fn: () => void, delay: number): IDisposer {\n\t\tconst id = setTimeout(() => {\n\t\t\tthis.removeDispose(disposer);\n\t\t\tfn();\n\t\t}, delay);\n\n\t\tconst disposer = new Disposer(() => {\n\t\t\tclearTimeout(id);\n\t\t});\n\n\t\tthis._disposers.push(disposer);\n\t\treturn disposer;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic removeDispose(target: IDisposer): void {\n\t\tif (!this.isDisposed()) {\n\t\t\tlet index = $array.indexOf(this._disposers, target);\n\t\t\tif (index > -1) {\n\t\t\t\tthis._disposers.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\ttarget.dispose();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic hasTag(tag: string): boolean {\n\t\treturn $array.indexOf(this.get(\"themeTags\", []), tag) !== -1;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic addTag(tag: string): void {\n\t\tif (!this.hasTag(tag)) {\n\t\t\tconst tags = (<any>this).get(\"themeTags\", []);\n\t\t\ttags.push(tag);\n\t\t\tthis.set(\"themeTags\", tags);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic removeTag(tag: string): void {\n\t\tif (this.hasTag(tag)) {\n\t\t\tconst tags = (<any>this).get(\"themeTags\", []);\n\t\t\t$array.remove(tags, tag);\n\t\t\tthis.set(\"themeTags\", tags);\n\t\t}\n\t}\n\n\tprotected _t(text: any, locale?: ILocale, ...rest: Array<string>){\n\t\treturn this._root.language.translate(text, locale, ...rest);\n\t}\n\n\t/**\n\t * An instance of [[Root]] object.\n\t *\n\t * @readonly\n\t * @since 5.0.6\n\t * @return Root object\n\t */\n\tpublic get root(): Root {\n\t\treturn this._root;\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}