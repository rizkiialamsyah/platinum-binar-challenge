{"ast":null,"code":"/**\r\n * A collection of utility functions for various type checks and conversion\r\n * @hidden\r\n */\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Returns `true` if value is not a number (NaN).\r\n *\r\n * @param value Input value\r\n * @return Is NaN?\r\n */\nexport function isNaN(value) {\n  return Number(value) !== value;\n}\n/**\r\n * Returns a type of the value.\r\n *\r\n * @param value  Input value\r\n * @return Type of the value\r\n * @ignore\r\n */\nexport function getType(value) {\n  return {}.toString.call(value);\n}\n/**\r\n * Asserts that the condition is true.\r\n *\r\n * @param condition  Condition to check\r\n * @param message    Message to display in the error\r\n * @ignore\r\n */\nexport function assert(condition) {\n  let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Assertion failed\";\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n/**\r\n * ============================================================================\r\n * QUICK CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Converts any value into a `number`.\r\n *\r\n * @param value  Source value\r\n * @return Number representation of value\r\n */\nexport function toNumber(value) {\n  if (value != null && !isNumber(value)) {\n    let converted = Number(value);\n    if (isNaN(converted) && isString(value) && value != \"\") {\n      return toNumber(value.replace(/[^0-9.\\-]+/g, ''));\n    }\n    return converted;\n  }\n  return value;\n}\n/**\r\n * Converts anything to Date object.\r\n *\r\n * @param value  A value of any type\r\n * @return Date object representing a value\r\n */\nexport function toDate(value) {\n  if (isDate(value)) {\n    // TODO maybe don't create a new Date ?\n    return new Date(value);\n  } else if (isNumber(value)) {\n    return new Date(value);\n  } else {\n    // Try converting to number (assuming timestamp)\n    let num = Number(value);\n    if (!isNumber(num)) {\n      return new Date(value);\n    } else {\n      return new Date(num);\n    }\n  }\n}\n/**\r\n * Converts numeric value into string. Deals with large or small numbers that\r\n * would otherwise use exponents.\r\n *\r\n * @param value  Numeric value\r\n * @return Numeric value as string\r\n */\nexport function numberToString(value) {\n  // TODO handle Infinity and -Infinity\n  if (isNaN(value)) {\n    return \"NaN\";\n  }\n  if (value === Infinity) {\n    return \"Infinity\";\n  }\n  if (value === -Infinity) {\n    return \"-Infinity\";\n  }\n  // Negative 0\n  if (value === 0 && 1 / value === -Infinity) {\n    return \"-0\";\n  }\n  // Preserve negative and deal with absoute values\n  let negative = value < 0;\n  value = Math.abs(value);\n  // TODO test this\n  let parsed = /^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value);\n  let digits = parsed[1];\n  let decimals = parsed[2] || \"\";\n  let res;\n  // Leave the nummber as it is if it does not use exponents\n  if (parsed[3] === undefined) {\n    res = decimals === \"\" ? digits : digits + \".\" + decimals;\n  } else {\n    let exponent = +parsed[3];\n    // Deal with decimals\n    if (value < 1) {\n      let zeros = exponent - 1;\n      res = \"0.\" + repeat(\"0\", zeros) + digits + decimals;\n      // Deal with integers\n    } else {\n      let zeros = exponent - decimals.length;\n      if (zeros === 0) {\n        res = digits + decimals;\n      } else if (zeros < 0) {\n        res = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\n      } else {\n        res = digits + decimals + repeat(\"0\", zeros);\n      }\n    }\n  }\n  return negative ? \"-\" + res : res;\n}\n/**\r\n * Repeats a `string` number of times as set in `amount`.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Make this faster\r\n * @param string  Source string\r\n * @param amount  Number of times to repeat string\r\n * @return New string\r\n */\nexport function repeat(string, amount) {\n  return new Array(amount + 1).join(string);\n}\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Checks if parameter is `Date`.\r\n *\r\n * @param value  Input value\r\n * @return Is Date?\r\n */\nexport function isDate(value) {\n  return getType(value) === \"[object Date]\";\n}\n/**\r\n * Checks if parameter is `string`.\r\n *\r\n * @param value  Input value\r\n * @return Is string?\r\n */\nexport function isString(value) {\n  return typeof value === \"string\";\n}\n/**\r\n * Checks if parameter is `number`.\r\n *\r\n * @param value  Input value\r\n * @return Is number?\r\n */\nexport function isNumber(value) {\n  return typeof value === \"number\" && Number(value) == value;\n}\n/**\r\n * Checks if parameter is `object`.\r\n *\r\n * @param value  Input value\r\n * @return Is object?\r\n */\nexport function isObject(value) {\n  return typeof value === \"object\" && value !== null;\n}\n/**\r\n * Checks if parameter is `Array`.\r\n *\r\n * @param value  Input value\r\n * @return Is Array?\r\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n/**\r\n * ============================================================================\r\n * STATIC CONSTANTS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * @ignore Exclude from docs\r\n */\nexport const PLACEHOLDER = \"__§§§__\";\n/**\r\n * @ignore Exclude from docs\r\n */\nexport const PLACEHOLDER2 = \"__§§§§__\";","map":{"version":3,"names":["isNaN","value","Number","getType","toString","call","assert","condition","message","arguments","length","undefined","Error","toNumber","isNumber","converted","isString","replace","toDate","isDate","Date","num","numberToString","Infinity","negative","Math","abs","parsed","exec","digits","decimals","res","exponent","zeros","repeat","slice","string","amount","Array","join","isObject","isArray","PLACEHOLDER","PLACEHOLDER2"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\util\\Type.ts"],"sourcesContent":["/**\n * A collection of utility functions for various type checks and conversion\n * @hidden\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\n/**\n * ============================================================================\n * MISC\n * ============================================================================\n * @hidden\n */\n\ntype Cond<T, Keys extends keyof T> = Keys extends never\n\t? never\n\t: { [K in Keys]: T[K] };\n\ntype Never<T> = T extends undefined ? never : T;\n\n/**\n * Selects all the keys of T which have a value of U.\n */\nexport type SelectKeys<T, U> = Never<{ [K in keyof T]: T[K] extends U ? K : never }[keyof T]>;\n\n/**\n * Creates a new type which is the same as T except it only has the properties of type U.\n */\nexport type Select<T, U> = Cond<T, SelectKeys<T, U>>;\n\n\n/**\n * @todo Description\n * @ignore Exclude from docs\n */\nexport type Public<T> = { [P in keyof T]: T[P] };\n\n\n/**\n * `Keyof<T>` is the same as `keyof T` except it only accepts string keys, not numbers or symbols.\n */\nexport type Keyof<T> = Extract<keyof T, string>;\n\n\n\n/**\n * ============================================================================\n * TYPE CHECK\n * ============================================================================\n * @hidden\n */\n\n/**\n * Returns `true` if value is not a number (NaN).\n *\n * @param value Input value\n * @return Is NaN?\n */\nexport function isNaN(value: number): boolean {\n\treturn Number(value) !== value;\n}\n\n/**\n * Represents a type for all available JavaScript variable types.\n */\nexport type Type\n\t= \"[object Object]\"\n\t| \"[object Array]\"\n\t| \"[object String]\"\n\t| \"[object Number]\"\n\t| \"[object Boolean]\"\n\t| \"[object Date]\";\n\n/**\n * Returns a type of the value.\n *\n * @param value  Input value\n * @return Type of the value\n * @ignore\n */\nexport function getType<A>(value: A): Type {\n\treturn ({}).toString.call(value) as Type;\n}\n\n\n/**\n * Asserts that the condition is true.\n *\n * @param condition  Condition to check\n * @param message    Message to display in the error\n * @ignore\n */\nexport function assert(condition: boolean, message: string = \"Assertion failed\"): asserts condition {\n\tif (!condition) {\n\t\tthrow new Error(message);\n\t}\n}\n\n\n/**\n * ============================================================================\n * QUICK CONVERSION\n * ============================================================================\n * @hidden\n */\n\n\n/**\n * Converts any value into a `number`.\n *\n * @param value  Source value\n * @return Number representation of value\n */\nexport function toNumber(value: any): number {\n\tif (value != null && !isNumber(value)) {\n\t\tlet converted = Number(value);\n\t\tif (isNaN(converted) && isString(value) && value != \"\") {\n\t\t\treturn toNumber(value.replace(/[^0-9.\\-]+/g, ''));\n\t\t}\n\t\treturn converted;\n\t}\n\treturn value;\n}\n\n\n\n/**\n * Converts anything to Date object.\n *\n * @param value  A value of any type\n * @return Date object representing a value\n */\nexport function toDate(value: Date | number | string): Date {\n\tif (isDate(value)) {\n\t\t// TODO maybe don't create a new Date ?\n\t\treturn new Date(value);\n\t}\n\n\telse if (isNumber(value)) {\n\t\treturn new Date(value);\n\t}\n\n\telse {\n\t\t// Try converting to number (assuming timestamp)\n\t\tlet num = Number(value);\n\n\t\tif (!isNumber(num)) {\n\t\t\treturn new Date(value);\n\t\t}\n\t\telse {\n\t\t\treturn new Date(num);\n\t\t}\n\t}\n}\n\n/**\n * Converts numeric value into string. Deals with large or small numbers that\n * would otherwise use exponents.\n *\n * @param value  Numeric value\n * @return Numeric value as string\n */\nexport function numberToString(value: number): string {\n\t// TODO handle Infinity and -Infinity\n\tif (isNaN(value)) {\n\t\treturn \"NaN\";\n\t}\n\n\tif (value === Infinity) {\n\t\treturn \"Infinity\";\n\t}\n\n\tif (value === -Infinity) {\n\t\treturn \"-Infinity\";\n\t}\n\n\t// Negative 0\n\tif ((value === 0) && (1 / value === -Infinity)) {\n\t\treturn \"-0\";\n\t}\n\n\t// Preserve negative and deal with absoute values\n\tlet negative = value < 0;\n\n\tvalue = Math.abs(value);\n\n\t// TODO test this\n\tlet parsed = /^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value)!;\n\tlet digits = parsed[1];\n\tlet decimals = parsed[2] || \"\";\n\n\tlet res: string;\n\n\t// Leave the nummber as it is if it does not use exponents\n\tif (parsed[3] === undefined) {\n\t\tres = (decimals === \"\" ? digits : digits + \".\" + decimals);\n\n\t} else {\n\t\tlet exponent = +parsed[3];\n\n\t\t// Deal with decimals\n\t\tif (value < 1) {\n\t\t\tlet zeros = exponent - 1;\n\n\t\t\tres = \"0.\" + repeat(\"0\", zeros) + digits + decimals;\n\n\t\t\t// Deal with integers\n\t\t} else {\n\t\t\tlet zeros = exponent - decimals.length;\n\n\t\t\tif (zeros === 0) {\n\t\t\t\tres = digits + decimals;\n\n\t\t\t} else if (zeros < 0) {\n\t\t\t\tres = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\n\n\t\t\t} else {\n\t\t\t\tres = digits + decimals + repeat(\"0\", zeros);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn negative ? \"-\" + res : res;\n}\n\n/**\n * Repeats a `string` number of times as set in `amount`.\n *\n * @ignore Exclude from docs\n * @todo Make this faster\n * @param string  Source string\n * @param amount  Number of times to repeat string\n * @return New string\n */\nexport function repeat(string: string, amount: number): string {\n  return new Array(amount + 1).join(string);\n}\n\n\n/**\n * ============================================================================\n * VALUE PRESENCE CHECK\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines an optional value that can be of any type or `undefined`.\n */\nexport type Optional<A> = A | undefined;\n\n\n/**\n * ============================================================================\n * TYPE CHECK\n * ============================================================================\n * @hidden\n */\n\n/**\n * Checks if parameter is `Date`.\n *\n * @param value  Input value\n * @return Is Date?\n */\nexport function isDate(value: any): value is Date {\n\treturn getType(value) === \"[object Date]\";\n}\n\n/**\n * Checks if parameter is `string`.\n *\n * @param value  Input value\n * @return Is string?\n */\nexport function isString(value: any): value is string {\n\treturn typeof value === \"string\";\n}\n\n/**\n * Checks if parameter is `number`.\n *\n * @param value  Input value\n * @return Is number?\n */\nexport function isNumber(value: any): value is number {\n\treturn typeof value === \"number\" && Number(value) == value;\n}\n\n/**\n * Checks if parameter is `object`.\n *\n * @param value  Input value\n * @return Is object?\n */\nexport function isObject(value: any): value is object {\n\treturn typeof value === \"object\" && value !== null;\n}\n\n/**\n * Checks if parameter is `Array`.\n *\n * @param value  Input value\n * @return Is Array?\n */\nexport function isArray(value: any): value is Array<unknown> {\n\treturn Array.isArray(value);\n}\n\n\n/**\n * ============================================================================\n * STATIC CONSTANTS\n * ============================================================================\n * @hidden\n */\n\n\n/**\n * @ignore Exclude from docs\n */\nexport const PLACEHOLDER: string = \"__§§§__\";\n\n/**\n * @ignore Exclude from docs\n */\nexport const PLACEHOLDER2: string = \"__§§§§__\";\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}