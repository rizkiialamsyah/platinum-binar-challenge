{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { XYSeries } from \"./XYSeries\";\nimport { Percent } from \"../../../core/util/Percent\";\nimport { visualSettings } from \"../../../core/render/Graphics\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\n/**\r\n * Base class for all \"column-based\" series\r\n */\nexport class BaseColumnSeries extends XYSeries {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_ph\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_pw\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n  }\n  _makeGraphics(listTemplate, dataItem) {\n    return this.makeColumn(dataItem, listTemplate);\n  }\n  _makeFieldNames() {\n    super._makeFieldNames();\n    const xAxis = this.get(\"xAxis\");\n    const yAxis = this.get(\"yAxis\");\n    const categoryAxis = \"CategoryAxis\";\n    const valueAxis = \"ValueAxis\";\n    if (xAxis.isType(categoryAxis)) {\n      if (!this.get(\"openCategoryXField\")) {\n        this._xOpenField = this._xField;\n      }\n    }\n    if (xAxis.isType(valueAxis)) {\n      if (!this.get(\"openValueXField\")) {\n        this._xOpenField = this._xField;\n      }\n    }\n    if (yAxis.isType(categoryAxis)) {\n      if (!this.get(\"openCategoryYField\")) {\n        this._yOpenField = this._yField;\n      }\n    }\n    if (yAxis.isType(valueAxis)) {\n      if (!this.get(\"openValueYField\")) {\n        this._yOpenField = this._yField;\n      }\n    }\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    const xAxis = this.get(\"xAxis\");\n    const yAxis = this.get(\"yAxis\");\n    const len = this.dataItems.length;\n    const startIndex = Math.max(0, this.startIndex() - 2);\n    const endIndex = Math.min(this.endIndex() + 2, len - 1);\n    if (xAxis.inited && yAxis.inited) {\n      for (let i = startIndex; i <= endIndex; i++) {\n        let dataItem = this.dataItems[i];\n        this._createGraphics(dataItem);\n      }\n    }\n  }\n  _updateChildren() {\n    const chart = this.chart;\n    if (chart) {\n      this._ph = chart.plotContainer.height();\n      this._pw = chart.plotContainer.width();\n    }\n    const xAxis = this.get(\"xAxis\");\n    const yAxis = this.get(\"yAxis\");\n    const baseAxis = this.get(\"baseAxis\");\n    const columnsTemplate = this.columns.template;\n    if (this.isDirty(\"fill\")) {\n      if (columnsTemplate.get(\"fill\") == null) {\n        columnsTemplate.set(\"fill\", this.get(\"fill\"));\n      }\n    }\n    if (this.isDirty(\"stroke\")) {\n      if (columnsTemplate.get(\"stroke\") == null) {\n        columnsTemplate.set(\"stroke\", this.get(\"stroke\"));\n      }\n    }\n    let index = 0;\n    let clusterCount = 0;\n    let i = 0;\n    $array.each(baseAxis.series, series => {\n      if (series instanceof BaseColumnSeries) {\n        const stacked = series.get(\"stacked\");\n        if (stacked && i == 0) {\n          clusterCount++;\n        }\n        if (!stacked && series.get(\"clustered\")) {\n          clusterCount++;\n        }\n      }\n      if (series === this) {\n        index = clusterCount - 1;\n      }\n      i++;\n    });\n    if (!this.get(\"clustered\")) {\n      index = 0;\n      clusterCount = 1;\n    }\n    if (clusterCount === 0) {\n      clusterCount = 1;\n      index = 0;\n    }\n    const xRenderer = xAxis.get(\"renderer\");\n    const yRenderer = yAxis.get(\"renderer\");\n    const cellStartLocation = \"cellStartLocation\";\n    const cellEndLocation = \"cellEndLocation\";\n    const cellLocationX0 = xRenderer.get(cellStartLocation, 0);\n    const cellLocationX1 = xRenderer.get(cellEndLocation, 1);\n    const cellLocationY0 = yRenderer.get(cellStartLocation, 0);\n    const cellLocationY1 = yRenderer.get(cellEndLocation, 1);\n    this._aLocationX0 = cellLocationX0 + index / clusterCount * (cellLocationX1 - cellLocationX0);\n    this._aLocationX1 = cellLocationX0 + (index + 1) / clusterCount * (cellLocationX1 - cellLocationX0);\n    ;\n    this._aLocationY0 = cellLocationY0 + index / clusterCount * (cellLocationY1 - cellLocationY0);\n    this._aLocationY1 = cellLocationY0 + (index + 1) / clusterCount * (cellLocationY1 - cellLocationY0);\n    if (xAxis.inited && yAxis.inited) {\n      if (this._axesDirty || this._valuesDirty || this._stackDirty || this.isDirty(\"vcx\") || this.isDirty(\"vcy\") || this._sizeDirty) {\n        const len = this.dataItems.length;\n        let startIndex = Math.max(0, this.startIndex() - 2);\n        let endIndex = Math.min(this.endIndex() + 2, len - 1);\n        for (let i = 0; i < startIndex; i++) {\n          this._toggleColumn(this.dataItems[i], false);\n        }\n        let previous = this.dataItems[startIndex];\n        for (let i = startIndex; i <= endIndex; i++) {\n          let dataItem = this.dataItems[i];\n          if (dataItem.get(\"valueX\") != null && dataItem.get(\"valueY\") != null) {\n            previous = dataItem;\n            if (i > 0 && startIndex > 0) {\n              for (let j = i - 1; j >= 0; j--) {\n                let dataItem = this.dataItems[j];\n                if (dataItem.get(\"valueX\") != null && dataItem.get(\"valueY\") != null) {\n                  previous = dataItem;\n                  break;\n                }\n              }\n            }\n            break;\n          } else {\n            this._toggleColumn(dataItem, false);\n          }\n        }\n        for (let i = startIndex; i <= endIndex; i++) {\n          let dataItem = this.dataItems[i];\n          this._updateGraphics(dataItem, previous);\n          if (dataItem.get(\"valueX\") != null && dataItem.get(\"valueY\") != null) {\n            previous = dataItem;\n          }\n        }\n        for (let i = endIndex + 1; i < len; i++) {\n          this._toggleColumn(this.dataItems[i], false);\n        }\n      }\n    } else {\n      this._skipped = true;\n    }\n    this.updateLegendMarker(this.get(\"tooltipDataItem\"));\n    super._updateChildren();\n  }\n  _createGraphics(dataItem) {\n    let graphics = dataItem.get(\"graphics\");\n    if (!graphics) {\n      graphics = this._makeGraphics(this.columns, dataItem);\n      dataItem.set(\"graphics\", graphics);\n      graphics._setDataItem(dataItem);\n      const legendDataItem = dataItem.get(\"legendDataItem\");\n      if (legendDataItem) {\n        const markerRectangle = legendDataItem.get(\"markerRectangle\");\n        if (markerRectangle) {\n          markerRectangle.setAll({\n            fill: graphics.get(\"fill\"),\n            stroke: graphics.get(\"stroke\")\n          });\n        }\n      }\n      this.axisRanges.each(axisRange => {\n        const container = axisRange.container;\n        const graphicsArray = dataItem.get(\"rangeGraphics\", []);\n        dataItem.set(\"rangeGraphics\", graphicsArray);\n        const rangeGraphics = this._makeGraphics(axisRange.columns, dataItem);\n        graphicsArray.push(rangeGraphics);\n        rangeGraphics.setPrivate(\"list\", axisRange.columns);\n        container.children.push(rangeGraphics);\n      });\n    }\n  }\n  _updateGraphics(dataItem, previousDataItem) {\n    let graphics = dataItem.get(\"graphics\");\n    //if (!graphics) {\n    //\tthis._createGraphics(dataItem);\n    //\tgraphics = dataItem.get(\"graphics\")!;\n    //}\n    const xField = this._xField;\n    const yField = this._yField;\n    const valueX = dataItem.get(xField);\n    const valueY = dataItem.get(yField);\n    if (valueX != null && valueY != null) {\n      const xOpenField = this._xOpenField;\n      const yOpenField = this._yOpenField;\n      const locationX = this.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n      const locationY = this.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n      const openLocationX = this.get(\"openLocationX\", dataItem.get(\"openLocationX\", locationX));\n      const openLocationY = this.get(\"openLocationY\", dataItem.get(\"openLocationY\", locationY));\n      const width = graphics.get(\"width\");\n      const height = graphics.get(\"height\");\n      const stacked = this.get(\"stacked\");\n      const xAxis = this.get(\"xAxis\");\n      const yAxis = this.get(\"yAxis\");\n      const baseAxis = this.get(\"baseAxis\");\n      const xStart = xAxis.get(\"start\");\n      const xEnd = xAxis.get(\"end\");\n      const yStart = yAxis.get(\"start\");\n      const yEnd = yAxis.get(\"end\");\n      let l;\n      let r;\n      let t;\n      let b;\n      let vcy = this.get(\"vcy\", 1);\n      let vcx = this.get(\"vcx\", 1);\n      let fitW = false;\n      let fitH = false;\n      if (yAxis.isType(\"CategoryAxis\") && xAxis.isType(\"CategoryAxis\")) {\n        let startLocation = this._aLocationX0 + openLocationX - 0.5;\n        let endLocation = this._aLocationX1 + locationX - 0.5;\n        if (width instanceof Percent) {\n          let offset = (endLocation - startLocation) * (1 - width.value) / 2;\n          startLocation += offset;\n          endLocation -= offset;\n        }\n        l = xAxis.getDataItemPositionX(dataItem, xOpenField, startLocation, vcx);\n        r = xAxis.getDataItemPositionX(dataItem, xField, endLocation, vcx);\n        startLocation = this._aLocationY0 + openLocationY - 0.5;\n        endLocation = this._aLocationY1 + locationY - 0.5;\n        if (height instanceof Percent) {\n          let offset = (endLocation - startLocation) * (1 - height.value) / 2;\n          startLocation += offset;\n          endLocation -= offset;\n        }\n        t = yAxis.getDataItemPositionY(dataItem, yOpenField, startLocation, vcy);\n        b = yAxis.getDataItemPositionY(dataItem, yField, endLocation, vcy);\n        dataItem.setRaw(\"point\", {\n          x: l + (r - l) / 2,\n          y: t + (b - t) / 2\n        });\n      } else if (xAxis === baseAxis) {\n        let startLocation = this._aLocationX0 + openLocationX - 0.5;\n        let endLocation = this._aLocationX1 + locationX - 0.5;\n        if (width instanceof Percent) {\n          let offset = (endLocation - startLocation) * (1 - width.value) / 2;\n          startLocation += offset;\n          endLocation -= offset;\n        }\n        l = xAxis.getDataItemPositionX(dataItem, xOpenField, startLocation, vcx);\n        r = xAxis.getDataItemPositionX(dataItem, xField, endLocation, vcx);\n        t = yAxis.getDataItemPositionY(dataItem, yField, locationY, vcy);\n        if (this._yOpenField !== this._yField) {\n          b = yAxis.getDataItemPositionY(dataItem, yOpenField, openLocationY, vcy);\n        } else {\n          if (stacked) {\n            let stackToItemY = dataItem.get(\"stackToItemY\");\n            if (stackToItemY) {\n              b = yAxis.getDataItemPositionY(stackToItemY, yField, openLocationY, stackToItemY.component.get(\"vcy\"));\n            } else {\n              b = yAxis.basePosition();\n            }\n          } else {\n            b = yAxis.basePosition();\n          }\n        }\n        dataItem.setRaw(\"point\", {\n          x: l + (r - l) / 2,\n          y: t\n        });\n        fitH = true;\n      } else if (yAxis === baseAxis) {\n        let startLocation = this._aLocationY0 + openLocationY - 0.5;\n        let endLocation = this._aLocationY1 + locationY - 0.5;\n        if (height instanceof Percent) {\n          let offset = (endLocation - startLocation) * (1 - height.value) / 2;\n          startLocation += offset;\n          endLocation -= offset;\n        }\n        t = yAxis.getDataItemPositionY(dataItem, yOpenField, startLocation, vcy);\n        b = yAxis.getDataItemPositionY(dataItem, yField, endLocation, vcy);\n        r = xAxis.getDataItemPositionX(dataItem, xField, locationX, vcx);\n        if (this._xOpenField !== this._xField) {\n          l = xAxis.getDataItemPositionX(dataItem, xOpenField, openLocationX, vcx);\n        } else {\n          if (stacked) {\n            let stackToItemX = dataItem.get(\"stackToItemX\");\n            if (stackToItemX) {\n              l = xAxis.getDataItemPositionX(stackToItemX, xField, openLocationX, stackToItemX.component.get(\"vcx\"));\n            } else {\n              l = xAxis.basePosition();\n            }\n          } else {\n            l = xAxis.basePosition();\n          }\n        }\n        fitW = true;\n        dataItem.setRaw(\"point\", {\n          x: r,\n          y: t + (b - t) / 2\n        });\n      }\n      this._updateSeriesGraphics(dataItem, graphics, l, r, t, b, fitW, fitH);\n      if (l < xStart && r < xStart || l > xEnd && r > xEnd || t < yStart && b <= yStart || t >= yEnd && b > yEnd || $type.isNaN(l) || $type.isNaN(t)) {\n        this._toggleColumn(dataItem, false);\n      } else {\n        this._toggleColumn(dataItem, true);\n      }\n      let rangeGraphics = dataItem.get(\"rangeGraphics\");\n      if (rangeGraphics) {\n        $array.each(rangeGraphics, graphics => {\n          this._updateSeriesGraphics(dataItem, graphics, l, r, t, b, fitW, fitH);\n        });\n      }\n      this._applyGraphicsStates(dataItem, previousDataItem);\n    }\n  }\n  _updateSeriesGraphics(dataItem, graphics, l, r, t, b, fitW, fitH) {\n    const width = graphics.get(\"width\");\n    const height = graphics.get(\"height\");\n    const maxWidth = graphics.get(\"maxWidth\");\n    const maxHeight = graphics.get(\"maxHeight\");\n    const ptl = this.getPoint(l, t);\n    const pbr = this.getPoint(r, b);\n    const tooltipPoint = dataItem.get(\"point\");\n    if (tooltipPoint) {\n      const point = this.getPoint(tooltipPoint.x, tooltipPoint.y);\n      tooltipPoint.x = point.x + this._x;\n      tooltipPoint.y = point.y + this._y;\n    }\n    l = ptl.x;\n    r = pbr.x;\n    t = ptl.y;\n    b = pbr.y;\n    if ($type.isNumber(width)) {\n      const offset = (r - l - width) / 2;\n      l += offset;\n      r -= offset;\n    }\n    if ($type.isNumber(maxWidth) && maxWidth < Math.abs(r - l)) {\n      const offset = (r - l - maxWidth) / 2;\n      l += offset;\n      r -= offset;\n    }\n    if ($type.isNumber(height)) {\n      const offset = (b - t - height) / 2;\n      t += offset;\n      b -= offset;\n    }\n    if ($type.isNumber(maxHeight) && maxHeight < Math.abs(b - t)) {\n      const offset = (b - t - maxHeight) / 2;\n      t += offset;\n      b -= offset;\n    }\n    if (this.get(\"adjustBulletPosition\")) {\n      if (fitW) {\n        r = Math.min(Math.max(0, r), this._pw);\n        l = Math.min(Math.max(0, l), this._pw);\n      }\n      if (fitH) {\n        t = Math.min(Math.max(0, t), this._ph);\n        b = Math.min(Math.max(0, b), this._ph);\n      }\n    }\n    dataItem.setRaw(\"left\", l);\n    dataItem.setRaw(\"right\", r);\n    dataItem.setRaw(\"top\", t);\n    dataItem.setRaw(\"bottom\", b);\n    graphics.setPrivate(\"width\", r - l);\n    graphics.setPrivate(\"height\", b - t);\n    graphics.set(\"x\", l);\n    graphics.set(\"y\", b - (b - t));\n  }\n  _handleDataSetChange() {\n    super._handleDataSetChange();\n    $array.each(this._dataItems, dataItem => {\n      this._toggleColumn(dataItem, false);\n    });\n  }\n  _applyGraphicsStates(dataItem, previousDataItem) {\n    const graphics = dataItem.get(\"graphics\");\n    const dropFromOpen = graphics.states.lookup(\"dropFromOpen\");\n    const riseFromOpen = graphics.states.lookup(\"riseFromOpen\");\n    const dropFromPrevious = graphics.states.lookup(\"dropFromPrevious\");\n    const riseFromPrevious = graphics.states.lookup(\"riseFromPrevious\");\n    if (dropFromOpen || dropFromPrevious || riseFromOpen || riseFromPrevious) {\n      const xAxis = this.get(\"xAxis\");\n      const yAxis = this.get(\"yAxis\");\n      const baseAxis = this.get(\"baseAxis\");\n      let open;\n      let close;\n      let previousClose;\n      if (baseAxis === xAxis && yAxis.isType(\"ValueAxis\")) {\n        open = dataItem.get(this._yOpenField);\n        close = dataItem.get(this._yField);\n        previousClose = previousDataItem.get(this._yField);\n      } else if (baseAxis === yAxis && xAxis.isType(\"ValueAxis\")) {\n        open = dataItem.get(this._xOpenField);\n        close = dataItem.get(this._xField);\n        previousClose = previousDataItem.get(this._xField);\n      }\n      if ($type.isNumber(open) && $type.isNumber(close)) {\n        if (close < open) {\n          if (dropFromOpen) {\n            dropFromOpen.apply();\n          }\n        } else {\n          if (riseFromOpen) {\n            riseFromOpen.apply();\n          }\n        }\n        if ($type.isNumber(previousClose)) {\n          if (close < previousClose) {\n            if (dropFromPrevious) {\n              dropFromPrevious.apply();\n            }\n          } else {\n            if (riseFromPrevious) {\n              riseFromPrevious.apply();\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  disposeDataItem(dataItem) {\n    super.disposeDataItem(dataItem);\n    const graphics = dataItem.get(\"graphics\");\n    if (graphics) {\n      this.columns.removeValue(graphics);\n      graphics.dispose();\n    }\n    const rangeGraphics = dataItem.get(\"rangeGraphics\");\n    if (rangeGraphics) {\n      $array.each(rangeGraphics, graphics => {\n        const list = graphics.getPrivate(\"list\");\n        if (list) {\n          list.removeValue(graphics);\n        }\n        graphics.dispose();\n      });\n    }\n  }\n  /**\r\n   * Hides series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n  hideDataItem(dataItem, duration) {\n    const _super = Object.create(null, {\n      hideDataItem: {\n        get: () => super.hideDataItem\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const promises = [_super.hideDataItem.call(this, dataItem, duration)];\n      const graphics = dataItem.get(\"graphics\");\n      if (graphics) {\n        promises.push(graphics.hide(duration));\n      }\n      const rangeGraphics = dataItem.get(\"rangeGraphics\");\n      if (rangeGraphics) {\n        $array.each(rangeGraphics, graphics => {\n          promises.push(graphics.hide(duration));\n        });\n      }\n      yield Promise.all(promises);\n    });\n  }\n  _toggleColumn(dataItem, visible) {\n    const graphics = dataItem.get(\"graphics\");\n    if (graphics) {\n      graphics.setPrivate(\"visible\", visible);\n    }\n    const rangeGraphics = dataItem.get(\"rangeGraphics\");\n    if (rangeGraphics) {\n      $array.each(rangeGraphics, graphics => {\n        graphics.setPrivate(\"visible\", visible);\n      });\n    }\n    const bullets = dataItem.bullets;\n    if (bullets) {\n      $array.each(bullets, bullet => {\n        bullet.setPrivate(\"hidden\", !visible);\n      });\n    }\n  }\n  /**\r\n   * Shows series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n  showDataItem(dataItem, duration) {\n    const _super = Object.create(null, {\n      showDataItem: {\n        get: () => super.showDataItem\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const promises = [_super.showDataItem.call(this, dataItem, duration)];\n      const graphics = dataItem.get(\"graphics\");\n      if (graphics) {\n        promises.push(graphics.show(duration));\n      }\n      const rangeGraphics = dataItem.get(\"rangeGraphics\");\n      if (rangeGraphics) {\n        $array.each(rangeGraphics, graphics => {\n          promises.push(graphics.show(duration));\n        });\n      }\n      yield Promise.all(promises);\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateLegendMarker(dataItem) {\n    let legendDataItem = this.get(\"legendDataItem\");\n    if (this.get(\"useLastColorForLegendMarker\")) {\n      if (!dataItem) {\n        const lastDataItem = this.dataItems[this.endIndex() - 1];\n        if (lastDataItem) {\n          dataItem = lastDataItem;\n        }\n      }\n    }\n    if (legendDataItem) {\n      let graphics = this.columns.template;\n      if (dataItem) {\n        let column = dataItem.get(\"graphics\");\n        if (column) {\n          graphics = column;\n        }\n      }\n      const markerRectangle = legendDataItem.get(\"markerRectangle\");\n      if (markerRectangle) {\n        if (!legendDataItem.get(\"itemContainer\").get(\"disabled\")) {\n          $array.each(visualSettings, setting => {\n            markerRectangle.set(setting, graphics.get(setting, this.get(setting)));\n          });\n        }\n      }\n    }\n  }\n  _getTooltipTarget(dataItem) {\n    if (this.get(\"seriesTooltipTarget\") == \"bullet\") {\n      return super._getTooltipTarget(dataItem);\n    }\n    let column = dataItem.get(\"graphics\");\n    if (column) {\n      return column;\n    }\n    return this;\n  }\n}\nObject.defineProperty(BaseColumnSeries, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"BaseColumnSeries\"\n});\nObject.defineProperty(BaseColumnSeries, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: XYSeries.classNames.concat([BaseColumnSeries.className])\n});","map":{"version":3,"names":["XYSeries","Percent","visualSettings","$array","$type","BaseColumnSeries","constructor","Object","defineProperty","_makeGraphics","listTemplate","dataItem","makeColumn","_makeFieldNames","xAxis","get","yAxis","categoryAxis","valueAxis","isType","_xOpenField","_xField","_yOpenField","_yField","_prepareChildren","len","dataItems","length","startIndex","Math","max","endIndex","min","inited","i","_createGraphics","_updateChildren","chart","_ph","plotContainer","height","_pw","width","baseAxis","columnsTemplate","columns","template","isDirty","set","index","clusterCount","each","series","stacked","xRenderer","yRenderer","cellStartLocation","cellEndLocation","cellLocationX0","cellLocationX1","cellLocationY0","cellLocationY1","_aLocationX0","_aLocationX1","_aLocationY0","_aLocationY1","_axesDirty","_valuesDirty","_stackDirty","_sizeDirty","_toggleColumn","previous","j","_updateGraphics","_skipped","updateLegendMarker","graphics","_setDataItem","legendDataItem","markerRectangle","setAll","fill","stroke","axisRanges","axisRange","container","graphicsArray","rangeGraphics","push","setPrivate","children","previousDataItem","xField","yField","valueX","valueY","xOpenField","yOpenField","locationX","locationY","openLocationX","openLocationY","xStart","xEnd","yStart","yEnd","l","r","t","b","vcy","vcx","fitW","fitH","startLocation","endLocation","offset","value","getDataItemPositionX","getDataItemPositionY","setRaw","x","y","stackToItemY","component","basePosition","stackToItemX","_updateSeriesGraphics","isNaN","_applyGraphicsStates","maxWidth","maxHeight","ptl","getPoint","pbr","tooltipPoint","point","_x","_y","isNumber","abs","_handleDataSetChange","_dataItems","dropFromOpen","states","lookup","riseFromOpen","dropFromPrevious","riseFromPrevious","open","close","previousClose","apply","disposeDataItem","removeValue","dispose","list","getPrivate","hideDataItem","duration","promises","_super","call","hide","Promise","all","visible","bullets","bullet","showDataItem","show","lastDataItem","column","setting","_getTooltipTarget","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\charts\\xy\\series\\BaseColumnSeries.ts"],"sourcesContent":["import type { DataItem } from \"../../../core/render/Component\";\nimport type { Graphics } from \"../../../core/render/Graphics\";\nimport type { Template } from \"../../../core/util/Template\";\nimport type { ListTemplate } from \"../../../core/util/List\";\nimport type { CategoryAxis } from \"../axes/CategoryAxis\";\nimport type { DateAxis } from \"../axes/DateAxis\";\nimport type { ValueAxis } from \"../axes/ValueAxis\";\nimport type { ILegendDataItem } from \"../../../core/render/Legend\";\nimport type { Sprite } from \"../../../core/render/Sprite\";\n\nimport { XYSeries, IXYSeriesPrivate, IXYSeriesSettings, IXYSeriesDataItem, IXYSeriesAxisRange } from \"./XYSeries\";\nimport { Percent } from \"../../../core/util/Percent\";\nimport { visualSettings } from \"../../../core/render/Graphics\";\n\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\n\nexport interface IBaseColumnSeriesDataItem extends IXYSeriesDataItem {\n\n\t/**\n\t * An actual [[Graphics]] element (Column/Slice/Candlestick/OHLC).\n\t */\n\tgraphics?: Graphics;\n\n\t/**\n\t * In case axis ranges are added to the series, it creates a separate\n\t * element ([[Graphics]]) for each axis range. This array holds them all.\n\t */\n\trangeGraphics?: Array<Graphics>;\n\n\t/**\n\t * If data items from this series are used to feed a [[Legend]], this\n\t * will hold a reference to the equivalent Legend data item.\n\t * \n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/#Data_item_list} for more info\n\t */\n\tlegendDataItem?: DataItem<ILegendDataItem>;\n}\n\nexport interface IBaseColumnSeriesSettings extends IXYSeriesSettings {\n\n\t/**\n\t * Indicates if series must divvy up available space with other column\n\t * series (`true`; default) or take up the whole available space (`false`).\n\t *\n\t * @default true\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/column-series/#Clustering} for more info\n\t */\n\tclustered?: boolean;\n\n\t/**\n\t * Whether positions of bullets should be calculated based on portion of\n\t * column currently visual (`true`) or the whole length/height of the\n\t * column (`false`).\n\t *\n\t * @default true\n\t */\n\tadjustBulletPosition?: boolean;\n\n\t/**\n\t * If set to `true` will use color of the last visible column for legend\n\t * marker. Otherwise, series `fill`/`stroke` will be used.\n\t *\n\t * @since 5.1.13\n\t */\n\tuseLastColorForLegendMarker?: boolean\n\n}\n\nexport interface IBaseColumnSeriesPrivate extends IXYSeriesPrivate { }\n\nexport interface IBaseColumnSeriesAxisRange extends IXYSeriesAxisRange {\n\n\t/**\n\t * A list of actual [[Graphics]] elements for an axis range.\n\t *\n\t * Can be used to ajust the look of the axis range columns.\n\t */\n\tcolumns: ListTemplate<Graphics>;\n\n}\n\n/**\n * Base class for all \"column-based\" series\n */\nexport abstract class BaseColumnSeries extends XYSeries {\n\n\tdeclare public _settings: IBaseColumnSeriesSettings;\n\tdeclare public _privateSettings: IBaseColumnSeriesPrivate;\n\tdeclare public _dataItemSettings: IBaseColumnSeriesDataItem;\n\tdeclare public _axisRangeType: IBaseColumnSeriesAxisRange;\n\n\tpublic static className: string = \"BaseColumnSeries\";\n\tpublic static classNames: Array<string> = XYSeries.classNames.concat([BaseColumnSeries.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract makeColumn(dataItem: DataItem<this[\"_dataItemSettings\"]>, listTemplate: ListTemplate<Graphics>): Graphics\n\n\t/**\n\t * ListTemplate of columns in series.\n\t */\n\tpublic abstract columns: ListTemplate<Graphics>;\n\n\tprotected _makeGraphics(listTemplate: ListTemplate<Graphics>, dataItem: DataItem<this[\"_dataItemSettings\"]>): Graphics {\n\t\treturn this.makeColumn(dataItem, listTemplate);\n\t}\n\n\tprotected _ph: number = 0;\n\tprotected _pw: number = 0;\n\n\tpublic _makeFieldNames() {\n\t\tsuper._makeFieldNames();\n\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tconst yAxis = this.get(\"yAxis\");\n\n\t\tconst categoryAxis = \"CategoryAxis\";\n\t\tconst valueAxis = \"ValueAxis\";\n\n\t\tif (xAxis.isType<CategoryAxis<any>>(categoryAxis)) {\n\t\t\tif (!this.get(\"openCategoryXField\")) {\n\t\t\t\tthis._xOpenField = this._xField;\n\t\t\t}\n\t\t}\n\n\t\tif (xAxis.isType<DateAxis<any>>(valueAxis)) {\n\t\t\tif (!this.get(\"openValueXField\")) {\n\t\t\t\tthis._xOpenField = this._xField;\n\t\t\t}\n\t\t}\n\n\t\tif (yAxis.isType<CategoryAxis<any>>(categoryAxis)) {\n\t\t\tif (!this.get(\"openCategoryYField\")) {\n\t\t\t\tthis._yOpenField = this._yField;\n\t\t\t}\n\t\t}\n\n\t\tif (yAxis.isType<DateAxis<any>>(valueAxis)) {\n\t\t\tif (!this.get(\"openValueYField\")) {\n\t\t\t\tthis._yOpenField = this._yField;\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tconst yAxis = this.get(\"yAxis\");\n\n\t\tconst len = this.dataItems.length;\n\t\tconst startIndex = Math.max(0, this.startIndex() - 2);\n\t\tconst endIndex = Math.min(this.endIndex() + 2, len - 1);\n\n\t\tif (xAxis.inited && yAxis.inited) {\n\t\t\tfor (let i = startIndex; i <= endIndex; i++) {\n\t\t\t\tlet dataItem = this.dataItems[i];\n\t\t\t\tthis._createGraphics(dataItem);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _updateChildren() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tthis._ph = chart.plotContainer.height();\n\t\t\tthis._pw = chart.plotContainer.width();\n\t\t}\n\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tconst yAxis = this.get(\"yAxis\");\n\t\tconst baseAxis = this.get(\"baseAxis\")!;\n\n\t\tconst columnsTemplate = this.columns.template;\n\t\tif (this.isDirty(\"fill\")) {\n\t\t\tif (columnsTemplate.get(\"fill\") == null) {\n\t\t\t\tcolumnsTemplate.set(\"fill\", this.get(\"fill\"));\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"stroke\")) {\n\t\t\tif (columnsTemplate.get(\"stroke\") == null) {\n\t\t\t\tcolumnsTemplate.set(\"stroke\", this.get(\"stroke\"));\n\t\t\t}\n\t\t}\n\n\t\tlet index = 0;\n\t\tlet clusterCount = 0;\n\t\tlet i = 0;\n\n\t\t$array.each(baseAxis.series, (series) => {\n\t\t\tif (series instanceof BaseColumnSeries) {\n\t\t\t\tconst stacked = series.get(\"stacked\");\n\n\t\t\t\tif (stacked && i == 0) {\n\t\t\t\t\tclusterCount++;\n\t\t\t\t}\n\n\t\t\t\tif (!stacked && series.get(\"clustered\")) {\n\t\t\t\t\tclusterCount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (series === this) {\n\t\t\t\tindex = clusterCount - 1;\n\t\t\t}\n\t\t\ti++;\n\t\t})\n\n\t\tif (!this.get(\"clustered\")) {\n\t\t\tindex = 0;\n\t\t\tclusterCount = 1;\n\t\t}\n\n\t\tif (clusterCount === 0) {\n\t\t\tclusterCount = 1;\n\t\t\tindex = 0;\n\t\t}\n\n\t\tconst xRenderer = xAxis.get(\"renderer\");\n\t\tconst yRenderer = yAxis.get(\"renderer\");\n\n\t\tconst cellStartLocation = \"cellStartLocation\";\n\t\tconst cellEndLocation = \"cellEndLocation\";\n\n\t\tconst cellLocationX0 = xRenderer.get(cellStartLocation, 0);\n\t\tconst cellLocationX1 = xRenderer.get(cellEndLocation, 1);\n\n\t\tconst cellLocationY0 = yRenderer.get(cellStartLocation, 0);\n\t\tconst cellLocationY1 = yRenderer.get(cellEndLocation, 1);\n\n\t\tthis._aLocationX0 = cellLocationX0 + (index / clusterCount) * (cellLocationX1 - cellLocationX0);\n\t\tthis._aLocationX1 = cellLocationX0 + (index + 1) / clusterCount * (cellLocationX1 - cellLocationX0);;\n\n\t\tthis._aLocationY0 = cellLocationY0 + (index / clusterCount) * (cellLocationY1 - cellLocationY0);\n\t\tthis._aLocationY1 = cellLocationY0 + (index + 1) / clusterCount * (cellLocationY1 - cellLocationY0);\n\n\t\tif (xAxis.inited && yAxis.inited) {\n\t\t\tif (this._axesDirty || this._valuesDirty || this._stackDirty || this.isDirty(\"vcx\") || this.isDirty(\"vcy\") || this._sizeDirty) {\n\t\t\t\tconst len = this.dataItems.length;\n\n\t\t\t\tlet startIndex = Math.max(0, this.startIndex() - 2);\n\t\t\t\tlet endIndex = Math.min(this.endIndex() + 2, len - 1);\n\n\t\t\t\tfor (let i = 0; i < startIndex; i++) {\n\t\t\t\t\tthis._toggleColumn(this.dataItems[i], false);\n\t\t\t\t}\n\t\t\t\tlet previous = this.dataItems[startIndex];\n\n\t\t\t\tfor (let i = startIndex; i <= endIndex; i++) {\n\t\t\t\t\tlet dataItem = this.dataItems[i];\n\t\t\t\t\tif (dataItem.get(\"valueX\") != null && dataItem.get(\"valueY\") != null) {\n\t\t\t\t\t\tprevious = dataItem;\n\t\t\t\t\t\tif (i > 0 && startIndex > 0) {\n\t\t\t\t\t\t\tfor (let j = i - 1; j >= 0; j--) {\n\t\t\t\t\t\t\t\tlet dataItem = this.dataItems[j];\n\t\t\t\t\t\t\t\tif (dataItem.get(\"valueX\") != null && dataItem.get(\"valueY\") != null) {\n\t\t\t\t\t\t\t\t\tprevious = dataItem;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._toggleColumn(dataItem, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let i = startIndex; i <= endIndex; i++) {\n\t\t\t\t\tlet dataItem = this.dataItems[i];\n\t\t\t\t\tthis._updateGraphics(dataItem, previous);\n\t\t\t\t\tif (dataItem.get(\"valueX\") != null && dataItem.get(\"valueY\") != null) {\n\t\t\t\t\t\tprevious = dataItem;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (let i = endIndex + 1; i < len; i++) {\n\t\t\t\t\tthis._toggleColumn(this.dataItems[i], false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis._skipped = true;\n\t\t}\n\t\tthis.updateLegendMarker(this.get(\"tooltipDataItem\"));\n\t\tsuper._updateChildren();\n\t}\n\n\tprotected _createGraphics(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tlet graphics = dataItem.get(\"graphics\");\n\t\tif (!graphics) {\n\t\t\tgraphics = this._makeGraphics(this.columns, dataItem);\n\t\t\tdataItem.set(\"graphics\", graphics);\n\t\t\tgraphics._setDataItem(dataItem);\n\n\t\t\tconst legendDataItem = dataItem.get(\"legendDataItem\");\n\t\t\tif (legendDataItem) {\n\t\t\t\tconst markerRectangle = legendDataItem.get(\"markerRectangle\");\n\t\t\t\tif (markerRectangle) {\n\t\t\t\t\tmarkerRectangle.setAll({ fill: graphics.get(\"fill\"), stroke: graphics.get(\"stroke\") });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.axisRanges.each((axisRange) => {\n\t\t\t\tconst container = axisRange.container!;\n\t\t\t\tconst graphicsArray: Array<Graphics> = dataItem.get(\"rangeGraphics\", []);\n\t\t\t\tdataItem.set(\"rangeGraphics\", graphicsArray);\n\n\t\t\t\tconst rangeGraphics = this._makeGraphics(axisRange.columns, dataItem);\n\t\t\t\tgraphicsArray.push(rangeGraphics);\n\t\t\t\trangeGraphics.setPrivate(\"list\", axisRange.columns);\n\t\t\t\tcontainer.children.push(rangeGraphics);\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _updateGraphics(dataItem: DataItem<this[\"_dataItemSettings\"]>, previousDataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tlet graphics = dataItem.get(\"graphics\")!;\n\n\t\t//if (!graphics) {\n\t\t//\tthis._createGraphics(dataItem);\n\t\t//\tgraphics = dataItem.get(\"graphics\")!;\n\t\t//}\n\n\t\tconst xField = this._xField;\n\t\tconst yField = this._yField;\n\n\t\tconst valueX = dataItem.get(xField as any);\n\t\tconst valueY = dataItem.get(yField as any);\n\n\t\tif (valueX != null && valueY != null) {\n\t\t\tconst xOpenField = this._xOpenField;\n\t\t\tconst yOpenField = this._yOpenField;\n\n\t\t\tconst locationX = this.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n\t\t\tconst locationY = this.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n\n\t\t\tconst openLocationX = this.get(\"openLocationX\", dataItem.get(\"openLocationX\", locationX));\n\t\t\tconst openLocationY = this.get(\"openLocationY\", dataItem.get(\"openLocationY\", locationY));\n\n\t\t\tconst width = graphics.get(\"width\");\n\t\t\tconst height = graphics.get(\"height\");\n\n\t\t\tconst stacked = this.get(\"stacked\");\n\n\t\t\tconst xAxis = this.get(\"xAxis\");\n\t\t\tconst yAxis = this.get(\"yAxis\");\n\t\t\tconst baseAxis = this.get(\"baseAxis\");\n\n\t\t\tconst xStart = xAxis.get(\"start\");\n\t\t\tconst xEnd = xAxis.get(\"end\");\n\n\t\t\tconst yStart = yAxis.get(\"start\");\n\t\t\tconst yEnd = yAxis.get(\"end\");\n\n\t\t\tlet l!: number;\n\t\t\tlet r!: number;\n\t\t\tlet t!: number;\n\t\t\tlet b!: number;\n\n\t\t\tlet vcy = this.get(\"vcy\", 1);\n\t\t\tlet vcx = this.get(\"vcx\", 1);\n\n\t\t\tlet fitW = false;\n\t\t\tlet fitH = false;\n\n\t\t\tif (yAxis.isType<CategoryAxis<any>>(\"CategoryAxis\") && xAxis.isType<CategoryAxis<any>>(\"CategoryAxis\")) {\n\n\t\t\t\tlet startLocation = this._aLocationX0 + openLocationX - 0.5;\n\t\t\t\tlet endLocation = this._aLocationX1 + locationX - 0.5;\n\n\t\t\t\tif (width instanceof Percent) {\n\t\t\t\t\tlet offset: number = (endLocation - startLocation) * (1 - width.value) / 2;\n\t\t\t\t\tstartLocation += offset;\n\t\t\t\t\tendLocation -= offset;\n\t\t\t\t}\n\n\t\t\t\tl = xAxis.getDataItemPositionX(dataItem, xOpenField, startLocation, vcx);\n\t\t\t\tr = xAxis.getDataItemPositionX(dataItem, xField, endLocation, vcx);\n\n\t\t\t\tstartLocation = this._aLocationY0 + openLocationY - 0.5;\n\t\t\t\tendLocation = this._aLocationY1 + locationY - 0.5;\n\n\t\t\t\tif (height instanceof Percent) {\n\t\t\t\t\tlet offset: number = (endLocation - startLocation) * (1 - height.value) / 2;\n\t\t\t\t\tstartLocation += offset;\n\t\t\t\t\tendLocation -= offset;\n\t\t\t\t}\n\n\t\t\t\tt = yAxis.getDataItemPositionY(dataItem, yOpenField, startLocation, vcy);\n\t\t\t\tb = yAxis.getDataItemPositionY(dataItem, yField, endLocation, vcy);\n\n\t\t\t\tdataItem.setRaw(\"point\", { x: l + (r - l) / 2, y: t + (b - t) / 2 });\n\t\t\t}\n\t\t\telse if (xAxis === baseAxis) {\n\n\t\t\t\tlet startLocation = this._aLocationX0 + openLocationX - 0.5;\n\t\t\t\tlet endLocation = this._aLocationX1 + locationX - 0.5;\n\n\t\t\t\tif (width instanceof Percent) {\n\t\t\t\t\tlet offset: number = (endLocation - startLocation) * (1 - width.value) / 2;\n\t\t\t\t\tstartLocation += offset;\n\t\t\t\t\tendLocation -= offset;\n\t\t\t\t}\n\n\t\t\t\tl = xAxis.getDataItemPositionX(dataItem, xOpenField, startLocation, vcx);\n\t\t\t\tr = xAxis.getDataItemPositionX(dataItem, xField, endLocation, vcx);\n\t\t\t\tt = yAxis.getDataItemPositionY(dataItem, yField, locationY, vcy);\n\n\t\t\t\tif (this._yOpenField !== this._yField) {\n\t\t\t\t\tb = yAxis.getDataItemPositionY(dataItem, yOpenField, openLocationY, vcy);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (stacked) {\n\t\t\t\t\t\tlet stackToItemY = dataItem.get(\"stackToItemY\")!;\n\t\t\t\t\t\tif (stackToItemY) {\n\t\t\t\t\t\t\tb = yAxis.getDataItemPositionY(stackToItemY, yField, openLocationY, (stackToItemY.component as XYSeries).get(\"vcy\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tb = yAxis.basePosition();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tb = yAxis.basePosition();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdataItem.setRaw(\"point\", { x: l + (r - l) / 2, y: t });\n\n\t\t\t\tfitH = true;\n\t\t\t}\n\t\t\telse if (yAxis === baseAxis) {\n\t\t\t\tlet startLocation = this._aLocationY0 + openLocationY - 0.5;\n\t\t\t\tlet endLocation = this._aLocationY1 + locationY - 0.5;\n\n\t\t\t\tif (height instanceof Percent) {\n\t\t\t\t\tlet offset: number = (endLocation - startLocation) * (1 - height.value) / 2;\n\t\t\t\t\tstartLocation += offset;\n\t\t\t\t\tendLocation -= offset;\n\t\t\t\t}\n\n\t\t\t\tt = yAxis.getDataItemPositionY(dataItem, yOpenField, startLocation, vcy);\n\t\t\t\tb = yAxis.getDataItemPositionY(dataItem, yField, endLocation, vcy);\n\t\t\t\tr = xAxis.getDataItemPositionX(dataItem, xField, locationX, vcx);\n\n\t\t\t\tif (this._xOpenField !== this._xField) {\n\t\t\t\t\tl = xAxis.getDataItemPositionX(dataItem, xOpenField, openLocationX, vcx);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (stacked) {\n\t\t\t\t\t\tlet stackToItemX = dataItem.get(\"stackToItemX\")!;\n\t\t\t\t\t\tif (stackToItemX) {\n\t\t\t\t\t\t\tl = xAxis.getDataItemPositionX(stackToItemX, xField, openLocationX, (stackToItemX.component as XYSeries).get(\"vcx\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tl = xAxis.basePosition();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tl = xAxis.basePosition();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfitW = true;\n\n\t\t\t\tdataItem.setRaw(\"point\", { x: r, y: t + (b - t) / 2 });\n\t\t\t}\n\n\t\t\tthis._updateSeriesGraphics(dataItem, graphics!, l, r, t, b, fitW, fitH);\n\n\t\t\tif ((l < xStart && r < xStart) || (l > xEnd && r > xEnd) || (t < yStart && b <= yStart) || (t >= yEnd && b > yEnd) || $type.isNaN(l) || $type.isNaN(t)) {\n\t\t\t\tthis._toggleColumn(dataItem, false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._toggleColumn(dataItem, true);\n\t\t\t}\n\n\t\t\tlet rangeGraphics = dataItem.get(\"rangeGraphics\")!;\n\t\t\tif (rangeGraphics) {\n\t\t\t\t$array.each(rangeGraphics, (graphics) => {\n\t\t\t\t\tthis._updateSeriesGraphics(dataItem, graphics, l, r, t, b, fitW, fitH);\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tthis._applyGraphicsStates(dataItem, previousDataItem);\n\t\t}\n\t}\n\n\tprotected _updateSeriesGraphics(dataItem: DataItem<this[\"_dataItemSettings\"]>, graphics: Graphics, l: number, r: number, t: number, b: number, fitW: boolean, fitH: boolean) {\n\t\tconst width = graphics.get(\"width\");\n\t\tconst height = graphics.get(\"height\");\n\t\tconst maxWidth = graphics.get(\"maxWidth\");\n\t\tconst maxHeight = graphics.get(\"maxHeight\");\n\n\t\tconst ptl = this.getPoint(l, t);\n\t\tconst pbr = this.getPoint(r, b);\n\n\t\tconst tooltipPoint = dataItem.get(\"point\");\n\n\t\tif (tooltipPoint) {\n\t\t\tconst point = this.getPoint(tooltipPoint.x, tooltipPoint.y);\n\t\t\ttooltipPoint.x = point.x + this._x;\n\t\t\ttooltipPoint.y = point.y + this._y;\n\t\t}\n\n\t\tl = ptl.x;\n\t\tr = pbr.x;\n\n\t\tt = ptl.y;\n\t\tb = pbr.y;\n\n\t\tif ($type.isNumber(width)) {\n\t\t\tconst offset: number = ((r - l) - width) / 2;\n\t\t\tl += offset;\n\t\t\tr -= offset;\n\t\t}\n\n\t\tif ($type.isNumber(maxWidth) && maxWidth < Math.abs(r - l)) {\n\t\t\tconst offset: number = ((r - l) - maxWidth) / 2;\n\t\t\tl += offset;\n\t\t\tr -= offset;\n\t\t}\n\n\t\tif ($type.isNumber(height)) {\n\t\t\tconst offset: number = ((b - t) - height) / 2;\n\t\t\tt += offset;\n\t\t\tb -= offset;\n\t\t}\n\n\t\tif ($type.isNumber(maxHeight) && maxHeight < Math.abs(b - t)) {\n\t\t\tconst offset: number = ((b - t) - maxHeight) / 2;\n\t\t\tt += offset;\n\t\t\tb -= offset;\n\t\t}\n\n\t\tif (this.get(\"adjustBulletPosition\")) {\n\t\t\tif (fitW) {\n\t\t\t\tr = Math.min(Math.max(0, r), this._pw);\n\t\t\t\tl = Math.min(Math.max(0, l), this._pw);\n\t\t\t}\n\n\t\t\tif (fitH) {\n\t\t\t\tt = Math.min(Math.max(0, t), this._ph);\n\t\t\t\tb = Math.min(Math.max(0, b), this._ph);\n\t\t\t}\n\t\t}\n\n\t\tdataItem.setRaw(\"left\", l);\n\t\tdataItem.setRaw(\"right\", r);\n\t\tdataItem.setRaw(\"top\", t);\n\t\tdataItem.setRaw(\"bottom\", b);\n\n\t\tgraphics.setPrivate(\"width\", r - l);\n\t\tgraphics.setPrivate(\"height\", b - t);\n\t\tgraphics.set(\"x\", l);\n\t\tgraphics.set(\"y\", b - (b - t));\n\t}\n\n\tprotected _handleDataSetChange() {\n\t\tsuper._handleDataSetChange();\n\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\tthis._toggleColumn(dataItem, false);\n\t\t})\n\t}\n\n\tpublic _applyGraphicsStates(dataItem: DataItem<this[\"_dataItemSettings\"]>, previousDataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t\tconst graphics = dataItem.get(\"graphics\")!;\n\n\t\tconst dropFromOpen = graphics.states.lookup(\"dropFromOpen\");\n\t\tconst riseFromOpen = graphics.states.lookup(\"riseFromOpen\");\n\n\t\tconst dropFromPrevious = graphics.states.lookup(\"dropFromPrevious\");\n\t\tconst riseFromPrevious = graphics.states.lookup(\"riseFromPrevious\");\n\n\t\tif (dropFromOpen || dropFromPrevious || riseFromOpen || riseFromPrevious) {\n\t\t\tconst xAxis = this.get(\"xAxis\");\n\t\t\tconst yAxis = this.get(\"yAxis\");\n\t\t\tconst baseAxis = this.get(\"baseAxis\");\n\n\t\t\tlet open: number | undefined;\n\t\t\tlet close: number | undefined;\n\t\t\tlet previousClose: number | undefined;\n\n\t\t\tif (baseAxis === xAxis && yAxis.isType<ValueAxis<any>>(\"ValueAxis\")) {\n\t\t\t\topen = dataItem.get(this._yOpenField as any);\n\t\t\t\tclose = dataItem.get(this._yField as any);\n\n\t\t\t\tpreviousClose = previousDataItem.get(this._yField as any);\n\t\t\t}\n\t\t\telse if (baseAxis === yAxis && xAxis.isType<ValueAxis<any>>(\"ValueAxis\")) {\n\t\t\t\topen = dataItem.get(this._xOpenField as any);\n\t\t\t\tclose = dataItem.get(this._xField as any);\n\n\t\t\t\tpreviousClose = previousDataItem.get(this._xField as any);\n\t\t\t}\n\n\t\t\tif ($type.isNumber(open) && $type.isNumber(close)) {\n\t\t\t\tif (close < open) {\n\t\t\t\t\tif (dropFromOpen) {\n\t\t\t\t\t\tdropFromOpen.apply();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (riseFromOpen) {\n\t\t\t\t\t\triseFromOpen.apply();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($type.isNumber(previousClose)) {\n\t\t\t\t\tif (close < previousClose) {\n\t\t\t\t\t\tif (dropFromPrevious) {\n\t\t\t\t\t\t\tdropFromPrevious.apply();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (riseFromPrevious) {\n\t\t\t\t\t\t\triseFromPrevious.apply();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tconst graphics = dataItem.get(\"graphics\");\n\t\tif (graphics) {\n\t\t\tthis.columns.removeValue(graphics);\n\t\t\tgraphics.dispose();\n\t\t}\n\n\t\tconst rangeGraphics = dataItem.get(\"rangeGraphics\")!;\n\t\tif (rangeGraphics) {\n\t\t\t$array.each(rangeGraphics, (graphics) => {\n\t\t\t\tconst list = graphics.getPrivate(\"list\");\n\t\t\t\tif (list) {\n\t\t\t\t\tlist.removeValue(graphics);\n\t\t\t\t}\n\t\t\t\tgraphics.dispose();\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t * \n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.hideDataItem(dataItem, duration)];\n\t\tconst graphics = dataItem.get(\"graphics\");\n\t\tif (graphics) {\n\t\t\tpromises.push(graphics.hide(duration));\n\t\t}\n\n\t\tconst rangeGraphics = dataItem.get(\"rangeGraphics\")!;\n\t\tif (rangeGraphics) {\n\t\t\t$array.each(rangeGraphics, (graphics) => {\n\t\t\t\tpromises.push(graphics.hide(duration));\n\t\t\t})\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\tprotected _toggleColumn(dataItem: DataItem<this[\"_dataItemSettings\"]>, visible: boolean) {\n\t\tconst graphics = dataItem.get(\"graphics\");\n\t\tif (graphics) {\n\t\t\tgraphics.setPrivate(\"visible\", visible);\n\t\t}\n\n\t\tconst rangeGraphics = dataItem.get(\"rangeGraphics\")!;\n\t\tif (rangeGraphics) {\n\t\t\t$array.each(rangeGraphics, (graphics) => {\n\t\t\t\tgraphics.setPrivate(\"visible\", visible);\n\t\t\t})\n\t\t}\n\n\t\tconst bullets = dataItem.bullets;\n\t\tif (bullets) {\n\t\t\t$array.each(bullets, (bullet) => {\n\t\t\t\tbullet.setPrivate(\"hidden\", !visible);\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t * \n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.showDataItem(dataItem, duration)];\n\t\tconst graphics = dataItem.get(\"graphics\");\n\t\tif (graphics) {\n\t\t\tpromises.push(graphics.show(duration));\n\t\t}\n\n\t\tconst rangeGraphics = dataItem.get(\"rangeGraphics\")!;\n\t\tif (rangeGraphics) {\n\t\t\t$array.each(rangeGraphics, (graphics) => {\n\t\t\t\tpromises.push(graphics.show(duration));\n\t\t\t})\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendMarker(dataItem?: DataItem<IBaseColumnSeriesDataItem>) {\n\t\tlet legendDataItem = this.get(\"legendDataItem\");\n\n\t\tif (this.get(\"useLastColorForLegendMarker\")) {\n\t\t\tif (!dataItem) {\n\t\t\t\tconst lastDataItem = this.dataItems[this.endIndex() - 1];\n\t\t\t\tif (lastDataItem) {\n\t\t\t\t\tdataItem = lastDataItem;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (legendDataItem) {\n\n\t\t\tlet graphics: Template<Graphics> | Graphics = this.columns.template;\n\t\t\tif (dataItem) {\n\t\t\t\tlet column = dataItem.get(\"graphics\");\n\t\t\t\tif (column) {\n\t\t\t\t\tgraphics = column;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst markerRectangle = legendDataItem.get(\"markerRectangle\");\n\n\t\t\tif (markerRectangle) {\n\t\t\t\tif (!legendDataItem.get(\"itemContainer\").get(\"disabled\")) {\n\t\t\t\t\t$array.each(visualSettings, (setting: any) => {\n\t\t\t\t\t\tmarkerRectangle.set(setting, graphics.get(setting, this.get(setting)));\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tprotected _getTooltipTarget(dataItem: DataItem<this[\"_dataItemSettings\"]>): Sprite {\n\t\tif (this.get(\"seriesTooltipTarget\") == \"bullet\") {\n\t\t\treturn super._getTooltipTarget(dataItem);\n\t\t}\n\n\t\tlet column = dataItem.get(\"graphics\");\n\t\tif (column) {\n\t\t\treturn column;\n\t\t}\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}