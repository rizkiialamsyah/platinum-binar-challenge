{"ast":null,"code":"import { Graphics } from \"./Graphics\";\nimport * as $draw from \"../util/Draw\";\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\nexport class Line extends Graphics {\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isDirty(\"points\") || this.isDirty(\"segments\") || this._sizeDirty || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n      this._clear = true;\n    }\n  }\n  _changed() {\n    super._changed();\n    if (this._clear) {\n      const points = this.get(\"points\");\n      const segments = this.get(\"segments\");\n      if (points && points.length > 0) {\n        let point = points[0];\n        this._display.moveTo(point.x, point.y);\n        $draw.segmentedLine(this._display, [[points]]);\n      } else if (segments) {\n        $draw.segmentedLine(this._display, segments);\n      } else if (!this.get(\"draw\")) {\n        let w = this.width();\n        let h = this.height();\n        this._display.moveTo(0, 0);\n        this._display.lineTo(w, h);\n      }\n    }\n  }\n}\nObject.defineProperty(Line, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Line\"\n});\nObject.defineProperty(Line, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Graphics.classNames.concat([Line.className])\n});","map":{"version":3,"names":["Graphics","$draw","Line","_beforeChanged","isDirty","_sizeDirty","isPrivateDirty","_clear","_changed","points","get","segments","length","point","_display","moveTo","x","y","segmentedLine","w","width","h","height","lineTo","Object","defineProperty","classNames","concat","className"],"sources":["C:\\Users\\Rizki\\binar-course\\cms-binar-platinum\\node_modules\\src\\.internal\\core\\render\\Line.ts"],"sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport type { IPoint } from \"../util/IPoint\";\nimport * as $draw from \"../util/Draw\";\n\nexport interface ILineSettings extends IGraphicsSettings {\n\n\t/**\n\t * A list of [[IPoint]] (x/y coordinates) points for the line.\n\t */\n\tpoints?: Array<IPoint>;\n\n\t/**\n\t * A list of [[IPoint]] arrays for different segments of the line.\n\t * \n\t * @since 5.1.4\n\t */\n\tsegments?: Array<Array<Array<IPoint>>>;\n}\n\nexport interface ILinePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a line.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n * @important\n */\nexport class Line extends Graphics {\n\n\tdeclare public _settings: ILineSettings;\n\tdeclare public _privateSettings: ILinePrivate;\n\n\tpublic static className: string = \"Line\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Line.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"points\") || this.isDirty(\"segments\") || this._sizeDirty || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\n\t\t\tconst points = this.get(\"points\");\n\t\t\tconst segments = this.get(\"segments\");\n\n\t\t\tif (points && points.length > 0) {\n\t\t\t\tlet point = points[0];\n\n\t\t\t\tthis._display.moveTo(point.x, point.y);\n\t\t\t\t$draw.segmentedLine(this._display, [[points]]);\n\t\t\t}\n\t\t\telse if (segments) {\n\t\t\t\t$draw.segmentedLine(this._display, segments);\n\t\t\t}\n\t\t\telse if (!this.get(\"draw\")) {\n\t\t\t\tlet w = this.width();\n\t\t\t\tlet h = this.height();\n\n\t\t\t\tthis._display.moveTo(0, 0);\n\t\t\t\tthis._display.lineTo(w, h);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAA6C,YAAY;AAE1E,OAAO,KAAKC,KAAK,MAAM,cAAc;AAoBrC;;;;;;AAMA,OAAM,MAAOC,IAAK,SAAQF,QAAQ;EAQ1BG,cAAcA,CAAA;IACpB,KAAK,CAACA,cAAc,EAAE;IAEtB,IAAI,IAAI,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAACA,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI,CAACC,UAAU,IAAI,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,IAAI,IAAI,CAACA,cAAc,CAAC,QAAQ,CAAC,EAAE;MAC3I,IAAI,CAACC,MAAM,GAAG,IAAI;;EAEpB;EAEOC,QAAQA,CAAA;IACd,KAAK,CAACA,QAAQ,EAAE;IAEhB,IAAI,IAAI,CAACD,MAAM,EAAE;MAEhB,MAAME,MAAM,GAAG,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC;MACjC,MAAMC,QAAQ,GAAG,IAAI,CAACD,GAAG,CAAC,UAAU,CAAC;MAErC,IAAID,MAAM,IAAIA,MAAM,CAACG,MAAM,GAAG,CAAC,EAAE;QAChC,IAAIC,KAAK,GAAGJ,MAAM,CAAC,CAAC,CAAC;QAErB,IAAI,CAACK,QAAQ,CAACC,MAAM,CAACF,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAC,CAAC;QACtChB,KAAK,CAACiB,aAAa,CAAC,IAAI,CAACJ,QAAQ,EAAE,CAAC,CAACL,MAAM,CAAC,CAAC,CAAC;OAC9C,MACI,IAAIE,QAAQ,EAAE;QAClBV,KAAK,CAACiB,aAAa,CAAC,IAAI,CAACJ,QAAQ,EAAEH,QAAQ,CAAC;OAC5C,MACI,IAAI,CAAC,IAAI,CAACD,GAAG,CAAC,MAAM,CAAC,EAAE;QAC3B,IAAIS,CAAC,GAAG,IAAI,CAACC,KAAK,EAAE;QACpB,IAAIC,CAAC,GAAG,IAAI,CAACC,MAAM,EAAE;QAErB,IAAI,CAACR,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1B,IAAI,CAACD,QAAQ,CAACS,MAAM,CAACJ,CAAC,EAAEE,CAAC,CAAC;;;EAG7B;;AApCAG,MAAA,CAAAC,cAAA,CAAAvB,IAAA;;;;SAAkC;;AAClCsB,MAAA,CAAAC,cAAA,CAAAvB,IAAA;;;;SAA0CF,QAAQ,CAAC0B,UAAU,CAACC,MAAM,CAAC,CAACzB,IAAI,CAAC0B,SAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}